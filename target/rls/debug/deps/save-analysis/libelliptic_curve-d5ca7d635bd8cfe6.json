{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12","program":"/home/flo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","elliptic_curve","--edition=2021","/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"arithmetic\"","--cfg","feature=\"base64ct\"","--cfg","feature=\"default\"","--cfg","feature=\"ff\"","--cfg","feature=\"group\"","--cfg","feature=\"jwk\"","--cfg","feature=\"sec1\"","--cfg","feature=\"serde\"","--cfg","feature=\"serde_json\"","-C","metadata=d5ca7d635bd8cfe6","-C","extra-filename=-d5ca7d635bd8cfe6","--out-dir","/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps","-L","dependency=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps","--extern","base16ct=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libbase16ct-3abc3cadc0b3c44a.rmeta","--extern","base64ct=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libbase64ct-93b574b61a7579ee.rmeta","--extern","crypto_bigint=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libcrypto_bigint-0c137c354c97fddb.rmeta","--extern","der=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libder-015bfcdce27b2697.rmeta","--extern","ff=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libff-bf319e08bf46be2b.rmeta","--extern","generic_array=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libgeneric_array-959fb4f9fef62769.rmeta","--extern","group=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libgroup-34bab01a2ff88df1.rmeta","--extern","rand_core=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/librand_core-4083c5c40dba8512.rmeta","--extern","sec1=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libsec1-1dbddd2f8008fafc.rmeta","--extern","serde=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libserde-455f01be4762fcfc.rmeta","--extern","serde_json=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libserde_json-0f420727ac1e023d.rmeta","--extern","subtle=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libsubtle-46f5206c4f2ab8ab.rmeta","--extern","zeroize=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libzeroize-4957fde4475db98e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/flo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libelliptic_curve-d5ca7d635bd8cfe6.rmeta"},"prelude":{"crate_id":{"name":"elliptic_curve","disambiguator":[9011653432551850029,0]},"crate_root":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src","external_crates":[{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":5,"id":{"name":"crypto_bigint","disambiguator":[3379083214445651501,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","num":6,"id":{"name":"generic_array","disambiguator":[3507872413113695977,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":7,"id":{"name":"typenum","disambiguator":[2930080192617149959,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":8,"id":{"name":"subtle","disambiguator":[12790587002246433791,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","num":9,"id":{"name":"rand_core","disambiguator":[14492545944977650796,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":10,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":11,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":12,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":13,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":14,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":15,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":16,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":17,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":18,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":19,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":20,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":21,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":22,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":23,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":24,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":25,"id":{"name":"getrandom","disambiguator":[12471611216122866821,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":26,"id":{"name":"cfg_if","disambiguator":[3771446270907224645,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":27,"id":{"name":"libc","disambiguator":[1960597585436425397,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","num":28,"id":{"name":"zeroize","disambiguator":[1735115861219568687,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":29,"id":{"name":"zeroize_derive","disambiguator":[14978975098898085695,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","num":30,"id":{"name":"group","disambiguator":[17886788804721847452,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","num":31,"id":{"name":"ff","disambiguator":[14332392472765123638,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","num":32,"id":{"name":"sec1","disambiguator":[3414962065437233688,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","num":33,"id":{"name":"der","disambiguator":[10070637691559664763,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","num":34,"id":{"name":"const_oid","disambiguator":[15159770746800366928,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","num":35,"id":{"name":"pkcs8","disambiguator":[17116388926795044113,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","num":36,"id":{"name":"spki","disambiguator":[8992484692672373861,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","num":37,"id":{"name":"base16ct","disambiguator":[548302052877342287,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","num":38,"id":{"name":"serde","disambiguator":[13360854101770207451,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","num":39,"id":{"name":"serde_derive","disambiguator":[2309101786767840447,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","num":40,"id":{"name":"base64ct","disambiguator":[15642600002087829237,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","num":41,"id":{"name":"serde_json","disambiguator":[17962802195824469082,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","num":42,"id":{"name":"itoa","disambiguator":[270418426861410454,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","num":43,"id":{"name":"ryu","disambiguator":[9495708289465993403,0]}}],"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":0,"byte_end":8083,"line_start":1,"line_end":241,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":3091},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8177,"byte_end":8180,"line_start":3,"line_end":3,"column_start":21,"column_end":24},"alias_span":null,"name":"Add","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":3122},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8182,"byte_end":8191,"line_start":3,"line_end":3,"column_start":26,"column_end":35},"alias_span":null,"name":"AddAssign","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":3101},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8193,"byte_end":8196,"line_start":3,"line_end":3,"column_start":37,"column_end":40},"alias_span":null,"name":"Mul","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":3118},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8198,"byte_end":8201,"line_start":3,"line_end":3,"column_start":42,"column_end":45},"alias_span":null,"name":"Neg","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":3096},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8203,"byte_end":8206,"line_start":3,"line_end":3,"column_start":47,"column_end":50},"alias_span":null,"name":"Sub","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":3126},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8208,"byte_end":8217,"line_start":3,"line_end":3,"column_start":52,"column_end":61},"alias_span":null,"name":"SubAssign","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":32,"index":431},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11474,"byte_end":11485,"line_start":5,"line_end":5,"column_start":23,"column_end":34},"alias_span":null,"name":"Coordinates","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":32,"index":66},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11487,"byte_end":11498,"line_start":5,"line_end":5,"column_start":36,"column_end":47},"alias_span":null,"name":"ModulusSize","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":32,"index":470},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11500,"byte_end":11503,"line_start":5,"line_end":5,"column_start":49,"column_end":52},"alias_span":null,"name":"Tag","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":0,"index":1248},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3288,"byte_end":3293,"line_start":105,"line_end":105,"column_start":13,"column_end":18},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1249},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3288,"byte_end":3293,"line_start":105,"line_end":105,"column_start":13,"column_end":18},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":119},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3295,"byte_end":3301,"line_start":105,"line_end":105,"column_start":20,"column_end":26},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3325,"byte_end":3342,"line_start":107,"line_end":107,"column_start":9,"column_end":26},"alias_span":null,"name":"AffineXCoordinate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3344,"byte_end":3358,"line_start":107,"line_end":107,"column_start":28,"column_end":42},"alias_span":null,"name":"DecompactPoint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":145},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3360,"byte_end":3375,"line_start":107,"line_end":107,"column_start":44,"column_end":59},"alias_span":null,"name":"DecompressPoint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":153},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3377,"byte_end":3392,"line_start":107,"line_end":107,"column_start":61,"column_end":76},"alias_span":null,"name":"PointCompaction","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":151},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3394,"byte_end":3410,"line_start":107,"line_end":107,"column_start":78,"column_end":94},"alias_span":null,"name":"PointCompression","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1261},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3438,"byte_end":3448,"line_start":109,"line_end":109,"column_start":20,"column_end":30},"alias_span":null,"name":"ScalarCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":588},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3450,"byte_end":3456,"line_start":109,"line_end":109,"column_start":32,"column_end":38},"alias_span":null,"name":"IsHigh","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1281},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3475,"byte_end":3484,"line_start":110,"line_end":110,"column_start":17,"column_end":26},"alias_span":null,"name":"SecretKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3497,"byte_end":3510,"line_start":112,"line_end":112,"column_start":9,"column_end":22},"alias_span":null,"name":"bigint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":6,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3530,"byte_end":3543,"line_start":113,"line_end":113,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":7,"index":2827},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3561,"byte_end":3567,"line_start":113,"line_end":113,"column_start":40,"column_end":46},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":9,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3578,"byte_end":3587,"line_start":114,"line_end":114,"column_start":9,"column_end":18},"alias_span":null,"name":"rand_core","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":8,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3597,"byte_end":3603,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"alias_span":null,"name":"subtle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":28,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3613,"byte_end":3620,"line_start":116,"line_end":116,"column_start":9,"column_end":16},"alias_span":null,"name":"zeroize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":775},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3711,"byte_end":3727,"line_start":122,"line_end":122,"column_start":13,"column_end":29},"alias_span":null,"name":"AffineArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":777},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3729,"byte_end":3749,"line_start":122,"line_end":122,"column_start":31,"column_end":51},"alias_span":null,"name":"PrimeCurveArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":779},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3751,"byte_end":3771,"line_start":122,"line_end":122,"column_start":53,"column_end":73},"alias_span":null,"name":"ProjectiveArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":781},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3773,"byte_end":3789,"line_start":122,"line_end":122,"column_start":75,"column_end":91},"alias_span":null,"name":"ScalarArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1287},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3822,"byte_end":3831,"line_start":124,"line_end":124,"column_start":21,"column_end":30},"alias_span":null,"name":"PublicKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1275},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3859,"byte_end":3872,"line_start":125,"line_end":125,"column_start":27,"column_end":40},"alias_span":null,"name":"NonZeroScalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":586},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3874,"byte_end":3880,"line_start":125,"line_end":125,"column_start":42,"column_end":48},"alias_span":null,"name":"Scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":31,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3894,"byte_end":3896,"line_start":127,"line_end":127,"column_start":5,"column_end":7},"alias_span":null,"name":"ff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":31,"index":62},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3905,"byte_end":3910,"line_start":127,"line_end":127,"column_start":16,"column_end":21},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":31,"index":82},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3912,"byte_end":3922,"line_start":127,"line_end":127,"column_start":23,"column_end":33},"alias_span":null,"name":"PrimeField","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":30,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3929,"byte_end":3934,"line_start":128,"line_end":128,"column_start":5,"column_end":10},"alias_span":null,"name":"group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":30,"index":176},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":3943,"byte_end":3948,"line_start":128,"line_end":128,"column_start":19,"column_end":24},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1307},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4061,"byte_end":4069,"line_start":135,"line_end":135,"column_start":22,"column_end":30},"alias_span":null,"name":"JwkEcKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1003},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4071,"byte_end":4084,"line_start":135,"line_end":135,"column_start":32,"column_end":45},"alias_span":null,"name":"JwkParameters","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":38,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4172,"byte_end":4177,"line_start":141,"line_end":141,"column_start":9,"column_end":14},"alias_span":null,"name":"serde","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":0,"byte_end":8083,"line_start":1,"line_end":241,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":58},{"krate":0,"index":111},{"krate":0,"index":127},{"krate":0,"index":155},{"krate":0,"index":590},{"krate":0,"index":739},{"krate":0,"index":783},{"krate":0,"index":894},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1137},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1153},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1175},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1236},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246}],"decl_id":null,"docs":"# RustCrypto: Elliptic Curve Traits","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code, clippy :: unwrap_used)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":50,"byte_end":94,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"warn(missing_docs, rust_2018_idioms, unused_qualifications)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":95,"byte_end":158,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/ ## Usage","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":458,"byte_end":470,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":471,"byte_end":474,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This crate provides traits for describing elliptic curves, along with","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":475,"byte_end":548,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ types which are generic over elliptic curves which can be used as the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":549,"byte_end":622,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/ basis of curve-agnostic code.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":623,"byte_end":656,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":657,"byte_end":660,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ It's intended to be used with the following concrete elliptic curve","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":661,"byte_end":732,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/ implementations from the [`RustCrypto/elliptic-curves`] project:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":733,"byte_end":801,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":802,"byte_end":805,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ - [`bp256`]: brainpoolP256r1 and brainpoolP256t1","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":806,"byte_end":858,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ - [`bp384`]: brainpoolP384r1 and brainpoolP384t1","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":859,"byte_end":911,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/ - [`k256`]: secp256k1 a.k.a. K-256","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":912,"byte_end":950,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/ - [`p256`]: NIST P-256 a.k.a secp256r1, prime256v1","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":951,"byte_end":1005,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/ - [`p384`]: NIST P-384 a.k.a. secp384r1","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1006,"byte_end":1049,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1050,"byte_end":1053,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The [`ecdsa`] crate provides a generic implementation of the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1054,"byte_end":1118,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/ Elliptic Curve Digital Signature Algorithm which can be used with any of","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1119,"byte_end":1195,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ the above crates, either via an external ECDSA implementation, or","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1196,"byte_end":1265,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ using native curve arithmetic where applicable.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1266,"byte_end":1317,"line_start":30,"line_end":30,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1318,"byte_end":1321,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ## Type conversions","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1322,"byte_end":1345,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1346,"byte_end":1349,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The following chart illustrates the various conversions possible between","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1350,"byte_end":1426,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ the various types defined by this crate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1427,"byte_end":1471,"line_start":35,"line_end":35,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1472,"byte_end":1475,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ![Type Conversion Map](https://raw.githubusercontent.com/RustCrypto/media/master/img/elliptic-curve/type-transforms.svg)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1476,"byte_end":1600,"line_start":37,"line_end":37,"column_start":1,"column_end":125}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1601,"byte_end":1604,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## `serde` support","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1605,"byte_end":1627,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1628,"byte_end":1631,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ When the `serde` feature of this crate is enabled, `Serialize` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1632,"byte_end":1702,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/ `Deserialize` impls are provided for the following types:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1703,"byte_end":1764,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1765,"byte_end":1768,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ - [`JwkEcKey`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1769,"byte_end":1787,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/ - [`PublicKey`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1788,"byte_end":1807,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/ - [`ScalarCore`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1808,"byte_end":1828,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1829,"byte_end":1832,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Please see type-specific documentation for more information.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1833,"byte_end":1897,"line_start":48,"line_end":48,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1898,"byte_end":1901,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ [`RustCrypto/elliptic-curves`]: https://github.com/RustCrypto/elliptic-curves","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1902,"byte_end":1983,"line_start":50,"line_end":50,"column_start":1,"column_end":82}},{"value":"/ [`bp256`]: https://github.com/RustCrypto/elliptic-curves/tree/master/bp256","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":1984,"byte_end":2062,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ [`bp384`]: https://github.com/RustCrypto/elliptic-curves/tree/master/bp384","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":2063,"byte_end":2141,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"/ [`k256`]: https://github.com/RustCrypto/elliptic-curves/tree/master/k256","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":2142,"byte_end":2218,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/ [`p256`]: https://github.com/RustCrypto/elliptic-curves/tree/master/p256","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":2219,"byte_end":2295,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ [`p384`]: https://github.com/RustCrypto/elliptic-curves/tree/master/p384","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":2296,"byte_end":2372,"line_start":55,"line_end":55,"column_start":1,"column_end":77}},{"value":"/ [`ecdsa`]: https://github.com/RustCrypto/signatures/tree/master/ecdsa","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":2373,"byte_end":2446,"line_start":56,"line_end":56,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":55}],"decl_id":null,"docs":" Traits for arithmetic operations on elliptic curve field elements.\n","sig":null,"attributes":[{"value":"/ Traits for arithmetic operations on elliptic curve field elements.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8085,"byte_end":8155,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8530,"byte_end":8536,"line_start":15,"line_end":15,"column_start":11,"column_end":17},"name":"Invert","qualname":"::ops::Invert","value":"Invert","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"decl_id":null,"docs":" Perform an inversion on a field element (i.e. base field element or scalar)\n","sig":null,"attributes":[{"value":"/ Perform an inversion on a field element (i.e. base field element or scalar)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8440,"byte_end":8519,"line_start":14,"line_end":14,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8575,"byte_end":8581,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::Invert::Output","value":"type Output;","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Field element type\n","sig":null,"attributes":[{"value":"/ Field element type","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8543,"byte_end":8565,"line_start":16,"line_end":16,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8623,"byte_end":8629,"line_start":20,"line_end":20,"column_start":8,"column_end":14},"name":"invert","qualname":"::ops::Invert::invert","value":"pub fn invert(&Self) -> CtOption<Self::Output>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Invert a field element.\n","sig":null,"attributes":[{"value":"/ Invert a field element.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8588,"byte_end":8615,"line_start":19,"line_end":19,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":48},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9234,"byte_end":9251,"line_start":40,"line_end":40,"column_start":11,"column_end":28},"name":"LinearCombination","qualname":"::ops::LinearCombination","value":"LinearCombination: Group","parent":null,"children":[{"krate":0,"index":49}],"decl_id":null,"docs":" Linear combination.","sig":null,"attributes":[{"value":"/ Linear combination.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8833,"byte_end":8856,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8857,"byte_end":8860,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This trait enables crates to provide an optimized implementation of","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8861,"byte_end":8932,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ linear combinations (e.g. Shamir's Trick), or otherwise provides a default","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8933,"byte_end":9011,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ non-optimized implementation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9012,"byte_end":9045,"line_start":36,"line_end":36,"column_start":1,"column_end":34}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9139,"byte_end":9169,"line_start":38,"line_end":38,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9304,"byte_end":9311,"line_start":42,"line_end":42,"column_start":8,"column_end":15},"name":"lincomb","qualname":"::ops::LinearCombination::lincomb","value":"pub fn lincomb(&Self, &Self::Scalar, &Self, &Self::Scalar) -> Self","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" Calculates `x * k + y * l`.\n","sig":null,"attributes":[{"value":"/ Calculates `x * k + y * l`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9265,"byte_end":9296,"line_start":41,"line_end":41,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9448,"byte_end":9454,"line_start":48,"line_end":48,"column_start":11,"column_end":17},"name":"Reduce","qualname":"::ops::Reduce","value":"Reduce<UInt: Integer + ArrayEncoding>: Sized","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" Modular reduction.\n","sig":null,"attributes":[{"value":"/ Modular reduction.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9415,"byte_end":9437,"line_start":47,"line_end":47,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9566,"byte_end":9583,"line_start":50,"line_end":50,"column_start":8,"column_end":25},"name":"from_uint_reduced","qualname":"::ops::Reduce::from_uint_reduced","value":"pub fn from_uint_reduced(UInt) -> Self","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Perform a modular reduction, returning a field element.\n","sig":null,"attributes":[{"value":"/ Perform a modular reduction, returning a field element.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9499,"byte_end":9558,"line_start":49,"line_end":49,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9714,"byte_end":9735,"line_start":54,"line_end":54,"column_start":8,"column_end":29},"name":"from_be_bytes_reduced","qualname":"::ops::Reduce::from_be_bytes_reduced","value":"pub fn from_be_bytes_reduced(ByteArray<UInt>) -> Self","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Interpret the given byte array as a big endian integer and perform\n a modular reduction.\n","sig":null,"attributes":[{"value":"/ Interpret the given byte array as a big endian integer and perform","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9607,"byte_end":9677,"line_start":52,"line_end":52,"column_start":5,"column_end":75}},{"value":"/ a modular reduction.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9682,"byte_end":9706,"line_start":53,"line_end":53,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9956,"byte_end":9977,"line_start":60,"line_end":60,"column_start":8,"column_end":29},"name":"from_le_bytes_reduced","qualname":"::ops::Reduce::from_le_bytes_reduced","value":"pub fn from_le_bytes_reduced(ByteArray<UInt>) -> Self","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Interpret the given byte array as a little endian integer and perform a\n modular reduction.\n","sig":null,"attributes":[{"value":"/ Interpret the given byte array as a little endian integer and perform a","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9846,"byte_end":9921,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"/ modular reduction.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9926,"byte_end":9948,"line_start":59,"line_end":59,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":11182,"byte_end":11195,"line_start":94,"line_end":94,"column_start":11,"column_end":24},"name":"ReduceNonZero","qualname":"::ops::ReduceNonZero","value":"ReduceNonZero<UInt: Integer + ArrayEncoding>: Sized","parent":null,"children":[{"krate":0,"index":57}],"decl_id":null,"docs":" Modular reduction to a non-zero output.","sig":null,"attributes":[{"value":"/ Modular reduction to a non-zero output.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":10905,"byte_end":10948,"line_start":87,"line_end":87,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":10949,"byte_end":10952,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ This trait is primarily intended for use by curve implementations such","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":10953,"byte_end":11027,"line_start":89,"line_end":89,"column_start":1,"column_end":75}},{"value":"/ as the `k256` and `p256` crates.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":11028,"byte_end":11064,"line_start":90,"line_end":90,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":11065,"byte_end":11068,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ End users should use the [`Reduce`] impl on","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":11069,"byte_end":11116,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ [`NonZeroScalar`][`crate::NonZeroScalar`] instead.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":11117,"byte_end":11171,"line_start":93,"line_end":93,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":11307,"byte_end":11332,"line_start":96,"line_end":96,"column_start":8,"column_end":33},"name":"from_uint_reduced_nonzero","qualname":"::ops::ReduceNonZero::from_uint_reduced_nonzero","value":"pub fn from_uint_reduced_nonzero(UInt) -> Self","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Perform a modular reduction, returning a field element.\n","sig":null,"attributes":[{"value":"/ Perform a modular reduction, returning a field element.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":11240,"byte_end":11299,"line_start":95,"line_end":95,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sec1","qualname":"::sec1","value":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":108}],"decl_id":null,"docs":" Support for SEC1 elliptic curve encoding formats.","sig":null,"attributes":[{"value":"cfg(feature = \"sec1\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":2693,"byte_end":2717,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/ Support for SEC1 elliptic curve encoding formats.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11354,"byte_end":11407,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11408,"byte_end":11411,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ <https://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11412,"byte_end":11450,"line_start":3,"line_end":3,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":95},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11748,"byte_end":11760,"line_start":14,"line_end":14,"column_start":10,"column_end":22},"name":"EncodedPoint","qualname":"::sec1::EncodedPoint","value":"sec1::point::EncodedPoint<FieldSize<C>>","parent":null,"children":[],"decl_id":null,"docs":" Encoded elliptic curve point sized appropriately for a given curve.\n","sig":null,"attributes":[{"value":"/ Encoded elliptic curve point sized appropriately for a given curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11667,"byte_end":11738,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11976,"byte_end":11992,"line_start":19,"line_end":19,"column_start":11,"column_end":27},"name":"FromEncodedPoint","qualname":"::sec1::FromEncodedPoint","value":"FromEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":99}],"decl_id":null,"docs":" Trait for deserializing a value from a SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ Trait for deserializing a value from a SEC1 encoded curve point.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11808,"byte_end":11876,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11877,"byte_end":11880,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":11881,"byte_end":11965,"line_start":18,"line_end":18,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12152,"byte_end":12170,"line_start":26,"line_end":26,"column_start":8,"column_end":26},"name":"from_encoded_point","qualname":"::sec1::FromEncodedPoint::from_encoded_point","value":"pub fn from_encoded_point(&EncodedPoint<C>) -> CtOption<Self>","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Deserialize the type this trait is impl'd on from an [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Deserialize the type this trait is impl'd on from an [`EncodedPoint`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12070,"byte_end":12144,"line_start":25,"line_end":25,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":100},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12382,"byte_end":12396,"line_start":32,"line_end":32,"column_start":11,"column_end":25},"name":"ToEncodedPoint","qualname":"::sec1::ToEncodedPoint","value":"ToEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":102}],"decl_id":null,"docs":" Trait for serializing a value to a SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ Trait for serializing a value to a SEC1 encoded curve point.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12218,"byte_end":12282,"line_start":29,"line_end":29,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12283,"byte_end":12286,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12287,"byte_end":12371,"line_start":31,"line_end":31,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12564,"byte_end":12580,"line_start":39,"line_end":39,"column_start":8,"column_end":24},"name":"to_encoded_point","qualname":"::sec1::ToEncodedPoint::to_encoded_point","value":"pub fn to_encoded_point(&Self, bool) -> EncodedPoint<C>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Serialize this value as a SEC1 [`EncodedPoint`], optionally applying\n point compression.\n","sig":null,"attributes":[{"value":"/ Serialize this value as a SEC1 [`EncodedPoint`], optionally applying","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12457,"byte_end":12529,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ point compression.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12534,"byte_end":12556,"line_start":38,"line_end":38,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":103},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12807,"byte_end":12828,"line_start":45,"line_end":45,"column_start":11,"column_end":32},"name":"ToCompactEncodedPoint","qualname":"::sec1::ToCompactEncodedPoint","value":"ToCompactEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":105}],"decl_id":null,"docs":" Trait for serializing a value to a SEC1 encoded curve point with compaction.","sig":null,"attributes":[{"value":"/ Trait for serializing a value to a SEC1 encoded curve point with compaction.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12627,"byte_end":12707,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12708,"byte_end":12711,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12712,"byte_end":12796,"line_start":44,"line_end":44,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12996,"byte_end":13020,"line_start":52,"line_end":52,"column_start":8,"column_end":32},"name":"to_compact_encoded_point","qualname":"::sec1::ToCompactEncodedPoint::to_compact_encoded_point","value":"pub fn to_compact_encoded_point(&Self) -> Option<EncodedPoint<C>>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Serialize this value as a SEC1 [`EncodedPoint`], optionally applying\n point compression.\n","sig":null,"attributes":[{"value":"/ Serialize this value as a SEC1 [`EncodedPoint`], optionally applying","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12889,"byte_end":12961,"line_start":50,"line_end":50,"column_start":5,"column_end":77}},{"value":"/ point compression.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":12966,"byte_end":12988,"line_start":51,"line_end":51,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":106},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13305,"byte_end":13322,"line_start":60,"line_end":60,"column_start":11,"column_end":28},"name":"ValidatePublicKey","qualname":"::sec1::ValidatePublicKey","value":"ValidatePublicKey","parent":null,"children":[{"krate":0,"index":107}],"decl_id":null,"docs":" Validate that the given [`EncodedPoint`] represents the encoded public key\n value of the given secret.","sig":null,"attributes":[{"value":"/ Validate that the given [`EncodedPoint`] represents the encoded public key","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13059,"byte_end":13137,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/ value of the given secret.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13138,"byte_end":13168,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13169,"byte_end":13172,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Curve implementations which also impl [`ProjectiveArithmetic`] will receive","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13173,"byte_end":13252,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ a blanket default impl of this trait.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13253,"byte_end":13294,"line_start":59,"line_end":59,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13530,"byte_end":13549,"line_start":68,"line_end":68,"column_start":8,"column_end":27},"name":"validate_public_key","qualname":"::sec1::ValidatePublicKey::validate_public_key","value":"pub fn validate_public_key(&SecretKey<Self>, &EncodedPoint<Self>)\n-> Result<()>","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Validate that the given [`EncodedPoint`] is a valid public key for the\n provided secret value.\n","sig":null,"attributes":[{"value":"/ Validate that the given [`EncodedPoint`] is a valid public key for the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13386,"byte_end":13460,"line_start":65,"line_end":65,"column_start":5,"column_end":79}},{"value":"/ provided secret value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13465,"byte_end":13491,"line_start":66,"line_end":66,"column_start":5,"column_end":31}},{"value":"allow(unused_variables)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":13496,"byte_end":13522,"line_start":67,"line_end":67,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":119},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":14731,"byte_end":14737,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type with the `elliptic-curve` crate's [`Error`] type.\n","sig":null,"attributes":[{"value":"/ Result type with the `elliptic-curve` crate's [`Error`] type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":14656,"byte_end":14721,"line_start":8,"line_end":8,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1248},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":14859,"byte_end":14864,"line_start":13,"line_end":13,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Elliptic curve errors.\n","sig":null,"attributes":[{"value":"/ Elliptic curve errors.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":14776,"byte_end":14802,"line_start":11,"line_end":11,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":142},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15590,"byte_end":15607,"line_start":7,"line_end":7,"column_start":11,"column_end":28},"name":"AffineXCoordinate","qualname":"::point::AffineXCoordinate","value":"AffineXCoordinate<C: Curve>","parent":null,"children":[{"krate":0,"index":144}],"decl_id":null,"docs":" Obtain the affine x-coordinate of an elliptic curve point.\n","sig":null,"attributes":[{"value":"/ Obtain the affine x-coordinate of an elliptic curve point.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15517,"byte_end":15579,"line_start":6,"line_end":6,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15694,"byte_end":15695,"line_start":9,"line_end":9,"column_start":8,"column_end":9},"name":"x","qualname":"::point::AffineXCoordinate::x","value":"pub fn x(&Self) -> FieldBytes<C>","parent":{"krate":0,"index":142},"children":[],"decl_id":null,"docs":" Get the affine x-coordinate as a serialized field element.\n","sig":null,"attributes":[{"value":"/ Get the affine x-coordinate as a serialized field element.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15624,"byte_end":15686,"line_start":8,"line_end":8,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":145},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15931,"byte_end":15946,"line_start":16,"line_end":16,"column_start":11,"column_end":26},"name":"DecompressPoint","qualname":"::point::DecompressPoint","value":"DecompressPoint<C: Curve>: Sized","parent":null,"children":[{"krate":0,"index":147}],"decl_id":null,"docs":" Decompress an elliptic curve point.","sig":null,"attributes":[{"value":"/ Decompress an elliptic curve point.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15724,"byte_end":15763,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15764,"byte_end":15767,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Point decompression recovers an original curve point from its x-coordinate","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15768,"byte_end":15846,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ and a boolean flag indicating whether or not the y-coordinate is odd.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15847,"byte_end":15920,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16028,"byte_end":16038,"line_start":18,"line_end":18,"column_start":8,"column_end":18},"name":"decompress","qualname":"::point::DecompressPoint::decompress","value":"pub fn decompress(&FieldBytes<C>, Choice) -> CtOption<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Attempt to decompress an elliptic curve point.\n","sig":null,"attributes":[{"value":"/ Attempt to decompress an elliptic curve point.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15970,"byte_end":16020,"line_start":17,"line_end":17,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":148},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16318,"byte_end":16332,"line_start":25,"line_end":25,"column_start":11,"column_end":25},"name":"DecompactPoint","qualname":"::point::DecompactPoint","value":"DecompactPoint<C: Curve>: Sized","parent":null,"children":[{"krate":0,"index":150}],"decl_id":null,"docs":" Decompact an elliptic curve point from an x-coordinate.","sig":null,"attributes":[{"value":"/ Decompact an elliptic curve point from an x-coordinate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16098,"byte_end":16157,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16158,"byte_end":16161,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Decompaction relies on properties of specially-generated keys but provides","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16162,"byte_end":16240,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ a more compact representation than standard point compression.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16241,"byte_end":16307,"line_start":24,"line_end":24,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16412,"byte_end":16421,"line_start":27,"line_end":27,"column_start":8,"column_end":17},"name":"decompact","qualname":"::point::DecompactPoint::decompact","value":"pub fn decompact(&FieldBytes<C>) -> CtOption<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Attempt to decompact an elliptic curve point\n","sig":null,"attributes":[{"value":"/ Attempt to decompact an elliptic curve point","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16356,"byte_end":16404,"line_start":26,"line_end":26,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":151},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16505,"byte_end":16521,"line_start":31,"line_end":31,"column_start":11,"column_end":27},"name":"PointCompression","qualname":"::point::PointCompression","value":"PointCompression","parent":null,"children":[{"krate":0,"index":152}],"decl_id":null,"docs":" Point compression settings.\n","sig":null,"attributes":[{"value":"/ Point compression settings.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16463,"byte_end":16494,"line_start":30,"line_end":30,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16590,"byte_end":16605,"line_start":33,"line_end":33,"column_start":11,"column_end":26},"name":"COMPRESS_POINTS","qualname":"::point::PointCompression::COMPRESS_POINTS","value":"bool","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" Should point compression be applied by default?\n","sig":null,"attributes":[{"value":"/ Should point compression be applied by default?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16528,"byte_end":16579,"line_start":32,"line_end":32,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":153},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16657,"byte_end":16672,"line_start":37,"line_end":37,"column_start":11,"column_end":26},"name":"PointCompaction","qualname":"::point::PointCompaction","value":"PointCompaction","parent":null,"children":[{"krate":0,"index":154}],"decl_id":null,"docs":" Point compaction settings.\n","sig":null,"attributes":[{"value":"/ Point compaction settings.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16616,"byte_end":16646,"line_start":36,"line_end":36,"column_start":1,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16740,"byte_end":16754,"line_start":39,"line_end":39,"column_start":11,"column_end":25},"name":"COMPACT_POINTS","qualname":"::point::PointCompaction::COMPACT_POINTS","value":"bool","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Should point compaction be applied by default?\n","sig":null,"attributes":[{"value":"/ Should point compaction be applied by default?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16679,"byte_end":16729,"line_start":38,"line_end":38,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1261},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19090,"byte_end":19100,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"ScalarCore","qualname":"::scalar::core::ScalarCore","value":"ScalarCore {  }","parent":null,"children":[{"krate":0,"index":1263}],"decl_id":null,"docs":" Generic scalar type with core functionality.","sig":null,"attributes":[{"value":"/ Generic scalar type with core functionality.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18350,"byte_end":18398,"line_start":31,"line_end":31,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18399,"byte_end":18402,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This type provides a baseline level of scalar arithmetic functionality","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18403,"byte_end":18477,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ which is always available for all curves, regardless of if they implement","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18478,"byte_end":18555,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ any arithmetic traits.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18556,"byte_end":18582,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18583,"byte_end":18586,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # `serde` support","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18587,"byte_end":18608,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18609,"byte_end":18612,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ When the optional `serde` feature of this create is enabled, [`Serialize`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18613,"byte_end":18691,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ and [`Deserialize`] impls are provided for this type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18692,"byte_end":18749,"line_start":40,"line_end":40,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18750,"byte_end":18753,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The serialization is a fixed-width big endian encoding. When used with","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18754,"byte_end":18828,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ textual formats, the binary data is encoded as hexadecimal.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":18829,"byte_end":18892,"line_start":43,"line_end":43,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":271},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19252,"byte_end":19256,"line_start":57,"line_end":57,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::scalar::core::ScalarCore::<C>::ZERO","value":"Self","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":" Zero scalar.\n","sig":null,"attributes":[{"value":"/ Zero scalar.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19221,"byte_end":19237,"line_start":56,"line_end":56,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":272},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19357,"byte_end":19360,"line_start":62,"line_end":62,"column_start":15,"column_end":18},"name":"ONE","qualname":"::scalar::core::ScalarCore::<C>::ONE","value":"Self","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":" Multiplicative identity.\n","sig":null,"attributes":[{"value":"/ Multiplicative identity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19314,"byte_end":19342,"line_start":61,"line_end":61,"column_start":5,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":273},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19451,"byte_end":19458,"line_start":67,"line_end":67,"column_start":15,"column_end":22},"name":"MODULUS","qualname":"::scalar::core::ScalarCore::<C>::MODULUS","value":"C::UInt","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":" Scalar modulus.\n","sig":null,"attributes":[{"value":"/ Scalar modulus.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19417,"byte_end":19436,"line_start":66,"line_end":66,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19534,"byte_end":19540,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"random","qualname":"<ScalarCore<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\nRngCore>(impl CryptoRng + RngCore) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate a random [`ScalarCore`].\n","sig":null,"attributes":[{"value":"/ Generate a random [`ScalarCore`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19485,"byte_end":19522,"line_start":69,"line_end":69,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19759,"byte_end":19762,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<ScalarCore<C>>::new","value":"pub fn new(C::UInt) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new scalar from [`Curve::UInt`].\n","sig":null,"attributes":[{"value":"/ Create a new scalar from [`Curve::UInt`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19702,"byte_end":19747,"line_start":76,"line_end":76,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19941,"byte_end":19954,"line_start":82,"line_end":82,"column_start":12,"column_end":25},"name":"from_be_bytes","qualname":"<ScalarCore<C>>::from_be_bytes","value":"pub fn from_be_bytes(FieldBytes<C>) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode [`ScalarCore`] from big endian bytes.\n","sig":null,"attributes":[{"value":"/ Decode [`ScalarCore`] from big endian bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19881,"byte_end":19929,"line_start":81,"line_end":81,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20129,"byte_end":20142,"line_start":87,"line_end":87,"column_start":12,"column_end":25},"name":"from_be_slice","qualname":"<ScalarCore<C>>::from_be_slice","value":"pub fn from_be_slice(&[u8]) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode [`ScalarCore`] from a big endian byte slice.\n","sig":null,"attributes":[{"value":"/ Decode [`ScalarCore`] from a big endian byte slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20062,"byte_end":20117,"line_start":86,"line_end":86,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20444,"byte_end":20457,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"from_le_bytes","qualname":"<ScalarCore<C>>::from_le_bytes","value":"pub fn from_le_bytes(FieldBytes<C>) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode [`ScalarCore`] from little endian bytes.\n","sig":null,"attributes":[{"value":"/ Decode [`ScalarCore`] from little endian bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20381,"byte_end":20432,"line_start":95,"line_end":95,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20635,"byte_end":20648,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"from_le_slice","qualname":"<ScalarCore<C>>::from_le_slice","value":"pub fn from_le_slice(&[u8]) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode [`ScalarCore`] from a little endian byte slice.\n","sig":null,"attributes":[{"value":"/ Decode [`ScalarCore`] from a little endian byte slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20565,"byte_end":20623,"line_start":100,"line_end":100,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20930,"byte_end":20937,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"as_uint","qualname":"<ScalarCore<C>>::as_uint","value":"pub fn as_uint(&Self) -> &C::UInt","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner `C::UInt`.\n","sig":null,"attributes":[{"value":"/ Borrow the inner `C::UInt`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20887,"byte_end":20918,"line_start":109,"line_end":109,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21040,"byte_end":21048,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"as_limbs","qualname":"<ScalarCore<C>>::as_limbs","value":"pub fn as_limbs(&Self) -> &[Limb]","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner limbs as a slice.\n","sig":null,"attributes":[{"value":"/ Borrow the inner limbs as a slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":20990,"byte_end":21028,"line_start":114,"line_end":114,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21167,"byte_end":21174,"line_start":120,"line_end":120,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<ScalarCore<C>>::is_zero","value":"pub fn is_zero(&Self) -> Choice","parent":null,"children":[],"decl_id":null,"docs":" Is this [`ScalarCore`] value equal to zero?\n","sig":null,"attributes":[{"value":"/ Is this [`ScalarCore`] value equal to zero?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21108,"byte_end":21155,"line_start":119,"line_end":119,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21284,"byte_end":21291,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"is_even","qualname":"<ScalarCore<C>>::is_even","value":"pub fn is_even(&Self) -> Choice","parent":null,"children":[],"decl_id":null,"docs":" Is this [`ScalarCore`] value even?\n","sig":null,"attributes":[{"value":"/ Is this [`ScalarCore`] value even?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21234,"byte_end":21272,"line_start":124,"line_end":124,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21400,"byte_end":21406,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"is_odd","qualname":"<ScalarCore<C>>::is_odd","value":"pub fn is_odd(&Self) -> Choice","parent":null,"children":[],"decl_id":null,"docs":" Is this [`ScalarCore`] value odd?\n","sig":null,"attributes":[{"value":"/ Is this [`ScalarCore`] value odd?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21351,"byte_end":21388,"line_start":129,"line_end":129,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21523,"byte_end":21534,"line_start":135,"line_end":135,"column_start":12,"column_end":23},"name":"to_be_bytes","qualname":"<ScalarCore<C>>::to_be_bytes","value":"pub fn to_be_bytes(Self) -> FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Encode [`ScalarCore`] as big endian bytes.\n","sig":null,"attributes":[{"value":"/ Encode [`ScalarCore`] as big endian bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21465,"byte_end":21511,"line_start":134,"line_end":134,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21670,"byte_end":21681,"line_start":140,"line_end":140,"column_start":12,"column_end":23},"name":"to_le_bytes","qualname":"<ScalarCore<C>>::to_le_bytes","value":"pub fn to_le_bytes(Self) -> FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Encode [`ScalarCore`] as little endian bytes.\n","sig":null,"attributes":[{"value":"/ Encode [`ScalarCore`] as little endian bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21609,"byte_end":21658,"line_start":139,"line_end":139,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1275},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29235,"byte_end":29248,"line_start":32,"line_end":32,"column_start":12,"column_end":25},"name":"NonZeroScalar","qualname":"::scalar::nonzero::NonZeroScalar","value":"NonZeroScalar {  }","parent":null,"children":[{"krate":0,"index":1277}],"decl_id":null,"docs":" Non-zero scalar type.","sig":null,"attributes":[{"value":"/ Non-zero scalar type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":28779,"byte_end":28804,"line_start":22,"line_end":22,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":28805,"byte_end":28808,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This type ensures that its value is not zero, ala `core::num::NonZero*`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":28809,"byte_end":28885,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ To do this, the generic `S` type must impl both `Default` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":28886,"byte_end":28951,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ `ConstantTimeEq`, with the requirement that `S::default()` returns 0.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":28952,"byte_end":29025,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29026,"byte_end":29029,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ In the context of ECC, it's useful for ensuring that scalar multiplication","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29030,"byte_end":29108,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ cannot result in the point at infinity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29109,"byte_end":29152,"line_start":29,"line_end":29,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29439,"byte_end":29445,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"random","qualname":"<NonZeroScalar<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\nRngCore>(impl CryptoRng + RngCore) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate a random `NonZeroScalar`.\n","sig":null,"attributes":[{"value":"/ Generate a random `NonZeroScalar`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29389,"byte_end":29427,"line_start":43,"line_end":43,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29931,"byte_end":29934,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<NonZeroScalar<C>>::new","value":"pub fn new(Scalar<C>) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a [`NonZeroScalar`] from a scalar.\n","sig":null,"attributes":[{"value":"/ Create a [`NonZeroScalar`] from a scalar.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29874,"byte_end":29919,"line_start":55,"line_end":55,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30129,"byte_end":30138,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"from_repr","qualname":"<NonZeroScalar<C>>::from_repr","value":"pub fn from_repr(FieldBytes<C>) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode a [`NonZeroScalar`] from a big endian-serialized field element.\n","sig":null,"attributes":[{"value":"/ Decode a [`NonZeroScalar`] from a big endian-serialized field element.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30043,"byte_end":30117,"line_start":60,"line_end":60,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30308,"byte_end":30317,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"from_uint","qualname":"<NonZeroScalar<C>>::from_uint","value":"pub fn from_uint(C::UInt) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a [`NonZeroScalar`] from a `C::UInt`.\n","sig":null,"attributes":[{"value":"/ Create a [`NonZeroScalar`] from a `C::UInt`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30248,"byte_end":30296,"line_start":65,"line_end":65,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":586},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17096,"byte_end":17102,"line_start":16,"line_end":16,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::scalar::Scalar","value":"<C as ScalarArithmetic>::Scalar","parent":null,"children":[],"decl_id":null,"docs":" Scalar field element for a particular elliptic curve.\n","sig":null,"attributes":[{"value":"/ Scalar field element for a particular elliptic curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":16944,"byte_end":17001,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17002,"byte_end":17032,"line_start":14,"line_end":14,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":588},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17555,"byte_end":17561,"line_start":29,"line_end":29,"column_start":11,"column_end":17},"name":"IsHigh","qualname":"::scalar::IsHigh","value":"IsHigh","parent":null,"children":[{"krate":0,"index":589}],"decl_id":null,"docs":" Is this scalar greater than n / 2?","sig":null,"attributes":[{"value":"/ Is this scalar greater than n / 2?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17368,"byte_end":17406,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17407,"byte_end":17410,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17411,"byte_end":17424,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17425,"byte_end":17428,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ - For scalars 0 through n / 2: `Choice::from(0)`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17429,"byte_end":17481,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/ - For scalars (n / 2) + 1 through n - 1: `Choice::from(1)`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17482,"byte_end":17544,"line_start":28,"line_end":28,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17626,"byte_end":17633,"line_start":31,"line_end":31,"column_start":8,"column_end":15},"name":"is_high","qualname":"::scalar::IsHigh::is_high","value":"pub fn is_high(&Self) -> Choice","parent":{"krate":0,"index":588},"children":[],"decl_id":null,"docs":" Is this scalar greater than or equal to n / 2?\n","sig":null,"attributes":[{"value":"/ Is this scalar greater than or equal to n / 2?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar.rs","byte_start":17568,"byte_end":17618,"line_start":30,"line_end":30,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1281},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39530,"byte_end":39539,"line_start":88,"line_end":88,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::secret_key::SecretKey","value":"SecretKey {  }","parent":null,"children":[{"krate":0,"index":1283}],"decl_id":null,"docs":" Elliptic curve secret keys.","sig":null,"attributes":[{"value":"/ Elliptic curve secret keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38574,"byte_end":38605,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38606,"byte_end":38609,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This type wraps a secret scalar value, helping to prevent accidental","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38610,"byte_end":38682,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/ exposure and securely erasing the value from memory when dropped.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38683,"byte_end":38752,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38753,"byte_end":38756,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Parsing PKCS#8 Keys","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38757,"byte_end":38782,"line_start":67,"line_end":67,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38783,"byte_end":38786,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ PKCS#8 is a commonly used format for encoding secret keys (especially ones","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38787,"byte_end":38865,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ generated by OpenSSL).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38866,"byte_end":38892,"line_start":70,"line_end":70,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38893,"byte_end":38896,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Keys in PKCS#8 format are either binary (ASN.1 BER/DER), or PEM encoded","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38897,"byte_end":38972,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/ (ASCII) and begin with the following:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":38973,"byte_end":39014,"line_start":73,"line_end":73,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39015,"byte_end":39018,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39019,"byte_end":39030,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/ -----BEGIN PRIVATE KEY-----","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39031,"byte_end":39062,"line_start":76,"line_end":76,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39063,"byte_end":39070,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39071,"byte_end":39074,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ To decode an elliptic curve private key from PKCS#8, enable the `pkcs8`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39075,"byte_end":39150,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ feature of this crate (or the `pkcs8` feature of a specific RustCrypto","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39151,"byte_end":39225,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"/ elliptic curve crate) and use the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39226,"byte_end":39263,"line_start":81,"line_end":81,"column_start":1,"column_end":38}},{"value":"/ [`elliptic_curve::pkcs8::DecodePrivateKey`][`DecodePrivateKey`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39264,"byte_end":39331,"line_start":82,"line_end":82,"column_start":1,"column_end":68}},{"value":"/ trait to parse it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39332,"byte_end":39354,"line_start":83,"line_end":83,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39355,"byte_end":39358,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ When the `pem` feature of this crate (or a specific RustCrypto elliptic","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39359,"byte_end":39434,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"/ curve crate) is enabled, a [`FromStr`] impl is also available.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39435,"byte_end":39501,"line_start":86,"line_end":86,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39790,"byte_end":39796,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"random","qualname":"<SecretKey<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\nRngCore>(impl CryptoRng + RngCore) -> Self where C: ProjectiveArithmetic","parent":null,"children":[],"decl_id":null,"docs":" Generate a random [`SecretKey`].\n","sig":null,"attributes":[{"value":"/ Generate a random [`SecretKey`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39649,"byte_end":39685,"line_start":97,"line_end":97,"column_start":5,"column_end":41}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39690,"byte_end":39720,"line_start":98,"line_end":98,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40040,"byte_end":40043,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<SecretKey<C>>::new","value":"pub fn new(ScalarCore<C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new secret key from a scalar value.\n","sig":null,"attributes":[{"value":"/ Create a new secret key from a scalar value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39980,"byte_end":40028,"line_start":109,"line_end":109,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40316,"byte_end":40330,"line_start":121,"line_end":121,"column_start":12,"column_end":26},"name":"as_scalar_core","qualname":"<SecretKey<C>>::as_scalar_core","value":"pub fn as_scalar_core(&Self) -> &ScalarCore<C>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner secret [`ScalarCore`] value.","sig":null,"attributes":[{"value":"/ Borrow the inner secret [`ScalarCore`] value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40119,"byte_end":40168,"line_start":114,"line_end":114,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40173,"byte_end":40176,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # ⚠️ Warning","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40181,"byte_end":40201,"line_start":116,"line_end":116,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40206,"byte_end":40209,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This value is key material.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40214,"byte_end":40245,"line_start":118,"line_end":118,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40250,"byte_end":40253,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Please treat it with the care it deserves!","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40258,"byte_end":40304,"line_start":120,"line_end":120,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40686,"byte_end":40703,"line_start":134,"line_end":134,"column_start":12,"column_end":29},"name":"to_nonzero_scalar","qualname":"<SecretKey<C>>::to_nonzero_scalar","value":"pub fn to_nonzero_scalar(&Self) -> NonZeroScalar<C> where C: Curve +\nProjectiveArithmetic","parent":null,"children":[],"decl_id":null,"docs":" Get the secret [`NonZeroScalar`] value for this key.","sig":null,"attributes":[{"value":"/ Get the secret [`NonZeroScalar`] value for this key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40389,"byte_end":40445,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40450,"byte_end":40453,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # ⚠️ Warning","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40458,"byte_end":40478,"line_start":127,"line_end":127,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40483,"byte_end":40486,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This value is key material.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40491,"byte_end":40522,"line_start":129,"line_end":129,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40527,"byte_end":40530,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ Please treat it with the care it deserves!","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40535,"byte_end":40581,"line_start":131,"line_end":131,"column_start":5,"column_end":51}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40586,"byte_end":40616,"line_start":132,"line_end":132,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40986,"byte_end":40996,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"public_key","qualname":"<SecretKey<C>>::public_key","value":"pub fn public_key(&Self) -> PublicKey<C> where C: Curve + ProjectiveArithmetic","parent":null,"children":[],"decl_id":null,"docs":" Get the [`PublicKey`] which corresponds to this secret key\n","sig":null,"attributes":[{"value":"/ Get the [`PublicKey`] which corresponds to this secret key","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40819,"byte_end":40881,"line_start":141,"line_end":141,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":40886,"byte_end":40916,"line_start":142,"line_end":142,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":41223,"byte_end":41236,"line_start":152,"line_end":152,"column_start":12,"column_end":25},"name":"from_be_bytes","qualname":"<SecretKey<C>>::from_be_bytes","value":"pub fn from_be_bytes(&[u8]) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize raw secret scalar as a big endian integer.\n","sig":null,"attributes":[{"value":"/ Deserialize raw secret scalar as a big endian integer.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":41153,"byte_end":41211,"line_start":151,"line_end":151,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":41704,"byte_end":41715,"line_start":170,"line_end":170,"column_start":12,"column_end":23},"name":"to_be_bytes","qualname":"<SecretKey<C>>::to_be_bytes","value":"pub fn to_be_bytes(&Self) -> FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Serialize raw secret scalar as a big endian integer.\n","sig":null,"attributes":[{"value":"/ Serialize raw secret scalar as a big endian integer.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":41636,"byte_end":41692,"line_start":169,"line_end":169,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":41963,"byte_end":41976,"line_start":177,"line_end":177,"column_start":12,"column_end":25},"name":"from_sec1_der","qualname":"<SecretKey<C>>::from_sec1_der","value":"pub fn from_sec1_der(&[u8]) -> Result<Self> where C: Curve +\nValidatePublicKey, FieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Deserialize secret key encoded in the SEC1 ASN.1 DER `ECPrivateKey` format.\n","sig":null,"attributes":[{"value":"/ Deserialize secret key encoded in the SEC1 ASN.1 DER `ECPrivateKey` format.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":41786,"byte_end":41865,"line_start":174,"line_end":174,"column_start":5,"column_end":84}},{"value":"cfg(all(feature = \"sec1\"))","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":41870,"byte_end":41899,"line_start":175,"line_end":175,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":42496,"byte_end":42507,"line_start":193,"line_end":193,"column_start":12,"column_end":23},"name":"to_sec1_der","qualname":"<SecretKey<C>>::to_sec1_der","value":"pub fn to_sec1_der(&Self) -> der::Result<Zeroizing<Vec<u8>>> where C: Curve +\nProjectiveArithmetic, AffinePoint<C>: FromEncodedPoint<C> + ToEncodedPoint<C>,\nFieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Serialize secret key in the SEC1 ASN.1 DER `ECPrivateKey` format.\n","sig":null,"attributes":[{"value":"/ Serialize secret key in the SEC1 ASN.1 DER `ECPrivateKey` format.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":42216,"byte_end":42285,"line_start":187,"line_end":187,"column_start":5,"column_end":74}},{"value":"cfg(all(feature = \"alloc\", feature = \"arithmetic\", feature = \"sec1\"))","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":42290,"byte_end":42362,"line_start":188,"line_end":188,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":44888,"byte_end":44896,"line_start":263,"line_end":263,"column_start":12,"column_end":20},"name":"from_jwk","qualname":"<SecretKey<C>>::from_jwk","value":"pub fn from_jwk(&JwkEcKey) -> Result<Self> where C: JwkParameters +\nValidatePublicKey, FieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Parse a [`JwkEcKey`] JSON Web Key (JWK) into a [`SecretKey`].\n","sig":null,"attributes":[{"value":"/ Parse a [`JwkEcKey`] JSON Web Key (JWK) into a [`SecretKey`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":44732,"byte_end":44797,"line_start":260,"line_end":260,"column_start":5,"column_end":70}},{"value":"cfg(feature = \"jwk\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":44802,"byte_end":44825,"line_start":261,"line_end":261,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":45228,"byte_end":45240,"line_start":274,"line_end":274,"column_start":12,"column_end":24},"name":"from_jwk_str","qualname":"<SecretKey<C>>::from_jwk_str","value":"pub fn from_jwk_str(&str) -> Result<Self> where C: JwkParameters +\nValidatePublicKey, FieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Parse a string containing a JSON Web Key (JWK) into a [`SecretKey`].\n","sig":null,"attributes":[{"value":"/ Parse a string containing a JSON Web Key (JWK) into a [`SecretKey`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":45065,"byte_end":45137,"line_start":271,"line_end":271,"column_start":5,"column_end":77}},{"value":"cfg(feature = \"jwk\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":45142,"byte_end":45165,"line_start":272,"line_end":272,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":45688,"byte_end":45694,"line_start":286,"line_end":286,"column_start":12,"column_end":18},"name":"to_jwk","qualname":"<SecretKey<C>>::to_jwk","value":"pub fn to_jwk(&Self) -> JwkEcKey where C: Curve + JwkParameters +\nProjectiveArithmetic, AffinePoint<C>: FromEncodedPoint<C> + ToEncodedPoint<C>,\nFieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Serialize this secret key as [`JwkEcKey`] JSON Web Key (JWK).\n","sig":null,"attributes":[{"value":"/ Serialize this secret key as [`JwkEcKey`] JSON Web Key (JWK).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":45445,"byte_end":45510,"line_start":282,"line_end":282,"column_start":5,"column_end":70}},{"value":"cfg(all(feature = \"arithmetic\", feature = \"jwk\"))","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":45515,"byte_end":45567,"line_start":283,"line_end":283,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46155,"byte_end":46168,"line_start":299,"line_end":299,"column_start":12,"column_end":25},"name":"to_jwk_string","qualname":"<SecretKey<C>>::to_jwk_string","value":"pub fn to_jwk_string(&Self) -> Zeroizing<String> where C: Curve +\nJwkParameters + ProjectiveArithmetic, AffinePoint<C>: FromEncodedPoint<C> +\nToEncodedPoint<C>, FieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Serialize this secret key as JSON Web Key (JWK) string.\n","sig":null,"attributes":[{"value":"/ Serialize this secret key as JSON Web Key (JWK) string.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":45918,"byte_end":45977,"line_start":295,"line_end":295,"column_start":5,"column_end":64}},{"value":"cfg(all(feature = \"arithmetic\", feature = \"jwk\"))","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":45982,"byte_end":46034,"line_start":296,"line_end":296,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":775},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49015,"byte_end":49031,"line_start":12,"line_end":12,"column_start":11,"column_end":27},"name":"AffineArithmetic","qualname":"::arithmetic::AffineArithmetic","value":"AffineArithmetic: Curve + ScalarArithmetic","parent":null,"children":[{"krate":0,"index":776}],"decl_id":null,"docs":" Elliptic curve with affine arithmetic implementation.\n","sig":null,"attributes":[{"value":"/ Elliptic curve with affine arithmetic implementation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":48893,"byte_end":48950,"line_start":10,"line_end":10,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":776},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49121,"byte_end":49132,"line_start":14,"line_end":14,"column_start":10,"column_end":21},"name":"AffinePoint","qualname":"::arithmetic::AffineArithmetic::AffinePoint","value":"type AffinePoint: 'static\n        + AffineXCoordinate<Self>\n        + Copy\n        + Clone\n        + ConditionallySelectable\n        + ConstantTimeEq\n        + Debug\n        + Default\n        + DefaultIsZeroes\n        + Eq\n        + PartialEq\n        + Sized\n        + Send\n        + Sync;","parent":{"krate":0,"index":775},"children":[],"decl_id":null,"docs":" Elliptic curve point in affine coordinates.\n","sig":null,"attributes":[{"value":"/ Elliptic curve point in affine coordinates.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49064,"byte_end":49111,"line_start":13,"line_end":13,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":777},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49547,"byte_end":49567,"line_start":32,"line_end":32,"column_start":11,"column_end":31},"name":"PrimeCurveArithmetic","qualname":"::arithmetic::PrimeCurveArithmetic","value":"PrimeCurveArithmetic: PrimeCurve + ProjectiveArithmetic<ProjectivePoint = Self::CurveGroup>","parent":null,"children":[{"krate":0,"index":778}],"decl_id":null,"docs":" Prime order elliptic curve with projective arithmetic implementation.\n","sig":null,"attributes":[{"value":"/ Prime order elliptic curve with projective arithmetic implementation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49409,"byte_end":49482,"line_start":30,"line_end":30,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":778},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49696,"byte_end":49706,"line_start":36,"line_end":36,"column_start":10,"column_end":20},"name":"CurveGroup","qualname":"::arithmetic::PrimeCurveArithmetic::CurveGroup","value":"type CurveGroup: group::prime::PrimeCurve<Affine = <Self as AffineArithmetic>::AffinePoint>;","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" Prime order elliptic curve group.\n","sig":null,"attributes":[{"value":"/ Prime order elliptic curve group.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49649,"byte_end":49686,"line_start":35,"line_end":35,"column_start":5,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":779},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49913,"byte_end":49933,"line_start":41,"line_end":41,"column_start":11,"column_end":31},"name":"ProjectiveArithmetic","qualname":"::arithmetic::ProjectiveArithmetic","value":"ProjectiveArithmetic: Curve + AffineArithmetic","parent":null,"children":[{"krate":0,"index":780}],"decl_id":null,"docs":" Elliptic curve with projective arithmetic implementation.\n","sig":null,"attributes":[{"value":"/ Elliptic curve with projective arithmetic implementation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49787,"byte_end":49848,"line_start":39,"line_end":39,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":780},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50258,"byte_end":50273,"line_start":53,"line_end":53,"column_start":10,"column_end":25},"name":"ProjectivePoint","qualname":"::arithmetic::ProjectiveArithmetic::ProjectivePoint","value":"type ProjectivePoint: ConditionallySelectable\n        + ConstantTimeEq\n        + Default\n        + DefaultIsZeroes\n        + From<Self::AffinePoint>\n        + Into<Self::AffinePoint>\n        + LinearCombination\n        + group::Curve<AffineRepr = Self::AffinePoint>\n        + group::Group<Scalar = Self::Scalar>;","parent":{"krate":0,"index":779},"children":[],"decl_id":null,"docs":" Elliptic curve point in projective coordinates.","sig":null,"attributes":[{"value":"/ Elliptic curve point in projective coordinates.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49966,"byte_end":50017,"line_start":42,"line_end":42,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50022,"byte_end":50025,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Note: the following bounds are provided by [`group::Group`]:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50030,"byte_end":50094,"line_start":44,"line_end":44,"column_start":5,"column_end":69}},{"value":"/ - `'static`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50099,"byte_end":50114,"line_start":45,"line_end":45,"column_start":5,"column_end":20}},{"value":"/ - [`Copy`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50119,"byte_end":50133,"line_start":46,"line_end":46,"column_start":5,"column_end":19}},{"value":"/ - [`Clone`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50138,"byte_end":50153,"line_start":47,"line_end":47,"column_start":5,"column_end":20}},{"value":"/ - [`Debug`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50158,"byte_end":50173,"line_start":48,"line_end":48,"column_start":5,"column_end":20}},{"value":"/ - [`Eq`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50178,"byte_end":50190,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/ - [`Sized`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50195,"byte_end":50210,"line_start":50,"line_end":50,"column_start":5,"column_end":20}},{"value":"/ - [`Send`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50215,"byte_end":50229,"line_start":51,"line_end":51,"column_start":5,"column_end":19}},{"value":"/ - [`Sync`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50234,"byte_end":50248,"line_start":52,"line_end":52,"column_start":5,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":781},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50687,"byte_end":50703,"line_start":67,"line_end":67,"column_start":11,"column_end":27},"name":"ScalarArithmetic","qualname":"::arithmetic::ScalarArithmetic","value":"ScalarArithmetic: Curve","parent":null,"children":[{"krate":0,"index":782}],"decl_id":null,"docs":" Scalar arithmetic.\n","sig":null,"attributes":[{"value":"/ Scalar arithmetic.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50569,"byte_end":50591,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50592,"byte_end":50622,"line_start":65,"line_end":65,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":782},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":51029,"byte_end":51035,"line_start":80,"line_end":80,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::arithmetic::ScalarArithmetic::Scalar","value":"type Scalar: DefaultIsZeroes\n        + From<ScalarCore<Self>>\n        + Into<FieldBytes<Self>>\n        + Into<Self::UInt>\n        + IsHigh\n        + ff::Field\n        + ff::PrimeField<Repr = FieldBytes<Self>>;","parent":{"krate":0,"index":781},"children":[],"decl_id":null,"docs":" Scalar field type.","sig":null,"attributes":[{"value":"/ Scalar field type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50717,"byte_end":50739,"line_start":68,"line_end":68,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50744,"byte_end":50747,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Note: the following bounds are provided by [`ff::Field`]:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50752,"byte_end":50813,"line_start":70,"line_end":70,"column_start":5,"column_end":66}},{"value":"/ - `'static`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50818,"byte_end":50833,"line_start":71,"line_end":71,"column_start":5,"column_end":20}},{"value":"/ - [`Copy`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50838,"byte_end":50852,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/ - [`Clone`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50857,"byte_end":50872,"line_start":73,"line_end":73,"column_start":5,"column_end":20}},{"value":"/ - [`ConditionallySelectable`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50877,"byte_end":50910,"line_start":74,"line_end":74,"column_start":5,"column_end":38}},{"value":"/ - [`ConstantTimeEq`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50915,"byte_end":50939,"line_start":75,"line_end":75,"column_start":5,"column_end":29}},{"value":"/ - [`Debug`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50944,"byte_end":50959,"line_start":76,"line_end":76,"column_start":5,"column_end":20}},{"value":"/ - [`Default`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50964,"byte_end":50981,"line_start":77,"line_end":77,"column_start":5,"column_end":22}},{"value":"/ - [`Send`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50986,"byte_end":51000,"line_start":78,"line_end":78,"column_start":5,"column_end":19}},{"value":"/ - [`Sync`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":51005,"byte_end":51019,"line_start":79,"line_end":79,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1287},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53690,"byte_end":53699,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::public_key::PublicKey","value":"PublicKey {  }","parent":null,"children":[{"krate":0,"index":1289}],"decl_id":null,"docs":" Elliptic curve public keys.","sig":null,"attributes":[{"value":"/ Elliptic curve public keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52182,"byte_end":52213,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52214,"byte_end":52217,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ This is a wrapper type for [`AffinePoint`] which ensures an inner","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52218,"byte_end":52287,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ non-identity point and provides a common place to handle encoding/decoding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52288,"byte_end":52367,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52368,"byte_end":52371,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Parsing \"SPKI\" Keys","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52372,"byte_end":52397,"line_start":43,"line_end":43,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52398,"byte_end":52401,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ X.509 `SubjectPublicKeyInfo` (SPKI) is a commonly used format for encoding","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52402,"byte_end":52480,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ public keys, notably public keys corresponding to PKCS#8 private keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52481,"byte_end":52555,"line_start":46,"line_end":46,"column_start":1,"column_end":75}},{"value":"/ (especially ones generated by OpenSSL).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52556,"byte_end":52599,"line_start":47,"line_end":47,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52600,"byte_end":52603,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Keys in SPKI format are either binary (ASN.1 BER/DER), or PEM encoded","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52604,"byte_end":52677,"line_start":49,"line_end":49,"column_start":1,"column_end":74}},{"value":"/ (ASCII) and begin with the following:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52678,"byte_end":52719,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52720,"byte_end":52723,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52724,"byte_end":52735,"line_start":52,"line_end":52,"column_start":1,"column_end":12}},{"value":"/ -----BEGIN PUBLIC KEY-----","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52736,"byte_end":52766,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52767,"byte_end":52774,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52775,"byte_end":52778,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ To decode an elliptic curve public key from SPKI, enable the `pkcs8`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52779,"byte_end":52851,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/ feature of this crate (or the `pkcs8` feature of a specific RustCrypto","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52852,"byte_end":52926,"line_start":57,"line_end":57,"column_start":1,"column_end":75}},{"value":"/ elliptic curve crate) and use the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52927,"byte_end":52964,"line_start":58,"line_end":58,"column_start":1,"column_end":38}},{"value":"/ [`elliptic_curve::pkcs8::DecodePublicKey`][`pkcs8::DecodePublicKey`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":52965,"byte_end":53037,"line_start":59,"line_end":59,"column_start":1,"column_end":73}},{"value":"/ trait to parse it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53038,"byte_end":53060,"line_start":60,"line_end":60,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53061,"byte_end":53064,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ When the `pem` feature of this crate (or a specific RustCrypto elliptic","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53065,"byte_end":53140,"line_start":62,"line_end":62,"column_start":1,"column_end":76}},{"value":"/ curve crate) is enabled, a [`FromStr`] impl is also available.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53141,"byte_end":53207,"line_start":63,"line_end":63,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53208,"byte_end":53211,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # `serde` support","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53212,"byte_end":53233,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53234,"byte_end":53237,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ When the optional `serde` feature of this create is enabled, [`Serialize`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53238,"byte_end":53316,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ and [`Deserialize`] impls are provided for this type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53317,"byte_end":53374,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53375,"byte_end":53378,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The serialization is binary-oriented and supports ASN.1 DER","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53379,"byte_end":53442,"line_start":70,"line_end":70,"column_start":1,"column_end":64}},{"value":"/ Subject Public Key Info (SPKI) as the encoding format.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53443,"byte_end":53501,"line_start":71,"line_end":71,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53502,"byte_end":53505,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ For a more text-friendly encoding of public keys, use [`JwkEcKey`] instead.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53506,"byte_end":53585,"line_start":73,"line_end":73,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53911,"byte_end":53922,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"name":"from_affine","qualname":"<PublicKey<C>>::from_affine","value":"pub fn from_affine(AffinePoint<C>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Convert an [`AffinePoint`] into a [`PublicKey`]\n","sig":null,"attributes":[{"value":"/ Convert an [`AffinePoint`] into a [`PublicKey`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53848,"byte_end":53899,"line_start":87,"line_end":87,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54263,"byte_end":54281,"line_start":98,"line_end":98,"column_start":12,"column_end":30},"name":"from_secret_scalar","qualname":"<PublicKey<C>>::from_secret_scalar","value":"pub fn from_secret_scalar(&NonZeroScalar<C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute a [`PublicKey`] from a secret [`NonZeroScalar`] value\n (i.e. a secret key represented as a raw scalar value)\n","sig":null,"attributes":[{"value":"/ Compute a [`PublicKey`] from a secret [`NonZeroScalar`] value","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54124,"byte_end":54189,"line_start":96,"line_end":96,"column_start":5,"column_end":70}},{"value":"/ (i.e. a secret key represented as a raw scalar value)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54194,"byte_end":54251,"line_start":97,"line_end":97,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54826,"byte_end":54841,"line_start":112,"line_end":112,"column_start":12,"column_end":27},"name":"from_sec1_bytes","qualname":"<PublicKey<C>>::from_sec1_bytes","value":"pub fn from_sec1_bytes(&[u8]) -> Result<Self> where C: Curve,\nFieldSize<C>: ModulusSize, AffinePoint<C>: FromEncodedPoint<C> +\nToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Decode [`PublicKey`] (compressed or uncompressed) from the\n `Elliptic-Curve-Point-to-Octet-String` encoding described in\n SEC 1: Elliptic Curve Cryptography (Version 2.0) section\n 2.3.3 (page 10).","sig":null,"attributes":[{"value":"/ Decode [`PublicKey`] (compressed or uncompressed) from the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54514,"byte_end":54576,"line_start":105,"line_end":105,"column_start":5,"column_end":67}},{"value":"/ `Elliptic-Curve-Point-to-Octet-String` encoding described in","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54581,"byte_end":54645,"line_start":106,"line_end":106,"column_start":5,"column_end":69}},{"value":"/ SEC 1: Elliptic Curve Cryptography (Version 2.0) section","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54650,"byte_end":54710,"line_start":107,"line_end":107,"column_start":5,"column_end":65}},{"value":"/ 2.3.3 (page 10).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54715,"byte_end":54735,"line_start":108,"line_end":108,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54740,"byte_end":54743,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ <http://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54748,"byte_end":54785,"line_start":110,"line_end":110,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"sec1\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":54790,"byte_end":54814,"line_start":111,"line_end":111,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55299,"byte_end":55308,"line_start":125,"line_end":125,"column_start":12,"column_end":21},"name":"as_affine","qualname":"<PublicKey<C>>::as_affine","value":"pub fn as_affine(&Self) -> &AffinePoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner [`AffinePoint`] from this [`PublicKey`].","sig":null,"attributes":[{"value":"/ Borrow the inner [`AffinePoint`] from this [`PublicKey`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55163,"byte_end":55224,"line_start":122,"line_end":122,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55229,"byte_end":55232,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ In ECC, public keys are elliptic curve points.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55237,"byte_end":55287,"line_start":124,"line_end":124,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55455,"byte_end":55468,"line_start":130,"line_end":130,"column_start":12,"column_end":25},"name":"to_projective","qualname":"<PublicKey<C>>::to_projective","value":"pub fn to_projective(&Self) -> ProjectivePoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Convert this [`PublicKey`] to a [`ProjectivePoint`] for the given curve\n","sig":null,"attributes":[{"value":"/ Convert this [`PublicKey`] to a [`ProjectivePoint`] for the given curve","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55368,"byte_end":55443,"line_start":129,"line_end":129,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55693,"byte_end":55701,"line_start":137,"line_end":137,"column_start":12,"column_end":20},"name":"from_jwk","qualname":"<PublicKey<C>>::from_jwk","value":"pub fn from_jwk(&JwkEcKey) -> Result<Self> where C: Curve + JwkParameters,\nAffinePoint<C>: FromEncodedPoint<C> + ToEncodedPoint<C>,\nFieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Parse a [`JwkEcKey`] JSON Web Key (JWK) into a [`PublicKey`].\n","sig":null,"attributes":[{"value":"/ Parse a [`JwkEcKey`] JSON Web Key (JWK) into a [`PublicKey`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55537,"byte_end":55602,"line_start":134,"line_end":134,"column_start":5,"column_end":70}},{"value":"cfg(feature = \"jwk\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55607,"byte_end":55630,"line_start":135,"line_end":135,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":56091,"byte_end":56103,"line_start":149,"line_end":149,"column_start":12,"column_end":24},"name":"from_jwk_str","qualname":"<PublicKey<C>>::from_jwk_str","value":"pub fn from_jwk_str(&str) -> Result<Self> where C: Curve + JwkParameters,\nAffinePoint<C>: FromEncodedPoint<C> + ToEncodedPoint<C>,\nFieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Parse a string containing a JSON Web Key (JWK) into a [`PublicKey`].\n","sig":null,"attributes":[{"value":"/ Parse a string containing a JSON Web Key (JWK) into a [`PublicKey`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":55928,"byte_end":56000,"line_start":146,"line_end":146,"column_start":5,"column_end":77}},{"value":"cfg(feature = \"jwk\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":56005,"byte_end":56028,"line_start":147,"line_end":147,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":56517,"byte_end":56523,"line_start":161,"line_end":161,"column_start":12,"column_end":18},"name":"to_jwk","qualname":"<PublicKey<C>>::to_jwk","value":"pub fn to_jwk(&Self) -> JwkEcKey where C: Curve + JwkParameters,\nAffinePoint<C>: FromEncodedPoint<C> + ToEncodedPoint<C>,\nFieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Serialize this public key as [`JwkEcKey`] JSON Web Key (JWK).\n","sig":null,"attributes":[{"value":"/ Serialize this public key as [`JwkEcKey`] JSON Web Key (JWK).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":56361,"byte_end":56426,"line_start":158,"line_end":158,"column_start":5,"column_end":70}},{"value":"cfg(feature = \"jwk\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":56431,"byte_end":56454,"line_start":159,"line_end":159,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":56874,"byte_end":56887,"line_start":173,"line_end":173,"column_start":12,"column_end":25},"name":"to_jwk_string","qualname":"<PublicKey<C>>::to_jwk_string","value":"pub fn to_jwk_string(&Self) -> String where C: Curve + JwkParameters,\nAffinePoint<C>: FromEncodedPoint<C> + ToEncodedPoint<C>,\nFieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Serialize this public key as JSON Web Key (JWK) string.\n","sig":null,"attributes":[{"value":"/ Serialize this public key as JSON Web Key (JWK) string.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":56724,"byte_end":56783,"line_start":170,"line_end":170,"column_start":5,"column_end":64}},{"value":"cfg(feature = \"jwk\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":56788,"byte_end":56811,"line_start":171,"line_end":171,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":1003},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65339,"byte_end":65352,"line_start":46,"line_end":46,"column_start":11,"column_end":24},"name":"JwkParameters","qualname":"::jwk::JwkParameters","value":"JwkParameters: Curve","parent":null,"children":[{"krate":0,"index":1004}],"decl_id":null,"docs":" Elliptic curve parameters used by JSON Web Keys.\n","sig":null,"attributes":[{"value":"/ Elliptic curve parameters used by JSON Web Keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65229,"byte_end":65281,"line_start":44,"line_end":44,"column_start":1,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":1004},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65749,"byte_end":65752,"line_start":54,"line_end":54,"column_start":11,"column_end":14},"name":"CRV","qualname":"::jwk::JwkParameters::CRV","value":"&'static str","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The `crv` parameter which identifies a particular elliptic curve\n as defined in RFC 7518 Section 6.2.1.1:\n <https://tools.ietf.org/html/rfc7518#section-6.2.1.1>","sig":null,"attributes":[{"value":"/ The `crv` parameter which identifies a particular elliptic curve","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65366,"byte_end":65434,"line_start":47,"line_end":47,"column_start":5,"column_end":73}},{"value":"/ as defined in RFC 7518 Section 6.2.1.1:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65439,"byte_end":65482,"line_start":48,"line_end":48,"column_start":5,"column_end":48}},{"value":"/ <https://tools.ietf.org/html/rfc7518#section-6.2.1.1>","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65487,"byte_end":65544,"line_start":49,"line_end":49,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65549,"byte_end":65552,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Curve values are registered in the IANA \"JSON Web Key Elliptic Curve\"","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65557,"byte_end":65630,"line_start":51,"line_end":51,"column_start":5,"column_end":78}},{"value":"/ registry defined in RFC 7518 Section 7.6:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65635,"byte_end":65680,"line_start":52,"line_end":52,"column_start":5,"column_end":50}},{"value":"/ <https://tools.ietf.org/html/rfc7518#section-7.6>","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65685,"byte_end":65738,"line_start":53,"line_end":53,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1307},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":66273,"byte_end":66281,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"JwkEcKey","qualname":"::jwk::JwkEcKey","value":"JwkEcKey {  }","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311}],"decl_id":null,"docs":" JSON Web Key (JWK) with a `kty` of `\"EC\"` (elliptic curve).","sig":null,"attributes":[{"value":"/ JSON Web Key (JWK) with a `kty` of `\"EC\"` (elliptic curve).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65771,"byte_end":65834,"line_start":57,"line_end":57,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65835,"byte_end":65838,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Specified in [RFC 7518 Section 6: Cryptographic Algorithms for Keys][1].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65839,"byte_end":65915,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65916,"byte_end":65919,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This type can represent either a public/private keypair, or just a","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65920,"byte_end":65990,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/ public key, depending on whether or not the `d` parameter is present.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65991,"byte_end":66064,"line_start":62,"line_end":62,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":66065,"byte_end":66068,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [1]: https://tools.ietf.org/html/rfc7518#section-6","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":66069,"byte_end":66123,"line_start":64,"line_end":64,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67437,"byte_end":67440,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"crv","qualname":"<JwkEcKey>::crv","value":"pub fn crv(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the `crv` parameter for this JWK.\n","sig":null,"attributes":[{"value":"/ Get the `crv` parameter for this JWK.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67384,"byte_end":67425,"line_start":96,"line_end":96,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67553,"byte_end":67563,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"is_keypair","qualname":"<JwkEcKey>::is_keypair","value":"pub fn is_keypair(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this JWK a keypair that includes a private key?\n","sig":null,"attributes":[{"value":"/ Is this JWK a keypair that includes a private key?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67487,"byte_end":67541,"line_start":101,"line_end":101,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67673,"byte_end":67686,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"name":"is_public_key","qualname":"<JwkEcKey>::is_public_key","value":"pub fn is_public_key(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this JWK contain only a public key?\n","sig":null,"attributes":[{"value":"/ Does this JWK contain only a public key?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67617,"byte_end":67661,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67883,"byte_end":67896,"line_start":114,"line_end":114,"column_start":12,"column_end":25},"name":"to_public_key","qualname":"<JwkEcKey>::to_public_key","value":"pub fn to_public_key<C>(&Self) -> Result<PublicKey<C>> where C: Curve +\nJwkParameters + ProjectiveArithmetic, AffinePoint<C>: FromEncodedPoint<C> +\nToEncodedPoint<C>, FieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Decode a JWK into a [`PublicKey`].\n","sig":null,"attributes":[{"value":"/ Decode a JWK into a [`PublicKey`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67740,"byte_end":67778,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67783,"byte_end":67813,"line_start":112,"line_end":112,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":68250,"byte_end":68268,"line_start":124,"line_end":124,"column_start":12,"column_end":30},"name":"from_encoded_point","qualname":"<JwkEcKey>::from_encoded_point","value":"pub fn from_encoded_point<C>(&EncodedPoint<C>) -> Option<Self> where\nC: Curve + JwkParameters, FieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Create a JWK from a SEC1 [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Create a JWK from a SEC1 [`EncodedPoint`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":68192,"byte_end":68238,"line_start":123,"line_end":123,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":68805,"byte_end":68821,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"to_encoded_point","qualname":"<JwkEcKey>::to_encoded_point","value":"pub fn to_encoded_point<C>(&Self) -> Result<EncodedPoint<C>> where C: Curve +\nJwkParameters, FieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Get the public key component of this JWK as a SEC1 [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Get the public key component of this JWK as a SEC1 [`EncodedPoint`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":68721,"byte_end":68793,"line_start":140,"line_end":140,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69346,"byte_end":69359,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"name":"to_secret_key","qualname":"<JwkEcKey>::to_secret_key","value":"pub fn to_secret_key<C>(&Self) -> Result<SecretKey<C>> where C: Curve +\nJwkParameters + ValidatePublicKey, FieldSize<C>: ModulusSize","parent":null,"children":[],"decl_id":null,"docs":" Decode a JWK into a [`SecretKey`].\n","sig":null,"attributes":[{"value":"/ Decode a JWK into a [`SecretKey`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69203,"byte_end":69241,"line_start":155,"line_end":155,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69246,"byte_end":69276,"line_start":156,"line_end":156,"column_start":5,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":1236},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4925,"byte_end":4930,"line_start":163,"line_end":163,"column_start":11,"column_end":16},"name":"Curve","qualname":"::Curve","value":"Curve: 'static + Copy + Clone + Debug + Default + Eq + Ord + Send + Sync","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1238}],"decl_id":null,"docs":" Elliptic curve.","sig":null,"attributes":[{"value":"/ Elliptic curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4599,"byte_end":4618,"line_start":155,"line_end":155,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4619,"byte_end":4622,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ This trait is intended to be impl'd by a ZST which represents a concrete","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4623,"byte_end":4699,"line_start":157,"line_end":157,"column_start":1,"column_end":77}},{"value":"/ elliptic curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4700,"byte_end":4719,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4720,"byte_end":4723,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ Other traits in this crate which are bounded by [`Curve`] are intended to","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4724,"byte_end":4801,"line_start":160,"line_end":160,"column_start":1,"column_end":78}},{"value":"/ be impl'd by these ZSTs, facilitating types which are generic over elliptic","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4802,"byte_end":4881,"line_start":161,"line_end":161,"column_start":1,"column_end":80}},{"value":"/ curves (e.g. [`SecretKey`]).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4882,"byte_end":4914,"line_start":162,"line_end":162,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":1237},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5237,"byte_end":5241,"line_start":167,"line_end":167,"column_start":10,"column_end":14},"name":"UInt","qualname":"::Curve::UInt","value":"type UInt: bigint::AddMod<Output = Self::UInt>\n        + bigint::ArrayEncoding\n        + bigint::Encoding\n        + bigint::Integer\n        + bigint::NegMod<Output = Self::UInt>\n        + bigint::Random\n        + bigint::RandomMod\n        + bigint::SubMod<Output = Self::UInt>\n        + zeroize::Zeroize;","parent":{"krate":0,"index":1236},"children":[],"decl_id":null,"docs":" Integer type used to represent field elements of this elliptic curve.\n","sig":null,"attributes":[{"value":"/ Integer type used to represent field elements of this elliptic curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5004,"byte_end":5077,"line_start":164,"line_end":164,"column_start":5,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":1238},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5729,"byte_end":5734,"line_start":181,"line_end":181,"column_start":11,"column_end":16},"name":"ORDER","qualname":"::Curve::ORDER","value":"Self::UInt","parent":{"krate":0,"index":1236},"children":[],"decl_id":null,"docs":" Order constant.","sig":null,"attributes":[{"value":"/ Order constant.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5542,"byte_end":5561,"line_start":177,"line_end":177,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5566,"byte_end":5569,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Subdivided into either 32-bit or 64-bit \"limbs\" (depending on the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5574,"byte_end":5643,"line_start":179,"line_end":179,"column_start":5,"column_end":74}},{"value":"/ target CPU's word size), specified from least to most significant.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5648,"byte_end":5718,"line_start":180,"line_end":180,"column_start":5,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1239},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5816,"byte_end":5826,"line_start":185,"line_end":185,"column_start":11,"column_end":21},"name":"PrimeCurve","qualname":"::PrimeCurve","value":"PrimeCurve: Curve","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for elliptic curves with prime order.\n","sig":null,"attributes":[{"value":"/ Marker trait for elliptic curves with prime order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5751,"byte_end":5805,"line_start":184,"line_end":184,"column_start":1,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":1240},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5898,"byte_end":5907,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"name":"FieldSize","qualname":"::FieldSize","value":"<<C as Curve>::UInt as bigint::ArrayEncoding>::ByteSize","parent":null,"children":[],"decl_id":null,"docs":" Size of field elements of this elliptic curve.\n","sig":null,"attributes":[{"value":"/ Size of field elements of this elliptic curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5838,"byte_end":5888,"line_start":187,"line_end":187,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1242},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6053,"byte_end":6063,"line_start":191,"line_end":191,"column_start":10,"column_end":20},"name":"FieldBytes","qualname":"::FieldBytes","value":"GenericArray<u8, FieldSize<C>>","parent":null,"children":[],"decl_id":null,"docs":" Byte representation of a base/scalar field element of a given curve.\n","sig":null,"attributes":[{"value":"/ Byte representation of a base/scalar field element of a given curve.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5971,"byte_end":6043,"line_start":190,"line_end":190,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":1244},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6288,"byte_end":6299,"line_start":197,"line_end":197,"column_start":10,"column_end":21},"name":"AffinePoint","qualname":"::AffinePoint","value":"<C as AffineArithmetic>::AffinePoint","parent":null,"children":[],"decl_id":null,"docs":" Affine point type for a given curve with a [`ProjectiveArithmetic`]\n implementation.\n","sig":null,"attributes":[{"value":"/ Affine point type for a given curve with a [`ProjectiveArithmetic`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6102,"byte_end":6173,"line_start":193,"line_end":193,"column_start":1,"column_end":72}},{"value":"/ implementation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6174,"byte_end":6193,"line_start":194,"line_end":194,"column_start":1,"column_end":20}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6248,"byte_end":6278,"line_start":196,"line_end":196,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":1246},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6534,"byte_end":6549,"line_start":203,"line_end":203,"column_start":10,"column_end":25},"name":"ProjectivePoint","qualname":"::ProjectivePoint","value":"<C as ProjectiveArithmetic>::ProjectivePoint","parent":null,"children":[],"decl_id":null,"docs":" Projective point type for a given curve with a [`ProjectiveArithmetic`]\n implementation.\n","sig":null,"attributes":[{"value":"/ Projective point type for a given curve with a [`ProjectiveArithmetic`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6344,"byte_end":6419,"line_start":199,"line_end":199,"column_start":1,"column_end":76}},{"value":"/ implementation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6420,"byte_end":6439,"line_start":200,"line_end":200,"column_start":1,"column_end":20}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":6440,"byte_end":6470,"line_start":201,"line_end":201,"column_start":1,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8728,"byte_end":8729,"line_start":24,"line_end":24,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":14099,"byte_end":14100,"line_start":84,"line_end":84,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":14884,"byte_end":14889,"line_start":15,"line_end":15,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":15031,"byte_end":15036,"line_start":21,"line_end":21,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":15282,"byte_end":15287,"line_start":35,"line_end":35,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19181,"byte_end":19191,"line_start":52,"line_end":52,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21793,"byte_end":21803,"line_start":146,"line_end":146,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22172,"byte_end":22182,"line_start":158,"line_end":158,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22311,"byte_end":22321,"line_start":167,"line_end":167,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22556,"byte_end":22566,"line_start":178,"line_end":178,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22715,"byte_end":22725,"line_start":187,"line_end":187,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22877,"byte_end":22887,"line_start":196,"line_end":196,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23042,"byte_end":23052,"line_start":205,"line_end":205,"column_start":36,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23082,"byte_end":23092,"line_start":207,"line_end":207,"column_start":23,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23122,"byte_end":23132,"line_start":209,"line_end":209,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23264,"byte_end":23274,"line_start":218,"line_end":218,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23417,"byte_end":23427,"line_start":227,"line_end":227,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23567,"byte_end":23577,"line_start":236,"line_end":236,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23735,"byte_end":23745,"line_start":247,"line_end":247,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23902,"byte_end":23912,"line_start":258,"line_end":258,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24144,"byte_end":24154,"line_start":271,"line_end":271,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24302,"byte_end":24312,"line_start":280,"line_end":280,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24454,"byte_end":24464,"line_start":289,"line_end":289,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24621,"byte_end":24631,"line_start":300,"line_end":300,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24863,"byte_end":24873,"line_start":313,"line_end":313,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25021,"byte_end":25031,"line_start":322,"line_end":322,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25158,"byte_end":25168,"line_start":331,"line_end":331,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25501,"byte_end":25511,"line_start":355,"line_end":355,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25669,"byte_end":25679,"line_start":365,"line_end":365,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25835,"byte_end":25845,"line_start":374,"line_end":374,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":26028,"byte_end":26038,"line_start":383,"line_end":383,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":26220,"byte_end":26230,"line_start":392,"line_end":392,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":26595,"byte_end":26605,"line_start":407,"line_end":407,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":27358,"byte_end":27368,"line_start":435,"line_end":435,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29327,"byte_end":29340,"line_start":39,"line_end":39,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30465,"byte_end":30478,"line_start":71,"line_end":71,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30626,"byte_end":30639,"line_start":80,"line_end":80,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30900,"byte_end":30913,"line_start":91,"line_end":91,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31071,"byte_end":31084,"line_start":100,"line_end":100,"column_start":18,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31144,"byte_end":31157,"line_start":102,"line_end":102,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31333,"byte_end":31343,"line_start":113,"line_end":113,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31518,"byte_end":31528,"line_start":122,"line_end":122,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31700,"byte_end":31710,"line_start":131,"line_end":131,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31918,"byte_end":31928,"line_start":140,"line_end":140,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32132,"byte_end":32145,"line_start":149,"line_end":149,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32307,"byte_end":32320,"line_start":158,"line_end":158,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32578,"byte_end":32591,"line_start":169,"line_end":169,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32818,"byte_end":32831,"line_start":181,"line_end":181,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32965,"byte_end":32978,"line_start":190,"line_end":190,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":33264,"byte_end":33277,"line_start":203,"line_end":203,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":33482,"byte_end":33495,"line_start":215,"line_end":215,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":33950,"byte_end":33963,"line_start":231,"line_end":231,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":34198,"byte_end":34211,"line_start":242,"line_end":242,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":34559,"byte_end":34572,"line_start":255,"line_end":255,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":34963,"byte_end":34976,"line_start":273,"line_end":273,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":35325,"byte_end":35338,"line_start":287,"line_end":287,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":35513,"byte_end":35526,"line_start":296,"line_end":296,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":35724,"byte_end":35737,"line_start":305,"line_end":305,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":35933,"byte_end":35946,"line_start":314,"line_end":314,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39610,"byte_end":39619,"line_start":93,"line_end":93,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46456,"byte_end":46465,"line_start":309,"line_end":309,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46603,"byte_end":46612,"line_start":318,"line_end":318,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46873,"byte_end":46882,"line_start":328,"line_end":328,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46994,"byte_end":47003,"line_start":337,"line_end":337,"column_start":23,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":47033,"byte_end":47042,"line_start":339,"line_end":339,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":47273,"byte_end":47282,"line_start":350,"line_end":350,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":48167,"byte_end":48176,"line_start":377,"line_end":377,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":48444,"byte_end":48453,"line_start":388,"line_end":388,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53786,"byte_end":53795,"line_start":83,"line_end":83,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":57132,"byte_end":57141,"line_start":183,"line_end":183,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":57283,"byte_end":57292,"line_start":192,"line_end":192,"column_start":18,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":57443,"byte_end":57452,"line_start":196,"line_end":196,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":58072,"byte_end":58081,"line_start":213,"line_end":213,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":58560,"byte_end":58572,"line_start":228,"line_end":228,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":58950,"byte_end":58962,"line_start":241,"line_end":241,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":59343,"byte_end":59352,"line_start":254,"line_end":254,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":59683,"byte_end":59692,"line_start":267,"line_end":267,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67369,"byte_end":67377,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":1013},{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69549,"byte_end":69557,"line_start":167,"line_end":167,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69704,"byte_end":69712,"line_start":175,"line_end":175,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69902,"byte_end":69911,"line_start":182,"line_end":182,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":70199,"byte_end":70208,"line_start":195,"line_end":195,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":71006,"byte_end":71014,"line_start":222,"line_end":222,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":71406,"byte_end":71414,"line_start":236,"line_end":236,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":71955,"byte_end":71964,"line_start":254,"line_end":254,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1040},{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":72401,"byte_end":72410,"line_start":270,"line_end":270,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":72898,"byte_end":72906,"line_start":286,"line_end":286,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":73298,"byte_end":73306,"line_start":300,"line_end":300,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":73625,"byte_end":73633,"line_start":311,"line_end":311,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74101,"byte_end":74109,"line_start":329,"line_end":329,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74595,"byte_end":74603,"line_start":346,"line_end":346,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74622,"byte_end":74630,"line_start":348,"line_end":348,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1061}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74708,"byte_end":74716,"line_start":354,"line_end":354,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74861,"byte_end":74869,"line_start":362,"line_end":362,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":75235,"byte_end":75247,"line_start":379,"line_end":379,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1087},{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":76918,"byte_end":76923,"line_start":428,"line_end":428,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":77390,"byte_end":77397,"line_start":443,"line_end":443,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":81962,"byte_end":81970,"line_start":554,"line_end":554,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":2687,"byte_end":2690,"line_start":70,"line_end":70,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":2726,"byte_end":2730,"line_start":73,"line_end":73,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":58}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":8728,"byte_end":8729,"line_start":24,"line_end":24,"column_start":31,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":45},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9253,"byte_end":9258,"line_start":40,"line_end":40,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":30,"index":176},"to":{"krate":0,"index":48}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":9487,"byte_end":9492,"line_start":48,"line_end":48,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":50}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/ops.rs","byte_start":11228,"byte_end":11233,"line_start":94,"line_end":94,"column_start":57,"column_end":62},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/sec1.rs","byte_start":14099,"byte_end":14100,"line_start":84,"line_end":84,"column_start":31,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":109},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":14884,"byte_end":14889,"line_start":15,"line_end":15,"column_start":18,"column_end":23},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1248},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":15031,"byte_end":15036,"line_start":21,"line_end":21,"column_start":32,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1248},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/error.rs","byte_start":15282,"byte_end":15287,"line_start":35,"line_end":35,"column_start":28,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1248},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":15958,"byte_end":15963,"line_start":16,"line_end":16,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/point.rs","byte_start":16344,"byte_end":16349,"line_start":25,"line_end":25,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":19181,"byte_end":19191,"line_start":52,"line_end":52,"column_start":9,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":21793,"byte_end":21803,"line_start":146,"line_end":146,"column_start":9,"column_end":19},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22172,"byte_end":22182,"line_start":158,"line_end":158,"column_start":27,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22311,"byte_end":22321,"line_start":167,"line_end":167,"column_start":37,"column_end":47},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1261},"to":{"krate":8,"index":65}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22556,"byte_end":22566,"line_start":178,"line_end":178,"column_start":28,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1261},"to":{"krate":8,"index":57}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22715,"byte_end":22725,"line_start":187,"line_end":187,"column_start":30,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1261},"to":{"krate":8,"index":108}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":22877,"byte_end":22887,"line_start":196,"line_end":196,"column_start":33,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1261},"to":{"krate":8,"index":105}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23042,"byte_end":23052,"line_start":205,"line_end":205,"column_start":36,"column_end":46},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1261},"to":{"krate":28,"index":46}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23082,"byte_end":23092,"line_start":207,"line_end":207,"column_start":23,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23122,"byte_end":23132,"line_start":209,"line_end":209,"column_start":23,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23264,"byte_end":23274,"line_start":218,"line_end":218,"column_start":24,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2722}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23417,"byte_end":23427,"line_start":227,"line_end":227,"column_start":17,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2711}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23567,"byte_end":23577,"line_start":236,"line_end":236,"column_start":23,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23735,"byte_end":23745,"line_start":247,"line_end":247,"column_start":32,"column_end":42},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":23902,"byte_end":23912,"line_start":258,"line_end":258,"column_start":33,"column_end":43},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24144,"byte_end":24154,"line_start":271,"line_end":271,"column_start":38,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3122}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24302,"byte_end":24312,"line_start":280,"line_end":280,"column_start":39,"column_end":49},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3122}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24454,"byte_end":24464,"line_start":289,"line_end":289,"column_start":32,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3096}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24621,"byte_end":24631,"line_start":300,"line_end":300,"column_start":33,"column_end":43},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3096}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":24863,"byte_end":24873,"line_start":313,"line_end":313,"column_start":38,"column_end":48},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3126}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25021,"byte_end":25031,"line_start":322,"line_end":322,"column_start":39,"column_end":49},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3126}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25158,"byte_end":25168,"line_start":331,"line_end":331,"column_start":17,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":3118}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25501,"byte_end":25511,"line_start":355,"line_end":355,"column_start":20,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1261},"to":{"krate":0,"index":588}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25669,"byte_end":25679,"line_start":365,"line_end":365,"column_start":26,"column_end":36},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":25835,"byte_end":25845,"line_start":374,"line_end":374,"column_start":27,"column_end":37},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":9608}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":26028,"byte_end":26038,"line_start":383,"line_end":383,"column_start":27,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":26220,"byte_end":26230,"line_start":392,"line_end":392,"column_start":26,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":12188}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":26595,"byte_end":26605,"line_start":407,"line_end":407,"column_start":23,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1261},"to":{"krate":38,"index":2101}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/core.rs","byte_start":27358,"byte_end":27368,"line_start":435,"line_end":435,"column_start":35,"column_end":45},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1261},"to":{"krate":38,"index":1560}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":29327,"byte_end":29340,"line_start":39,"line_end":39,"column_start":9,"column_end":22},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30465,"byte_end":30478,"line_start":71,"line_end":71,"column_start":30,"column_end":43},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30626,"byte_end":30639,"line_start":80,"line_end":80,"column_start":37,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1275},"to":{"krate":8,"index":65}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":30900,"byte_end":30913,"line_start":91,"line_end":91,"column_start":28,"column_end":41},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1275},"to":{"krate":8,"index":57}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31071,"byte_end":31084,"line_start":100,"line_end":100,"column_start":18,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":3034}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31144,"byte_end":31157,"line_start":102,"line_end":102,"column_start":19,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31333,"byte_end":31343,"line_start":113,"line_end":113,"column_start":36,"column_end":46},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1242},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31518,"byte_end":31528,"line_start":122,"line_end":122,"column_start":37,"column_end":47},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1242},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31700,"byte_end":31710,"line_start":131,"line_end":131,"column_start":36,"column_end":46},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":31918,"byte_end":31928,"line_start":140,"line_end":140,"column_start":37,"column_end":47},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32132,"byte_end":32145,"line_start":149,"line_end":149,"column_start":32,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32307,"byte_end":32320,"line_start":158,"line_end":158,"column_start":33,"column_end":46},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32578,"byte_end":32591,"line_start":169,"line_end":169,"column_start":20,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1275},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32818,"byte_end":32831,"line_start":181,"line_end":181,"column_start":20,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1275},"to":{"krate":0,"index":588}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":32965,"byte_end":32978,"line_start":190,"line_end":190,"column_start":17,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":3118}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":33264,"byte_end":33277,"line_start":203,"line_end":203,"column_start":35,"column_end":48},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":3101}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":33482,"byte_end":33495,"line_start":215,"line_end":215,"column_start":36,"column_end":49},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":3101}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":33950,"byte_end":33963,"line_start":231,"line_end":231,"column_start":26,"column_end":39},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1275},"to":{"krate":0,"index":50}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":34198,"byte_end":34211,"line_start":242,"line_end":242,"column_start":33,"column_end":46},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1275},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":34559,"byte_end":34572,"line_start":255,"line_end":255,"column_start":28,"column_end":41},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":2937}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":34963,"byte_end":34976,"line_start":273,"line_end":273,"column_start":21,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1275},"to":{"krate":28,"index":44}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":35325,"byte_end":35338,"line_start":287,"line_end":287,"column_start":26,"column_end":39},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":35513,"byte_end":35526,"line_start":296,"line_end":296,"column_start":27,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":9608}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":35724,"byte_end":35737,"line_start":305,"line_end":305,"column_start":27,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":9610}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/scalar/nonzero.rs","byte_start":35933,"byte_end":35946,"line_start":314,"line_end":314,"column_start":26,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":12188}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":39610,"byte_end":39619,"line_start":93,"line_end":93,"column_start":9,"column_end":18},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46456,"byte_end":46465,"line_start":309,"line_end":309,"column_start":28,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1281},"to":{"krate":8,"index":57}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46603,"byte_end":46612,"line_start":318,"line_end":318,"column_start":19,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46873,"byte_end":46882,"line_start":328,"line_end":328,"column_start":18,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":46994,"byte_end":47003,"line_start":337,"line_end":337,"column_start":23,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":47033,"byte_end":47042,"line_start":339,"line_end":339,"column_start":23,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":47273,"byte_end":47282,"line_start":350,"line_end":350,"column_start":45,"column_end":54},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":2937}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":48167,"byte_end":48176,"line_start":377,"line_end":377,"column_start":36,"column_end":45},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/secret_key.rs","byte_start":48444,"byte_end":48453,"line_start":388,"line_end":388,"column_start":37,"column_end":46},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49033,"byte_end":49038,"line_start":12,"line_end":12,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1236},"to":{"krate":0,"index":775}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49041,"byte_end":49057,"line_start":12,"line_end":12,"column_start":37,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":781},"to":{"krate":0,"index":775}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49573,"byte_end":49583,"line_start":33,"line_end":33,"column_start":5,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":1239},"to":{"krate":0,"index":777}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49586,"byte_end":49606,"line_start":33,"line_end":33,"column_start":18,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":779},"to":{"krate":0,"index":777}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49935,"byte_end":49940,"line_start":41,"line_end":41,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":1236},"to":{"krate":0,"index":779}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":49943,"byte_end":49959,"line_start":41,"line_end":41,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":775},"to":{"krate":0,"index":779}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/arithmetic.rs","byte_start":50705,"byte_end":50710,"line_start":67,"line_end":67,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1236},"to":{"krate":0,"index":781}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":53786,"byte_end":53795,"line_start":83,"line_end":83,"column_start":9,"column_end":18},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1287},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":57132,"byte_end":57141,"line_start":183,"line_end":183,"column_start":35,"column_end":44},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1287},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":57283,"byte_end":57292,"line_start":192,"line_end":192,"column_start":18,"column_end":27},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1287},"to":{"krate":1,"index":3034}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":57443,"byte_end":57452,"line_start":196,"line_end":196,"column_start":33,"column_end":42},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1287},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":58072,"byte_end":58081,"line_start":213,"line_end":213,"column_start":31,"column_end":40},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1287},"to":{"krate":0,"index":100}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":58560,"byte_end":58572,"line_start":228,"line_end":228,"column_start":32,"column_end":44},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":58950,"byte_end":58962,"line_start":241,"line_end":241,"column_start":33,"column_end":45},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":59343,"byte_end":59352,"line_start":254,"line_end":254,"column_start":24,"column_end":33},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1287},"to":{"krate":1,"index":2722}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/public_key.rs","byte_start":59683,"byte_end":59692,"line_start":267,"line_end":267,"column_start":17,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1287},"to":{"krate":1,"index":2711}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":65354,"byte_end":65359,"line_start":46,"line_end":46,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":1236},"to":{"krate":0,"index":1003}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":67369,"byte_end":67377,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69549,"byte_end":69557,"line_start":167,"line_end":167,"column_start":18,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":12188}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69704,"byte_end":69712,"line_start":175,"line_end":175,"column_start":19,"column_end":27},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1307},"to":{"krate":4,"index":5742}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":69902,"byte_end":69911,"line_start":182,"line_end":182,"column_start":31,"column_end":40},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":2937}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":70199,"byte_end":70208,"line_start":195,"line_end":195,"column_start":32,"column_end":41},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1281},"to":{"krate":1,"index":2937}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":71006,"byte_end":71014,"line_start":222,"line_end":222,"column_start":32,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":71406,"byte_end":71414,"line_start":236,"line_end":236,"column_start":33,"column_end":41},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":71955,"byte_end":71964,"line_start":254,"line_end":254,"column_start":31,"column_end":40},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1287},"to":{"krate":1,"index":2937}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":72401,"byte_end":72410,"line_start":270,"line_end":270,"column_start":32,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1287},"to":{"krate":1,"index":2937}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":72898,"byte_end":72906,"line_start":286,"line_end":286,"column_start":32,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":73298,"byte_end":73306,"line_start":300,"line_end":300,"column_start":33,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":73625,"byte_end":73633,"line_start":311,"line_end":311,"column_start":16,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74101,"byte_end":74109,"line_start":329,"line_end":329,"column_start":20,"column_end":28},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74595,"byte_end":74603,"line_start":346,"line_end":346,"column_start":13,"column_end":21},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74622,"byte_end":74630,"line_start":348,"line_end":348,"column_start":15,"column_end":23},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1307},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74708,"byte_end":74716,"line_start":354,"line_end":354,"column_start":18,"column_end":26},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1307},"to":{"krate":28,"index":44}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":74861,"byte_end":74869,"line_start":362,"line_end":362,"column_start":32,"column_end":40},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1307},"to":{"krate":38,"index":1560}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":75235,"byte_end":75247,"line_start":379,"line_end":379,"column_start":40,"column_end":52},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1079},"to":{"krate":38,"index":1646}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":76918,"byte_end":76923,"line_start":428,"line_end":428,"column_start":40,"column_end":45},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1068},"to":{"krate":38,"index":1560}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":77390,"byte_end":77397,"line_start":443,"line_end":443,"column_start":40,"column_end":47},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1095},"to":{"krate":38,"index":1646}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/jwk.rs","byte_start":81962,"byte_end":81970,"line_start":554,"line_end":554,"column_start":20,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1307},"to":{"krate":38,"index":2101}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4942,"byte_end":4946,"line_start":163,"line_end":163,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":1236}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4949,"byte_end":4954,"line_start":163,"line_end":163,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":2645},"to":{"krate":0,"index":1236}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4957,"byte_end":4962,"line_start":163,"line_end":163,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":9595},"to":{"krate":0,"index":1236}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4965,"byte_end":4972,"line_start":163,"line_end":163,"column_start":51,"column_end":58},"kind":"SuperTrait","from":{"krate":1,"index":3002},"to":{"krate":0,"index":1236}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4975,"byte_end":4977,"line_start":163,"line_end":163,"column_start":61,"column_end":63},"kind":"SuperTrait","from":{"krate":1,"index":2680},"to":{"krate":0,"index":1236}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4980,"byte_end":4983,"line_start":163,"line_end":163,"column_start":66,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":2711},"to":{"krate":0,"index":1236}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4986,"byte_end":4990,"line_start":163,"line_end":163,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":1236}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":4993,"byte_end":4997,"line_start":163,"line_end":163,"column_start":79,"column_end":83},"kind":"SuperTrait","from":{"krate":1,"index":3036},"to":{"krate":0,"index":1236}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.11.12/src/lib.rs","byte_start":5828,"byte_end":5833,"line_start":185,"line_end":185,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":1236},"to":{"krate":0,"index":1239}}]}