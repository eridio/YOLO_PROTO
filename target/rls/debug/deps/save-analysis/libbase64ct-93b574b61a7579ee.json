{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0","program":"/home/flo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","base64ct","--edition=2021","/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=93b574b61a7579ee","-C","extra-filename=-93b574b61a7579ee","--out-dir","/home/flo/Desktop/RUST/helloworld_web_ASSEMBLY/target/rls/debug/deps","-L","dependency=/home/flo/Desktop/RUST/helloworld_web_ASSEMBLY/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/flo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/flo/Desktop/RUST/helloworld_web_ASSEMBLY/target/rls/debug/deps/libbase64ct-93b574b61a7579ee.rmeta"},"prelude":{"crate_id":{"name":"base64ct","disambiguator":[15642600002087829237,0]},"crate_root":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src","external_crates":[{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}}],"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":0,"byte_end":2599,"line_start":1,"line_end":99,"column_start":1,"column_end":33}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":396},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2213,"byte_end":2220,"line_start":85,"line_end":85,"column_start":14,"column_end":21},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":124},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2235,"byte_end":2242,"line_start":86,"line_end":86,"column_start":14,"column_end":21},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2258,"byte_end":2266,"line_start":87,"line_end":87,"column_start":15,"column_end":23},"alias_span":null,"name":"Encoding","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":477},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2281,"byte_end":2286,"line_start":88,"line_end":88,"column_start":14,"column_end":19},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2288,"byte_end":2308,"line_start":88,"line_end":88,"column_start":21,"column_end":41},"alias_span":null,"name":"InvalidEncodingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":465},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2288,"byte_end":2308,"line_start":88,"line_end":88,"column_start":21,"column_end":41},"alias_span":null,"name":"InvalidEncodingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":451},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2310,"byte_end":2328,"line_start":88,"line_end":88,"column_start":43,"column_end":61},"alias_span":null,"name":"InvalidLengthError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":452},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2310,"byte_end":2328,"line_start":88,"line_end":88,"column_start":43,"column_end":61},"alias_span":null,"name":"InvalidLengthError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":493},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2348,"byte_end":2358,"line_start":89,"line_end":89,"column_start":18,"column_end":28},"alias_span":null,"name":"LineEnding","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2391,"byte_end":2403,"line_start":91,"line_end":91,"column_start":17,"column_end":29},"alias_span":null,"name":"Base64Bcrypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":516},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2391,"byte_end":2403,"line_start":91,"line_end":91,"column_start":17,"column_end":29},"alias_span":null,"name":"Base64Bcrypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":528},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2420,"byte_end":2431,"line_start":92,"line_end":92,"column_start":16,"column_end":27},"alias_span":null,"name":"Base64Crypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":529},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2420,"byte_end":2431,"line_start":92,"line_end":92,"column_start":16,"column_end":27},"alias_span":null,"name":"Base64Crypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":541},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2452,"byte_end":2458,"line_start":93,"line_end":93,"column_start":20,"column_end":26},"alias_span":null,"name":"Base64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2452,"byte_end":2458,"line_start":93,"line_end":93,"column_start":20,"column_end":26},"alias_span":null,"name":"Base64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":554},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2460,"byte_end":2474,"line_start":93,"line_end":93,"column_start":28,"column_end":42},"alias_span":null,"name":"Base64Unpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":555},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2460,"byte_end":2474,"line_start":93,"line_end":93,"column_start":28,"column_end":42},"alias_span":null,"name":"Base64Unpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":567},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2491,"byte_end":2500,"line_start":94,"line_end":94,"column_start":15,"column_end":24},"alias_span":null,"name":"Base64Url","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":568},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2491,"byte_end":2500,"line_start":94,"line_end":94,"column_start":15,"column_end":24},"alias_span":null,"name":"Base64Url","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":580},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2502,"byte_end":2519,"line_start":94,"line_end":94,"column_start":26,"column_end":43},"alias_span":null,"name":"Base64UrlUnpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":581},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":2502,"byte_end":2519,"line_start":94,"line_end":94,"column_start":26,"column_end":43},"alias_span":null,"name":"Base64UrlUnpadded","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":0,"byte_end":2599,"line_start":1,"line_end":99,"column_start":1,"column_end":33},"name":"","qualname":"::","value":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":93},{"krate":0,"index":156},{"krate":0,"index":223},{"krate":0,"index":241},{"krate":0,"index":249},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":395}],"decl_id":null,"docs":"# [RustCrypto]: Constant-Time Base64","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms, unused_lifetimes,\nunused_qualifications)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":334,"byte_end":433,"line_start":9,"line_end":14,"column_start":1,"column_end":3}},{"value":"/ # Usage","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":435,"byte_end":446,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":447,"byte_end":450,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ## Allocating (enable `alloc` crate feature)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":451,"byte_end":499,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":500,"byte_end":503,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":504,"byte_end":511,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":512,"byte_end":543,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":544,"byte_end":551,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use base64ct::{Base64, Encoding};","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":552,"byte_end":589,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":590,"byte_end":593,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let bytes = b\"example bytestring!\";","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":594,"byte_end":633,"line_start":25,"line_end":25,"column_start":1,"column_end":40}},{"value":"/ let encoded = Base64::encode_string(bytes);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":634,"byte_end":681,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(encoded, \"ZXhhbXBsZSBieXRlc3RyaW5nIQ==\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":682,"byte_end":738,"line_start":27,"line_end":27,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":739,"byte_end":742,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let decoded = Base64::decode_vec(&encoded).unwrap();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":743,"byte_end":799,"line_start":29,"line_end":29,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(decoded, bytes);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":800,"byte_end":831,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/ # }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":832,"byte_end":839,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":840,"byte_end":847,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":848,"byte_end":851,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Heapless `no_std` usage","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":852,"byte_end":882,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":883,"byte_end":886,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":887,"byte_end":894,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use base64ct::{Base64, Encoding};","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":895,"byte_end":932,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":933,"byte_end":936,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ const BUF_SIZE: usize = 128;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":937,"byte_end":969,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":970,"byte_end":973,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let bytes = b\"example bytestring!\";","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":974,"byte_end":1013,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ assert!(Base64::encoded_len(bytes) <= BUF_SIZE);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1014,"byte_end":1066,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1067,"byte_end":1070,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let mut enc_buf = [0u8; BUF_SIZE];","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1071,"byte_end":1109,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ let encoded = Base64::encode(bytes, &mut enc_buf).unwrap();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1110,"byte_end":1173,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(encoded, \"ZXhhbXBsZSBieXRlc3RyaW5nIQ==\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1174,"byte_end":1230,"line_start":46,"line_end":46,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1231,"byte_end":1234,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ let mut dec_buf = [0u8; BUF_SIZE];","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1235,"byte_end":1273,"line_start":48,"line_end":48,"column_start":1,"column_end":39}},{"value":"/ let decoded = Base64::decode(encoded, &mut dec_buf).unwrap();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1274,"byte_end":1339,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(decoded, bytes);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1340,"byte_end":1371,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1372,"byte_end":1379,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1380,"byte_end":1383,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1384,"byte_end":1404,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1405,"byte_end":1408,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Implemented using integer arithmetic alone without any lookup tables or","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1409,"byte_end":1484,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ data-dependent branches, thereby providing portable \"best effort\"","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1485,"byte_end":1554,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/ constant-time operation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1555,"byte_end":1583,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1584,"byte_end":1587,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Not constant-time with respect to message length (only data).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1588,"byte_end":1653,"line_start":59,"line_end":59,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1654,"byte_end":1657,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Adapted from the following constant-time C++ implementation of Base64:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1658,"byte_end":1732,"line_start":61,"line_end":61,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1733,"byte_end":1736,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ <https://github.com/Sc00bz/ConstTimeEncoding/blob/master/base64.cpp>","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1737,"byte_end":1809,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1810,"byte_end":1813,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Copyright (c) 2014 Steve \"Sc00bz\" Thomas (steve at tobtu dot com).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1814,"byte_end":1884,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"/ Derived code is dual licensed MIT + Apache 2 (with permission from Sc00bz).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/lib.rs","byte_start":1885,"byte_end":1964,"line_start":66,"line_end":66,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":396},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3416,"byte_end":3423,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::decoder::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403}],"decl_id":null,"docs":" Stateful Base64 decoder with support for buffered, incremental decoding.","sig":null,"attributes":[{"value":"/ Stateful Base64 decoder with support for buffered, incremental decoding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":2980,"byte_end":3056,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3057,"byte_end":3060,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The `E` type parameter can be any type which impls [`Encoding`] such as","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3061,"byte_end":3136,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ [`Base64`] or [`Base64Unpadded`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3137,"byte_end":3174,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3175,"byte_end":3178,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Internally it uses a sealed `Variant` trait which is an implementation","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3179,"byte_end":3253,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ detail of this crate, and leverages a [blanket impl] of [`Encoding`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3254,"byte_end":3327,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3328,"byte_end":3331,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [blanket impl]: ./trait.Encoding.html#impl-Encoding","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3332,"byte_end":3387,"line_start":30,"line_end":30,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4131,"byte_end":4134,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(&'i [u8]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder for a byte slice containing contiguous\n (non-newline-delimited) Base64-encoded data.","sig":null,"attributes":[{"value":"/ Create a new decoder for a byte slice containing contiguous","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3873,"byte_end":3936,"line_start":50,"line_end":50,"column_start":5,"column_end":68}},{"value":"/ (non-newline-delimited) Base64-encoded data.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3941,"byte_end":3989,"line_start":51,"line_end":51,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3994,"byte_end":3997,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4002,"byte_end":4015,"line_start":53,"line_end":53,"column_start":5,"column_end":18}},{"value":"/ - `Ok(decoder)` on success.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4020,"byte_end":4051,"line_start":54,"line_end":54,"column_start":5,"column_end":36}},{"value":"/ - `Err(Error::InvalidLength)` if the input buffer is empty.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4056,"byte_end":4119,"line_start":55,"line_end":55,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5337,"byte_end":5348,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"new_wrapped","qualname":"<Decoder>::new_wrapped","value":"pub fn new_wrapped(&'i [u8], usize) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder for a byte slice containing Base64 which\n line wraps at the given line length.","sig":null,"attributes":[{"value":"/ Create a new decoder for a byte slice containing Base64 which","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4508,"byte_end":4573,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/ line wraps at the given line length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4578,"byte_end":4618,"line_start":70,"line_end":70,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4623,"byte_end":4626,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Trailing newlines are not supported and must be removed in advance.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4631,"byte_end":4702,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4707,"byte_end":4710,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Newlines are handled according to what are roughly [RFC7468] conventions:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4715,"byte_end":4792,"line_start":74,"line_end":74,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4797,"byte_end":4800,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4805,"byte_end":4816,"line_start":76,"line_end":76,"column_start":5,"column_end":16}},{"value":"/ [parsers] MUST handle different newline conventions","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4821,"byte_end":4876,"line_start":77,"line_end":77,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4881,"byte_end":4888,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4893,"byte_end":4896,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ RFC7468 allows any of the following as newlines, and allows a mixture","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4901,"byte_end":4974,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ of different types of newlines:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":4979,"byte_end":5014,"line_start":81,"line_end":81,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5019,"byte_end":5022,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5027,"byte_end":5038,"line_start":83,"line_end":83,"column_start":5,"column_end":16}},{"value":"/ eol        = CRLF / CR / LF","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5043,"byte_end":5074,"line_start":84,"line_end":84,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5079,"byte_end":5086,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5091,"byte_end":5094,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5099,"byte_end":5112,"line_start":87,"line_end":87,"column_start":5,"column_end":18}},{"value":"/ - `Ok(decoder)` on success.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5117,"byte_end":5148,"line_start":88,"line_end":88,"column_start":5,"column_end":36}},{"value":"/ - `Err(Error::InvalidLength)` if the input buffer is empty or the line","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5153,"byte_end":5227,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/   width is zero.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5232,"byte_end":5252,"line_start":90,"line_end":90,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5257,"byte_end":5260,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ [RFC7468]: https://datatracker.ietf.org/doc/html/rfc7468","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5265,"byte_end":5325,"line_start":92,"line_end":92,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":6073,"byte_end":6079,"line_start":113,"line_end":113,"column_start":12,"column_end":18},"name":"decode","qualname":"<Decoder>::decode","value":"pub fn decode<'o>(&mut Self, &'o mut [u8]) -> Result<&'o [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Fill the provided buffer with data decoded from Base64.","sig":null,"attributes":[{"value":"/ Fill the provided buffer with data decoded from Base64.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5751,"byte_end":5810,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5815,"byte_end":5818,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Enough Base64 input data must remain to fill the entire buffer.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5823,"byte_end":5890,"line_start":108,"line_end":108,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5895,"byte_end":5898,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5903,"byte_end":5916,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"/ - `Ok(bytes)` if the expected amount of data was read","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5921,"byte_end":5978,"line_start":111,"line_end":111,"column_start":5,"column_end":62}},{"value":"/ - `Err(Error::InvalidLength)` if the exact amount of data couldn't be read","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":5983,"byte_end":6061,"line_start":112,"line_end":112,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":8616,"byte_end":8629,"line_start":176,"line_end":176,"column_start":12,"column_end":25},"name":"decode_to_end","qualname":"<Decoder>::decode_to_end","value":"pub fn decode_to_end<'o>(&mut Self, &'o mut Vec<u8>)\n-> Result<&'o [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode all remaining Base64 data, placing the result into `buf`.","sig":null,"attributes":[{"value":"/ Decode all remaining Base64 data, placing the result into `buf`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":8342,"byte_end":8410,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":8415,"byte_end":8418,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ If successful, this function will return the total number of bytes","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":8423,"byte_end":8493,"line_start":172,"line_end":172,"column_start":5,"column_end":75}},{"value":"/ decoded into `buf`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":8498,"byte_end":8521,"line_start":173,"line_end":173,"column_start":5,"column_end":28}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":8526,"byte_end":8551,"line_start":174,"line_end":174,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":9254,"byte_end":9265,"line_start":194,"line_end":194,"column_start":12,"column_end":23},"name":"decoded_len","qualname":"<Decoder>::decoded_len","value":"pub fn decoded_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the remaining data after Base64 decoding.","sig":null,"attributes":[{"value":"/ Get the length of the remaining data after Base64 decoding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":9125,"byte_end":9188,"line_start":191,"line_end":191,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":9193,"byte_end":9196,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Decreases every time data is decoded.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":9201,"byte_end":9242,"line_start":193,"line_end":193,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":9375,"byte_end":9386,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"is_finished","qualname":"<Decoder>::is_finished","value":"pub fn is_finished(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has all of the input data been decoded?\n","sig":null,"attributes":[{"value":"/ Has all of the input data been decoded?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":9320,"byte_end":9363,"line_start":198,"line_end":198,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":124},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23326,"byte_end":23333,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::encoder::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"decl_id":null,"docs":" Stateful Base64 encoder with support for buffered, incremental encoding.","sig":null,"attributes":[{"value":"/ Stateful Base64 encoder with support for buffered, incremental encoding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":22907,"byte_end":22983,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":22984,"byte_end":22987,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The `E` type parameter can be any type which impls [`Encoding`] such as","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":22988,"byte_end":23063,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ [`Base64`] or [`Base64Unpadded`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23064,"byte_end":23101,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23102,"byte_end":23105,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Internally it uses a sealed `Variant` trait which is an implementation","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23106,"byte_end":23180,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ detail of this crate, and leverages a [blanket impl] of [`Encoding`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23181,"byte_end":23254,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23255,"byte_end":23258,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [blanket impl]: ./trait.Encoding.html#impl-Encoding","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23259,"byte_end":23314,"line_start":25,"line_end":25,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23971,"byte_end":23974,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(&'o mut [u8]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder which writes output to the given byte slice.","sig":null,"attributes":[{"value":"/ Create a new encoder which writes output to the given byte slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23816,"byte_end":23885,"line_start":45,"line_end":45,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23890,"byte_end":23893,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Output constructed using this method is not line-wrapped.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23898,"byte_end":23959,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24655,"byte_end":24666,"line_start":70,"line_end":70,"column_start":12,"column_end":23},"name":"new_wrapped","qualname":"<Encoder>::new_wrapped","value":"pub fn new_wrapped(&'o mut [u8], usize, LineEnding) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder which writes line-wrapped output to the given byte\n slice.","sig":null,"attributes":[{"value":"/ Create a new encoder which writes line-wrapped output to the given byte","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24305,"byte_end":24380,"line_start":62,"line_end":62,"column_start":5,"column_end":80}},{"value":"/ slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24385,"byte_end":24395,"line_start":63,"line_end":63,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24400,"byte_end":24403,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Output will be wrapped at the specified interval, using the provided","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24408,"byte_end":24480,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ line ending. Use [`LineEnding::default()`] to use the conventional line","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24485,"byte_end":24560,"line_start":66,"line_end":66,"column_start":5,"column_end":80}},{"value":"/ ending for the target OS.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24565,"byte_end":24594,"line_start":67,"line_end":67,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24599,"byte_end":24602,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Minimum allowed line width is 4.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24607,"byte_end":24643,"line_start":69,"line_end":69,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":25191,"byte_end":25197,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder>::encode","value":"pub fn encode(&mut Self, &[u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode the provided buffer as Base64, writing it to the output buffer.","sig":null,"attributes":[{"value":"/ Encode the provided buffer as Base64, writing it to the output buffer.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":24927,"byte_end":25001,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":25006,"byte_end":25009,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":25014,"byte_end":25027,"line_start":82,"line_end":82,"column_start":5,"column_end":18}},{"value":"/ - `Ok(bytes)` if the expected amount of data was read","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":25032,"byte_end":25089,"line_start":83,"line_end":83,"column_start":5,"column_end":62}},{"value":"/ - `Err(Error::InvalidLength)` if there is insufficient space in the output buffer","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":25094,"byte_end":25179,"line_start":84,"line_end":84,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":26408,"byte_end":26416,"line_start":119,"line_end":119,"column_start":12,"column_end":20},"name":"position","qualname":"<Encoder>::position","value":"pub fn position(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the position inside of the output buffer where the write cursor\n is currently located.\n","sig":null,"attributes":[{"value":"/ Get the position inside of the output buffer where the write cursor","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":26295,"byte_end":26366,"line_start":117,"line_end":117,"column_start":5,"column_end":76}},{"value":"/ is currently located.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":26371,"byte_end":26396,"line_start":118,"line_end":118,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":26548,"byte_end":26554,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> Result<&'o str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding data, returning the resulting Base64 as a `str`.\n","sig":null,"attributes":[{"value":"/ Finish encoding data, returning the resulting Base64 as a `str`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":26468,"byte_end":26536,"line_start":123,"line_end":123,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":26803,"byte_end":26824,"line_start":130,"line_end":130,"column_start":12,"column_end":33},"name":"finish_with_remaining","qualname":"<Encoder>::finish_with_remaining","value":"pub fn finish_with_remaining(Self) -> Result<(&'o str, &'o mut [u8]), Error>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding data, returning the resulting Base64 as a `str`\n along with the remaining space in the output buffer.\n","sig":null,"attributes":[{"value":"/ Finish encoding data, returning the resulting Base64 as a `str`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":26663,"byte_end":26730,"line_start":128,"line_end":128,"column_start":5,"column_end":72}},{"value":"/ along with the remaining space in the output buffer.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":26735,"byte_end":26791,"line_start":129,"line_end":129,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":186},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34323,"byte_end":34331,"line_start":19,"line_end":19,"column_start":11,"column_end":19},"name":"Encoding","qualname":"::encoding::Encoding","value":"Encoding: 'static + Copy + Debug + Eq + Send + Sized + Sync","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":194}],"decl_id":null,"docs":" Base64 encoding trait.","sig":null,"attributes":[{"value":"/ Base64 encoding trait.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34189,"byte_end":34215,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34216,"byte_end":34219,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This trait must be imported to make use of any Base64 variant defined","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34220,"byte_end":34293,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ in this crate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34294,"byte_end":34312,"line_start":18,"line_end":18,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34461,"byte_end":34467,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"decode","qualname":"::encoding::Encoding::decode","value":"pub fn decode<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>, &mut [u8])\n-> Result<&[u8], Error>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Decode a Base64 string into the provided destination buffer.\n","sig":null,"attributes":[{"value":"/ Decode a Base64 string into the provided destination buffer.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34389,"byte_end":34453,"line_start":20,"line_end":20,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34716,"byte_end":34731,"line_start":27,"line_end":27,"column_start":8,"column_end":23},"name":"decode_in_place","qualname":"::encoding::Encoding::decode_in_place","value":"pub fn decode_in_place(&mut [u8]) -> Result<&[u8], InvalidEncodingError>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Decode a Base64 string in-place.","sig":null,"attributes":[{"value":"/ Decode a Base64 string in-place.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34537,"byte_end":34573,"line_start":23,"line_end":23,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34578,"byte_end":34581,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ NOTE: this method does not (yet) validate that padding is well-formed,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34586,"byte_end":34660,"line_start":25,"line_end":25,"column_start":5,"column_end":79}},{"value":"/ if the given Base64 encoding is padded.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34665,"byte_end":34708,"line_start":26,"line_end":26,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34930,"byte_end":34940,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"decode_vec","qualname":"::encoding::Encoding::decode_vec","value":"pub fn decode_vec(&str) -> Result<Vec<u8>, Error>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Decode a Base64 string into a byte vector.\n","sig":null,"attributes":[{"value":"/ Decode a Base64 string into a byte vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34793,"byte_end":34839,"line_start":29,"line_end":29,"column_start":5,"column_end":51}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34844,"byte_end":34869,"line_start":30,"line_end":30,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35163,"byte_end":35169,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"encode","qualname":"::encoding::Encoding::encode","value":"pub fn encode<'a>(&[u8], &'a mut [u8]) -> Result<&'a str, InvalidLengthError>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Encode the input byte slice as Base64.","sig":null,"attributes":[{"value":"/ Encode the input byte slice as Base64.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34986,"byte_end":35028,"line_start":34,"line_end":34,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35033,"byte_end":35036,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Writes the result into the provided destination slice, returning an","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35041,"byte_end":35112,"line_start":36,"line_end":36,"column_start":5,"column_end":76}},{"value":"/ ASCII-encoded Base64 string value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35117,"byte_end":35155,"line_start":37,"line_end":37,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35488,"byte_end":35501,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"encode_string","qualname":"::encoding::Encoding::encode_string","value":"pub fn encode_string(&[u8]) -> String","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Encode input byte slice into a [`String`] containing Base64.","sig":null,"attributes":[{"value":"/ Encode input byte slice into a [`String`] containing Base64.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35250,"byte_end":35314,"line_start":40,"line_end":40,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35319,"byte_end":35322,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35327,"byte_end":35339,"line_start":42,"line_end":42,"column_start":5,"column_end":17}},{"value":"/ If `input` length is greater than `usize::MAX/4`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35344,"byte_end":35397,"line_start":43,"line_end":43,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35402,"byte_end":35427,"line_start":44,"line_end":44,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35702,"byte_end":35713,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"encoded_len","qualname":"::encoding::Encoding::encoded_len","value":"pub fn encoded_len(&[u8]) -> usize","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Get the length of Base64 produced by encoding the given bytes.","sig":null,"attributes":[{"value":"/ Get the length of Base64 produced by encoding the given bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35532,"byte_end":35598,"line_start":48,"line_end":48,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35603,"byte_end":35606,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ WARNING: this function will return `0` for lengths greater than `usize::MAX/4`!","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35611,"byte_end":35694,"line_start":50,"line_end":50,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":451},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":45828,"byte_end":45846,"line_start":10,"line_end":10,"column_start":12,"column_end":30},"name":"InvalidLengthError","qualname":"::errors::InvalidLengthError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Insufficient output buffer length.\n","sig":null,"attributes":[{"value":"/ Insufficient output buffer length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":45733,"byte_end":45771,"line_start":8,"line_end":8,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":464},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46193,"byte_end":46213,"line_start":23,"line_end":23,"column_start":12,"column_end":32},"name":"InvalidEncodingError","qualname":"::errors::InvalidEncodingError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Invalid encoding of provided Base64 string.\n","sig":null,"attributes":[{"value":"/ Invalid encoding of provided Base64 string.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46089,"byte_end":46136,"line_start":21,"line_end":21,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":478},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46661,"byte_end":46676,"line_start":38,"line_end":38,"column_start":5,"column_end":20},"name":"InvalidEncoding","qualname":"::errors::Error::InvalidEncoding","value":"Error::InvalidEncoding","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Invalid encoding of provided Base64 string.\n","sig":null,"attributes":[{"value":"/ Invalid encoding of provided Base64 string.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46609,"byte_end":46656,"line_start":37,"line_end":37,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":480},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46726,"byte_end":46739,"line_start":41,"line_end":41,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::errors::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Insufficient output buffer length.\n","sig":null,"attributes":[{"value":"/ Insufficient output buffer length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46683,"byte_end":46721,"line_start":40,"line_end":40,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":477},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46597,"byte_end":46602,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"name":"Error","qualname":"::errors::Error","value":"pub enum Error { InvalidEncoding, InvalidLength, }","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":480}],"decl_id":null,"docs":" Generic error, union of [`InvalidLengthError`] and [`InvalidEncodingError`].\n","sig":null,"attributes":[{"value":"/ Generic error, union of [`InvalidLengthError`] and [`InvalidEncodingError`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46462,"byte_end":46542,"line_start":34,"line_end":34,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":494},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48352,"byte_end":48354,"line_start":17,"line_end":17,"column_start":5,"column_end":7},"name":"CR","qualname":"::line_ending::LineEnding::CR","value":"LineEnding::CR","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Carriage return: `\\r` (Pre-OS X Macintosh)\n","sig":null,"attributes":[{"value":"/ Carriage return: `\\r` (Pre-OS X Macintosh)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48301,"byte_end":48347,"line_start":16,"line_end":16,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":496},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48397,"byte_end":48399,"line_start":20,"line_end":20,"column_start":5,"column_end":7},"name":"LF","qualname":"::line_ending::LineEnding::LF","value":"LineEnding::LF","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Line feed: `\\n` (Unix OSes)\n","sig":null,"attributes":[{"value":"/ Line feed: `\\n` (Unix OSes)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48361,"byte_end":48392,"line_start":19,"line_end":19,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":498},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48460,"byte_end":48464,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::line_ending::LineEnding::CRLF","value":"LineEnding::CRLF","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Carriage return + line feed: `\\r\\n` (Windows)\n","sig":null,"attributes":[{"value":"/ Carriage return + line feed: `\\r\\n` (Windows)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48406,"byte_end":48455,"line_start":22,"line_end":22,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":493},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48284,"byte_end":48294,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"LineEnding","qualname":"::line_ending::LineEnding","value":"pub enum LineEnding { CR, LF, CRLF, }","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498}],"decl_id":null,"docs":" Line endings: variants of newline characters that can be used with Base64.","sig":null,"attributes":[{"value":"/ Line endings: variants of newline characters that can be used with Base64.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":47988,"byte_end":48066,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48067,"byte_end":48070,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Use [`LineEnding::default`] to get an appropriate line ending for the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48071,"byte_end":48144,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ current operating system.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48145,"byte_end":48174,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"allow(clippy :: upper_case_acronyms)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48175,"byte_end":48212,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48861,"byte_end":48869,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<LineEnding>::as_bytes","value":"pub fn as_bytes(Self) -> &'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte serialization of this [`LineEnding`].\n","sig":null,"attributes":[{"value":"/ Get the byte serialization of this [`LineEnding`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48795,"byte_end":48849,"line_start":40,"line_end":40,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":49136,"byte_end":49139,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"len","qualname":"<LineEnding>::len","value":"pub fn len(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the encoded length of this [`LineEnding`].\n","sig":null,"attributes":[{"value":"/ Get the encoded length of this [`LineEnding`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":49074,"byte_end":49124,"line_start":49,"line_end":49,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":515},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":53068,"byte_end":53080,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Base64Bcrypt","qualname":"::variant::bcrypt::Base64Bcrypt","value":"","parent":null,"children":[],"decl_id":null,"docs":" bcrypt Base64 encoding.","sig":null,"attributes":[{"value":"/ bcrypt Base64 encoding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":52871,"byte_end":52898,"line_start":5,"line_end":5,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":52899,"byte_end":52902,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":52903,"byte_end":52914,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ ./         [A-Z]      [a-z]     [0-9]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":52915,"byte_end":52956,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/ 0x2e-0x2f, 0x41-0x5a, 0x61-0x7a, 0x30-0x39","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":52957,"byte_end":53003,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":53004,"byte_end":53011,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":528},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53812,"byte_end":53823,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"Base64Crypt","qualname":"::variant::crypt::Base64Crypt","value":"","parent":null,"children":[],"decl_id":null,"docs":" `crypt(3)` Base64 encoding.","sig":null,"attributes":[{"value":"/ `crypt(3)` Base64 encoding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53632,"byte_end":53663,"line_start":5,"line_end":5,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53664,"byte_end":53667,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53668,"byte_end":53679,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [.-9]      [A-Z]      [a-z]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53680,"byte_end":53711,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/ 0x2e-0x39, 0x41-0x5a, 0x61-0x7a","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53712,"byte_end":53747,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53748,"byte_end":53755,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":541},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54496,"byte_end":54502,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Base64","qualname":"::variant::standard::Base64","value":"","parent":null,"children":[],"decl_id":null,"docs":" Standard Base64 encoding with `=` padding.","sig":null,"attributes":[{"value":"/ Standard Base64 encoding with `=` padding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54276,"byte_end":54322,"line_start":5,"line_end":5,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54323,"byte_end":54326,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54327,"byte_end":54338,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      +     /","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54339,"byte_end":54383,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2b, 0x2f","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54384,"byte_end":54431,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54432,"byte_end":54439,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":554},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54945,"byte_end":54959,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"Base64Unpadded","qualname":"::variant::standard::Base64Unpadded","value":"","parent":null,"children":[],"decl_id":null,"docs":" Standard Base64 encoding *without* padding.","sig":null,"attributes":[{"value":"/ Standard Base64 encoding *without* padding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54724,"byte_end":54771,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54772,"byte_end":54775,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54776,"byte_end":54787,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      +     /","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54788,"byte_end":54832,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2b, 0x2f","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54833,"byte_end":54880,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54881,"byte_end":54888,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":567},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55902,"byte_end":55911,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Base64Url","qualname":"::variant::url::Base64Url","value":"","parent":null,"children":[],"decl_id":null,"docs":" URL-safe Base64 encoding with `=` padding.","sig":null,"attributes":[{"value":"/ URL-safe Base64 encoding with `=` padding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55682,"byte_end":55728,"line_start":5,"line_end":5,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55729,"byte_end":55732,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55733,"byte_end":55744,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      -     _","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55745,"byte_end":55789,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2d, 0x5f","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55790,"byte_end":55837,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55838,"byte_end":55845,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":580},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56360,"byte_end":56377,"line_start":29,"line_end":29,"column_start":12,"column_end":29},"name":"Base64UrlUnpadded","qualname":"::variant::url::Base64UrlUnpadded","value":"","parent":null,"children":[],"decl_id":null,"docs":" URL-safe Base64 encoding *without* padding.","sig":null,"attributes":[{"value":"/ URL-safe Base64 encoding *without* padding.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56139,"byte_end":56186,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56187,"byte_end":56190,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56191,"byte_end":56202,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      -     _","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56203,"byte_end":56247,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2d, 0x5f","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56248,"byte_end":56295,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56296,"byte_end":56303,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":341},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49394,"byte_end":49401,"line_start":11,"line_end":11,"column_start":11,"column_end":18},"name":"Variant","qualname":"::variant::Variant","value":"Variant: 'static + Copy + Debug + Eq + Send + Sized + Sync","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350}],"decl_id":null,"docs":" Core encoder/decoder functions for a particular Base64 variant\n","sig":null,"attributes":[{"value":"/ Core encoder/decoder functions for a particular Base64 variant","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49317,"byte_end":49383,"line_start":10,"line_end":10,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":342},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49594,"byte_end":49602,"line_start":15,"line_end":15,"column_start":10,"column_end":18},"name":"Unpadded","qualname":"::variant::Variant::Unpadded","value":"type Unpadded: Variant;","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Unpadded equivalent of this variant.","sig":null,"attributes":[{"value":"/ Unpadded equivalent of this variant.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49459,"byte_end":49499,"line_start":12,"line_end":12,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49504,"byte_end":49507,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ For variants that are unpadded to begin with, this should be `Self`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49512,"byte_end":49584,"line_start":14,"line_end":14,"column_start":5,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":343},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49657,"byte_end":49663,"line_start":18,"line_end":18,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::variant::Variant::PADDED","value":"bool","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Is this encoding padded?\n","sig":null,"attributes":[{"value":"/ Is this encoding padded?","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49618,"byte_end":49646,"line_start":17,"line_end":17,"column_start":5,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":344},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49730,"byte_end":49734,"line_start":21,"line_end":21,"column_start":11,"column_end":15},"name":"BASE","qualname":"::variant::Variant::BASE","value":"u8","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" First character in this Base64 alphabet\n","sig":null,"attributes":[{"value":"/ First character in this Base64 alphabet","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49676,"byte_end":49719,"line_start":20,"line_end":20,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":345},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49774,"byte_end":49781,"line_start":24,"line_end":24,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::variant::Variant::DECODER","value":"&'static [Decode]","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Decoder passes\n","sig":null,"attributes":[{"value":"/ Decoder passes","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49745,"byte_end":49763,"line_start":23,"line_end":23,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":346},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49836,"byte_end":49843,"line_start":27,"line_end":27,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::variant::Variant::ENCODER","value":"&'static [Encode]","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Encoder passes\n","sig":null,"attributes":[{"value":"/ Encoder passes","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49807,"byte_end":49825,"line_start":26,"line_end":26,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49938,"byte_end":49951,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"decode_3bytes","qualname":"::variant::Variant::decode_3bytes","value":"pub fn decode_3bytes(&[u8], &mut [u8]) -> i16","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Decode 3 bytes of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Decode 3 bytes of a Base64 message.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49869,"byte_end":49908,"line_start":29,"line_end":29,"column_start":5,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49913,"byte_end":49930,"line_start":30,"line_end":30,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":50515,"byte_end":50527,"line_start":48,"line_end":48,"column_start":8,"column_end":20},"name":"decode_6bits","qualname":"::variant::Variant::decode_6bits","value":"pub fn decode_6bits(u8) -> i16","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Decode 6-bits of a Base64 message\n","sig":null,"attributes":[{"value":"/ Decode 6-bits of a Base64 message","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":50470,"byte_end":50507,"line_start":47,"line_end":47,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":51353,"byte_end":51366,"line_start":72,"line_end":72,"column_start":8,"column_end":21},"name":"encode_3bytes","qualname":"::variant::Variant::encode_3bytes","value":"pub fn encode_3bytes(&[u8], &mut [u8])","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Encode 3-bytes of a Base64 message\n","sig":null,"attributes":[{"value":"/ Encode 3-bytes of a Base64 message","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":51285,"byte_end":51323,"line_start":70,"line_end":70,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":51328,"byte_end":51345,"line_start":71,"line_end":71,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":51910,"byte_end":51922,"line_start":88,"line_end":88,"column_start":8,"column_end":20},"name":"encode_6bits","qualname":"::variant::Variant::encode_6bits","value":"pub fn encode_6bits(i16) -> u8","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Encode 6-bits of a Base64 message\n","sig":null,"attributes":[{"value":"/ Encode 6-bits of a Base64 message","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":51843,"byte_end":51880,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":51885,"byte_end":51902,"line_start":87,"line_end":87,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":594},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52439,"byte_end":52444,"line_start":106,"line_end":106,"column_start":5,"column_end":10},"name":"Range","qualname":"::variant::Decode::Range","value":"Decode::Range(Range<u8>, i16)","parent":{"krate":0,"index":593},"children":[],"decl_id":null,"docs":" Match the given range, offsetting the input on match\n","sig":null,"attributes":[{"value":"/ Match the given range, offsetting the input on match","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52378,"byte_end":52434,"line_start":105,"line_end":105,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":598},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52539,"byte_end":52541,"line_start":109,"line_end":109,"column_start":5,"column_end":7},"name":"Eq","qualname":"::variant::Decode::Eq","value":"Decode::Eq(u8, i16)","parent":{"krate":0,"index":593},"children":[],"decl_id":null,"docs":" Match the given value, returning the associated offset on match\n","sig":null,"attributes":[{"value":"/ Match the given value, returning the associated offset on match","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52467,"byte_end":52534,"line_start":108,"line_end":108,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":593},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52365,"byte_end":52371,"line_start":104,"line_end":104,"column_start":10,"column_end":16},"name":"Decode","qualname":"::variant::Decode","value":"pub enum Decode { Range(Range<u8>, i16), Eq(u8, i16), }","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":598}],"decl_id":null,"docs":" Constant-time decoder step\n","sig":null,"attributes":[{"value":"/ Constant-time decoder step","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52308,"byte_end":52338,"line_start":102,"line_end":102,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":605},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52703,"byte_end":52708,"line_start":116,"line_end":116,"column_start":5,"column_end":10},"name":"Apply","qualname":"::variant::Encode::Apply","value":"Encode::Apply(u8, i16)","parent":{"krate":0,"index":604},"children":[],"decl_id":null,"docs":" Apply the given offset to the cumulative result on match\n","sig":null,"attributes":[{"value":"/ Apply the given offset to the cumulative result on match","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52638,"byte_end":52698,"line_start":115,"line_end":115,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":609},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52785,"byte_end":52789,"line_start":119,"line_end":119,"column_start":5,"column_end":9},"name":"Diff","qualname":"::variant::Encode::Diff","value":"Encode::Diff(u8, i16)","parent":{"krate":0,"index":604},"children":[],"decl_id":null,"docs":" Compute a difference using the given offset on match\n","sig":null,"attributes":[{"value":"/ Compute a difference using the given offset on match","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52724,"byte_end":52780,"line_start":118,"line_end":118,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":604},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52625,"byte_end":52631,"line_start":114,"line_end":114,"column_start":10,"column_end":16},"name":"Encode","qualname":"::variant::Encode","value":"pub enum Encode { Apply(u8, i16), Diff(u8, i16), }","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":609}],"decl_id":null,"docs":" Constant-time encoder step\n","sig":null,"attributes":[{"value":"/ Constant-time encoder step","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":52555,"byte_end":52585,"line_start":112,"line_end":112,"column_start":1,"column_end":31}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3852,"byte_end":3859,"line_start":49,"line_end":49,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":12285,"byte_end":12296,"line_start":295,"line_end":295,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":13698,"byte_end":13702,"line_start":343,"line_end":343,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":13777,"byte_end":13781,"line_start":349,"line_end":349,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":15272,"byte_end":15282,"line_start":404,"line_end":404,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":19063,"byte_end":19073,"line_start":504,"line_end":504,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23795,"byte_end":23802,"line_start":44,"line_end":44,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":29005,"byte_end":29016,"line_start":199,"line_end":199,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":30253,"byte_end":30264,"line_start":244,"line_end":244,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35771,"byte_end":35772,"line_start":54,"line_end":54,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":45871,"byte_end":45889,"line_start":12,"line_end":12,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46238,"byte_end":46258,"line_start":25,"line_end":25,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46766,"byte_end":46771,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":47070,"byte_end":47075,"line_start":54,"line_end":54,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":47214,"byte_end":47219,"line_start":61,"line_end":61,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":47356,"byte_end":47361,"line_start":68,"line_end":68,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48486,"byte_end":48496,"line_start":26,"line_end":26,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48778,"byte_end":48788,"line_start":39,"line_end":39,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":53100,"byte_end":53112,"line_start":14,"line_end":14,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53843,"byte_end":53854,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54522,"byte_end":54528,"line_start":14,"line_end":14,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54979,"byte_end":54993,"line_start":31,"line_end":31,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55931,"byte_end":55940,"line_start":14,"line_end":14,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56397,"byte_end":56414,"line_start":31,"line_end":31,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":3852,"byte_end":3859,"line_start":49,"line_end":49,"column_start":22,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":12285,"byte_end":12296,"line_start":295,"line_end":295,"column_start":6,"column_end":17},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":13698,"byte_end":13702,"line_start":343,"line_end":343,"column_start":22,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":419},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":13777,"byte_end":13781,"line_start":349,"line_end":349,"column_start":10,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":15272,"byte_end":15282,"line_start":404,"line_end":404,"column_start":10,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/decoder.rs","byte_start":19063,"byte_end":19073,"line_start":504,"line_end":504,"column_start":23,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":23795,"byte_end":23802,"line_start":44,"line_end":44,"column_start":22,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":29005,"byte_end":29016,"line_start":199,"line_end":199,"column_start":6,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoder.rs","byte_start":30253,"byte_end":30264,"line_start":244,"line_end":244,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34343,"byte_end":34347,"line_start":19,"line_end":19,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34350,"byte_end":34355,"line_start":19,"line_end":19,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":9595},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34358,"byte_end":34360,"line_start":19,"line_end":19,"column_start":46,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":2680},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34363,"byte_end":34367,"line_start":19,"line_end":19,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34370,"byte_end":34375,"line_start":19,"line_end":19,"column_start":58,"column_end":63},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":34378,"byte_end":34382,"line_start":19,"line_end":19,"column_start":66,"column_end":70},"kind":"SuperTrait","from":{"krate":1,"index":3036},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/encoding.rs","byte_start":35771,"byte_end":35772,"line_start":54,"line_end":54,"column_start":31,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":196},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":45871,"byte_end":45889,"line_start":12,"line_end":12,"column_start":23,"column_end":41},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":451},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46238,"byte_end":46258,"line_start":25,"line_end":25,"column_start":23,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":464},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":46766,"byte_end":46771,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":47070,"byte_end":47075,"line_start":54,"line_end":54,"column_start":37,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":47214,"byte_end":47219,"line_start":61,"line_end":61,"column_start":35,"column_end":40},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/errors.rs","byte_start":47356,"byte_end":47361,"line_start":68,"line_end":68,"column_start":37,"column_end":42},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48486,"byte_end":48496,"line_start":26,"line_end":26,"column_start":18,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":493},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/line_ending.rs","byte_start":48778,"byte_end":48788,"line_start":39,"line_end":39,"column_start":6,"column_end":16},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":493},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/bcrypt.rs","byte_start":53100,"byte_end":53112,"line_start":14,"line_end":14,"column_start":18,"column_end":30},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":515},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/crypt.rs","byte_start":53843,"byte_end":53854,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":528},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54522,"byte_end":54528,"line_start":14,"line_end":14,"column_start":18,"column_end":24},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":541},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/standard.rs","byte_start":54979,"byte_end":54993,"line_start":31,"line_end":31,"column_start":18,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":554},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":55931,"byte_end":55940,"line_start":14,"line_end":14,"column_start":18,"column_end":27},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":567},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant/url.rs","byte_start":56397,"byte_end":56414,"line_start":31,"line_end":31,"column_start":18,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":580},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49413,"byte_end":49417,"line_start":11,"line_end":11,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49420,"byte_end":49425,"line_start":11,"line_end":11,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":9595},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49428,"byte_end":49430,"line_start":11,"line_end":11,"column_start":45,"column_end":47},"kind":"SuperTrait","from":{"krate":1,"index":2680},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49433,"byte_end":49437,"line_start":11,"line_end":11,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49440,"byte_end":49445,"line_start":11,"line_end":11,"column_start":57,"column_end":62},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":341}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.4.0/src/variant.rs","byte_start":49448,"byte_end":49452,"line_start":11,"line_end":11,"column_start":65,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":3036},"to":{"krate":0,"index":341}}]}