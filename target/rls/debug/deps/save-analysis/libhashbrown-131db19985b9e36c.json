{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0","program":"/home/flo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hashbrown","--edition=2021","/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"ahash\"","--cfg","feature=\"default\"","--cfg","feature=\"inline-more\"","--cfg","feature=\"serde\"","-C","metadata=131db19985b9e36c","-C","extra-filename=-131db19985b9e36c","--out-dir","/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps","-L","dependency=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps","--extern","ahash=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libahash-43149a2f8aca8c13.rmeta","--extern","serde=/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libserde-455f01be4762fcfc.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/flo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/flo/Desktop/RUST/YOLO_Web_assembly_front/helloworld_web_ASSEMBLY/target/rls/debug/deps/libhashbrown-131db19985b9e36c.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[1294815225371187880,0]},"crate_root":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src","external_crates":[{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":5,"id":{"name":"serde","disambiguator":[13360854101770207451,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":6,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":7,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":8,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":9,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":10,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":12,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":13,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":14,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":15,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":16,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":17,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":18,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":19,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":20,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","num":21,"id":{"name":"serde_derive","disambiguator":[2309101786767840447,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","num":22,"id":{"name":"ahash","disambiguator":[12402817420086647699,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","num":23,"id":{"name":"once_cell","disambiguator":[8782194372562591136,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","num":24,"id":{"name":"getrandom","disambiguator":[12471611216122866821,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","num":25,"id":{"name":"cfg_if","disambiguator":[3771446270907224645,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","num":26,"id":{"name":"libc","disambiguator":[1960597585436425397,0]}}],"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":0,"byte_end":4242,"line_start":1,"line_end":148,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":2293,"byte_end":2294,"line_start":85,"line_end":85,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"HashMap","parent":{"krate":0,"index":2271}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":2848,"byte_end":2849,"line_start":102,"line_end":102,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"HashSet","parent":{"krate":0,"index":2273}},{"kind":"Use","ref_id":{"krate":0,"index":701},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3231,"byte_end":3238,"line_start":115,"line_end":115,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1860},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3260,"byte_end":3267,"line_start":116,"line_end":116,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":0,"byte_end":4242,"line_start":1,"line_end":148,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":487},{"krate":0,"index":641},{"krate":0,"index":1759},{"krate":0,"index":1788},{"krate":0,"index":2271},{"krate":0,"index":2273},{"krate":0,"index":2275},{"krate":0,"index":2278},{"krate":0,"index":2352},{"krate":0,"index":2357},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2366}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"/ This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ and `HashSet` types.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nmust_use_candidate, clippy :: option_if_let_else, clippy :: redundant_else,\nclippy :: manual_map)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":899,"byte_end":1089,"line_start":28,"line_end":35,"column_start":1,"column_end":3}},{"value":"warn(missing_docs)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":1090,"byte_end":1112,"line_start":36,"line_end":36,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":1113,"byte_end":1139,"line_start":37,"line_end":37,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94341,"byte_end":94350,"line_start":37,"line_end":37,"column_start":22,"column_end":31},"name":"Allocator","qualname":"::raw::alloc::inner::Allocator","value":"Allocator","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94246,"byte_end":94282,"line_start":36,"line_end":36,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94364,"byte_end":94372,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"allocate","qualname":"::raw::alloc::inner::Allocator::allocate","value":"pub fn allocate(&Self, Layout) -> Result<NonNull<u8>, ()>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94442,"byte_end":94452,"line_start":39,"line_end":39,"column_start":19,"column_end":29},"name":"deallocate","qualname":"::raw::alloc::inner::Allocator::deallocate","value":"pub unsafe fn deallocate(&Self, NonNull<u8>, Layout)","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2325},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94544,"byte_end":94550,"line_start":43,"line_end":43,"column_start":16,"column_end":22},"name":"Global","qualname":"::raw::alloc::inner::Global","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":700},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106010,"byte_end":106028,"line_start":13,"line_end":13,"column_start":10,"column_end":28},"name":"DefaultHashBuilder","qualname":"::map::DefaultHashBuilder","value":"ahash::RandomState","parent":null,"children":[],"decl_id":null,"docs":" Default hasher for `HashMap`.\n","sig":null,"attributes":[{"value":"/ Default hasher for `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":105941,"byte_end":105974,"line_start":11,"line_end":11,"column_start":1,"column_end":34}},{"value":"cfg(feature = \"ahash\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":105975,"byte_end":106000,"line_start":12,"line_end":12,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":701},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112421,"byte_end":112428,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106155,"byte_end":106221,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106222,"byte_end":106225,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently [`AHash`], though this is","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106226,"byte_end":106298,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106299,"byte_end":106375,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106376,"byte_end":106455,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106456,"byte_end":106492,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106493,"byte_end":106496,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106497,"byte_end":106573,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106574,"byte_end":106654,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106655,"byte_end":106736,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106737,"byte_end":106740,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106741,"byte_end":106824,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106825,"byte_end":106903,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106904,"byte_end":106975,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106976,"byte_end":106995,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":106996,"byte_end":106999,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107000,"byte_end":107011,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107012,"byte_end":107048,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107049,"byte_end":107056,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107057,"byte_end":107060,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107061,"byte_end":107131,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107132,"byte_end":107135,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107136,"byte_end":107213,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107214,"byte_end":107294,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107295,"byte_end":107370,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107371,"byte_end":107449,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107450,"byte_end":107453,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107454,"byte_end":107533,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107534,"byte_end":107612,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107613,"byte_end":107693,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107694,"byte_end":107739,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107740,"byte_end":107743,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107744,"byte_end":107758,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107759,"byte_end":107762,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107763,"byte_end":107770,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107771,"byte_end":107798,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107799,"byte_end":107802,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107803,"byte_end":107871,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107872,"byte_end":107931,"line_start":57,"line_end":57,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107932,"byte_end":107974,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107975,"byte_end":107978,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":107979,"byte_end":108004,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108005,"byte_end":108029,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108030,"byte_end":108083,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108084,"byte_end":108124,"line_start":63,"line_end":63,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108125,"byte_end":108131,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108132,"byte_end":108156,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108157,"byte_end":108199,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108200,"byte_end":108235,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108236,"byte_end":108242,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108243,"byte_end":108267,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108268,"byte_end":108310,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108311,"byte_end":108349,"line_start":71,"line_end":71,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108350,"byte_end":108356,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108357,"byte_end":108381,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108382,"byte_end":108438,"line_start":74,"line_end":74,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108439,"byte_end":108480,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108481,"byte_end":108487,"line_start":76,"line_end":76,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108488,"byte_end":108491,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108492,"byte_end":108524,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108525,"byte_end":108595,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108596,"byte_end":108635,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108636,"byte_end":108690,"line_start":81,"line_end":81,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108691,"byte_end":108763,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108764,"byte_end":108801,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108802,"byte_end":108807,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108808,"byte_end":108811,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108812,"byte_end":108885,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108886,"byte_end":108947,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108948,"byte_end":108951,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":108952,"byte_end":109004,"line_start":89,"line_end":89,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109005,"byte_end":109082,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109083,"byte_end":109110,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109111,"byte_end":109149,"line_start":92,"line_end":92,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109150,"byte_end":109211,"line_start":93,"line_end":93,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109212,"byte_end":109267,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109268,"byte_end":109277,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109278,"byte_end":109283,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109284,"byte_end":109287,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109288,"byte_end":109360,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109361,"byte_end":109434,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109435,"byte_end":109438,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109439,"byte_end":109470,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109471,"byte_end":109512,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109513,"byte_end":109558,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109559,"byte_end":109564,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109565,"byte_end":109572,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109573,"byte_end":109576,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109577,"byte_end":109652,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109653,"byte_end":109733,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109734,"byte_end":109751,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109752,"byte_end":109755,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109756,"byte_end":109763,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109764,"byte_end":109791,"line_start":112,"line_end":112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109792,"byte_end":109795,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109796,"byte_end":109864,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109865,"byte_end":109918,"line_start":115,"line_end":115,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109919,"byte_end":109961,"line_start":116,"line_end":116,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109962,"byte_end":109965,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":109966,"byte_end":109999,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110000,"byte_end":110075,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110076,"byte_end":110111,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110112,"byte_end":110122,"line_start":121,"line_end":121,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110123,"byte_end":110128,"line_start":122,"line_end":122,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110129,"byte_end":110132,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110133,"byte_end":110185,"line_start":124,"line_end":124,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110186,"byte_end":110234,"line_start":125,"line_end":125,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110235,"byte_end":110238,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110239,"byte_end":110312,"line_start":127,"line_end":127,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110313,"byte_end":110341,"line_start":128,"line_end":128,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110342,"byte_end":110409,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110410,"byte_end":110413,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110414,"byte_end":110482,"line_start":131,"line_end":131,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110483,"byte_end":110542,"line_start":132,"line_end":132,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110543,"byte_end":110575,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110576,"byte_end":110583,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110584,"byte_end":110587,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110588,"byte_end":110681,"line_start":136,"line_end":136,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110682,"byte_end":110720,"line_start":137,"line_end":137,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110721,"byte_end":110724,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110725,"byte_end":110784,"line_start":139,"line_end":139,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110785,"byte_end":110849,"line_start":140,"line_end":140,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110850,"byte_end":110923,"line_start":141,"line_end":141,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110924,"byte_end":110995,"line_start":142,"line_end":142,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":110996,"byte_end":111061,"line_start":143,"line_end":143,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111062,"byte_end":111094,"line_start":144,"line_end":144,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111095,"byte_end":111135,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111136,"byte_end":111202,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111203,"byte_end":111244,"line_start":147,"line_end":147,"column_start":1,"column_end":42}},{"value":"/ [`AHash`]: https://crates.io/crates/ahash","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111245,"byte_end":111290,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111291,"byte_end":111294,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111295,"byte_end":111302,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111303,"byte_end":111330,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111331,"byte_end":111334,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111335,"byte_end":111376,"line_start":153,"line_end":153,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111377,"byte_end":111396,"line_start":154,"line_end":154,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111397,"byte_end":111418,"line_start":155,"line_end":155,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111419,"byte_end":111443,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111444,"byte_end":111449,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111450,"byte_end":111453,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111454,"byte_end":111471,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111472,"byte_end":111505,"line_start":160,"line_end":160,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111506,"byte_end":111559,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111560,"byte_end":111635,"line_start":162,"line_end":162,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111636,"byte_end":111645,"line_start":163,"line_end":163,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111646,"byte_end":111651,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111652,"byte_end":111655,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111656,"byte_end":111713,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111714,"byte_end":111751,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111752,"byte_end":111755,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111756,"byte_end":111811,"line_start":169,"line_end":169,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111812,"byte_end":111867,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111868,"byte_end":111925,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111926,"byte_end":111929,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":111930,"byte_end":111999,"line_start":173,"line_end":173,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112000,"byte_end":112038,"line_start":174,"line_end":174,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112039,"byte_end":112090,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112091,"byte_end":112096,"line_start":176,"line_end":176,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112097,"byte_end":112104,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112105,"byte_end":112108,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112109,"byte_end":112186,"line_start":179,"line_end":179,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112187,"byte_end":112190,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112191,"byte_end":112198,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112199,"byte_end":112226,"line_start":182,"line_end":182,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112227,"byte_end":112230,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112231,"byte_end":112329,"line_start":184,"line_end":184,"column_start":1,"column_end":99}},{"value":"/     .iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112330,"byte_end":112365,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"/ // use the values stored in map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112366,"byte_end":112401,"line_start":186,"line_end":186,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112402,"byte_end":112409,"line_start":187,"line_end":187,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115749,"byte_end":115752,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"new","qualname":"<HashMap<K, V, DefaultHashBuilder>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115371,"byte_end":115402,"line_start":293,"line_end":293,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115407,"byte_end":115410,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ The hash map is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115415,"byte_end":115507,"line_start":295,"line_end":295,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115512,"byte_end":115539,"line_start":296,"line_end":296,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115544,"byte_end":115547,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115552,"byte_end":115566,"line_start":298,"line_end":298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115571,"byte_end":115574,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115579,"byte_end":115586,"line_start":300,"line_end":300,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115591,"byte_end":115618,"line_start":301,"line_end":301,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115623,"byte_end":115676,"line_start":302,"line_end":302,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115681,"byte_end":115688,"line_start":303,"line_end":303,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115729,"byte_end":115735,"line_start":304,"line_end":304,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116242,"byte_end":116255,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashMap<K, V, DefaultHashBuilder>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115800,"byte_end":115859,"line_start":309,"line_end":309,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115864,"byte_end":115867,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115872,"byte_end":115946,"line_start":311,"line_end":311,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115951,"byte_end":116020,"line_start":312,"line_end":312,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116025,"byte_end":116028,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116033,"byte_end":116047,"line_start":314,"line_end":314,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116052,"byte_end":116055,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116060,"byte_end":116067,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116072,"byte_end":116099,"line_start":317,"line_end":317,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116104,"byte_end":116169,"line_start":318,"line_end":318,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116174,"byte_end":116181,"line_start":319,"line_end":319,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116222,"byte_end":116228,"line_start":320,"line_end":320,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116729,"byte_end":116735,"line_start":333,"line_end":333,"column_start":12,"column_end":18},"name":"new_in","qualname":"<HashMap<K, V, DefaultHashBuilder, A>>::new_in","value":"pub fn new_in(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` using the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` using the given allocator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116474,"byte_end":116531,"line_start":328,"line_end":328,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116536,"byte_end":116539,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ The hash map is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116544,"byte_end":116636,"line_start":330,"line_end":330,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116641,"byte_end":116668,"line_start":331,"line_end":331,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116709,"byte_end":116715,"line_start":332,"line_end":332,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117141,"byte_end":117157,"line_start":342,"line_end":342,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<HashMap<K, V, DefaultHashBuilder, A>>::with_capacity_in","value":"pub fn with_capacity_in(usize, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity using the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity using the given allocator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116834,"byte_end":116919,"line_start":337,"line_end":337,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116924,"byte_end":116927,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116932,"byte_end":117006,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117011,"byte_end":117080,"line_start":340,"line_end":340,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117121,"byte_end":117127,"line_start":341,"line_end":341,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118338,"byte_end":118349,"line_start":374,"line_end":374,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117331,"byte_end":117407,"line_start":348,"line_end":348,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117412,"byte_end":117421,"line_start":349,"line_end":349,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117426,"byte_end":117429,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117434,"byte_end":117487,"line_start":351,"line_end":351,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117492,"byte_end":117495,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117500,"byte_end":117563,"line_start":353,"line_end":353,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117568,"byte_end":117633,"line_start":354,"line_end":354,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117638,"byte_end":117701,"line_start":355,"line_end":355,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117706,"byte_end":117770,"line_start":356,"line_end":356,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117775,"byte_end":117778,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117783,"byte_end":117859,"line_start":358,"line_end":358,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117864,"byte_end":117928,"line_start":359,"line_end":359,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117933,"byte_end":117936,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117941,"byte_end":117955,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117960,"byte_end":117963,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117968,"byte_end":117975,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117980,"byte_end":118007,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118012,"byte_end":118060,"line_start":365,"line_end":365,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118065,"byte_end":118068,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118073,"byte_end":118115,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118120,"byte_end":118162,"line_start":368,"line_end":368,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118167,"byte_end":118188,"line_start":369,"line_end":369,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118193,"byte_end":118200,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118205,"byte_end":118208,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118213,"byte_end":118271,"line_start":372,"line_end":372,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118312,"byte_end":118318,"line_start":373,"line_end":373,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119604,"byte_end":119628,"line_start":408,"line_end":408,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118475,"byte_end":118555,"line_start":381,"line_end":381,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118560,"byte_end":118581,"line_start":382,"line_end":382,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118586,"byte_end":118589,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118594,"byte_end":118668,"line_start":384,"line_end":384,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118673,"byte_end":118742,"line_start":385,"line_end":385,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118747,"byte_end":118750,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118755,"byte_end":118818,"line_start":387,"line_end":387,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118823,"byte_end":118888,"line_start":388,"line_end":388,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118893,"byte_end":118956,"line_start":389,"line_end":389,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":118961,"byte_end":119025,"line_start":390,"line_end":390,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119030,"byte_end":119033,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119038,"byte_end":119114,"line_start":392,"line_end":392,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119119,"byte_end":119183,"line_start":393,"line_end":393,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119188,"byte_end":119191,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119196,"byte_end":119210,"line_start":395,"line_end":395,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119215,"byte_end":119218,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119223,"byte_end":119230,"line_start":397,"line_end":397,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119235,"byte_end":119262,"line_start":398,"line_end":398,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119267,"byte_end":119315,"line_start":399,"line_end":399,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119320,"byte_end":119323,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119328,"byte_end":119370,"line_start":401,"line_end":401,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119375,"byte_end":119434,"line_start":402,"line_end":402,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119439,"byte_end":119460,"line_start":403,"line_end":403,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119465,"byte_end":119472,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119477,"byte_end":119480,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119485,"byte_end":119543,"line_start":406,"line_end":406,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119584,"byte_end":119590,"line_start":407,"line_end":407,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119927,"byte_end":119936,"line_start":419,"line_end":419,"column_start":12,"column_end":21},"name":"allocator","qualname":"<HashMap<K, V, S, A>>::allocator","value":"pub fn allocator(&Self) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying allocator.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying allocator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119849,"byte_end":119901,"line_start":417,"line_end":417,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119906,"byte_end":119915,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120813,"byte_end":120827,"line_start":444,"line_end":444,"column_start":12,"column_end":26},"name":"with_hasher_in","qualname":"<HashMap<K, V, S, A>>::with_hasher_in","value":"pub fn with_hasher_in(S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys. It will be allocated with the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119994,"byte_end":120070,"line_start":423,"line_end":423,"column_start":5,"column_end":81}},{"value":"/ keys. It will be allocated with the given allocator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120075,"byte_end":120131,"line_start":424,"line_end":424,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120136,"byte_end":120139,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120144,"byte_end":120197,"line_start":426,"line_end":426,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120202,"byte_end":120205,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120210,"byte_end":120273,"line_start":428,"line_end":428,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120278,"byte_end":120343,"line_start":429,"line_end":429,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120348,"byte_end":120411,"line_start":430,"line_end":430,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120416,"byte_end":120480,"line_start":431,"line_end":431,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120485,"byte_end":120488,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120493,"byte_end":120507,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120512,"byte_end":120515,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120520,"byte_end":120527,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120532,"byte_end":120559,"line_start":436,"line_end":436,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120564,"byte_end":120612,"line_start":437,"line_end":437,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120617,"byte_end":120620,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120625,"byte_end":120667,"line_start":439,"line_end":439,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120672,"byte_end":120714,"line_start":440,"line_end":440,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120719,"byte_end":120740,"line_start":441,"line_end":441,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120745,"byte_end":120752,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120793,"byte_end":120799,"line_start":443,"line_end":443,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121918,"byte_end":121945,"line_start":473,"line_end":473,"column_start":12,"column_end":39},"name":"with_capacity_and_hasher_in","qualname":"<HashMap<K, V, S, A>>::with_capacity_and_hasher_in","value":"pub fn with_capacity_and_hasher_in(usize, S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys. It will be allocated with the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":120971,"byte_end":121051,"line_start":451,"line_end":451,"column_start":5,"column_end":85}},{"value":"/ to hash the keys. It will be allocated with the given allocator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121056,"byte_end":121124,"line_start":452,"line_end":452,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121129,"byte_end":121132,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121137,"byte_end":121211,"line_start":454,"line_end":454,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121216,"byte_end":121285,"line_start":455,"line_end":455,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121290,"byte_end":121293,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121298,"byte_end":121361,"line_start":457,"line_end":457,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121366,"byte_end":121431,"line_start":458,"line_end":458,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121436,"byte_end":121499,"line_start":459,"line_end":459,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121504,"byte_end":121568,"line_start":460,"line_end":460,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121573,"byte_end":121576,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121581,"byte_end":121595,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121600,"byte_end":121603,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121608,"byte_end":121615,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121620,"byte_end":121647,"line_start":465,"line_end":465,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121652,"byte_end":121700,"line_start":466,"line_end":466,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121705,"byte_end":121708,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121713,"byte_end":121755,"line_start":468,"line_end":468,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121760,"byte_end":121819,"line_start":469,"line_end":469,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121824,"byte_end":121845,"line_start":470,"line_end":470,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121850,"byte_end":121857,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":121898,"byte_end":121904,"line_start":472,"line_end":472,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122658,"byte_end":122664,"line_start":495,"line_end":495,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S, A>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122126,"byte_end":122179,"line_start":480,"line_end":480,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122184,"byte_end":122187,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122192,"byte_end":122270,"line_start":482,"line_end":482,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122275,"byte_end":122278,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122283,"byte_end":122297,"line_start":484,"line_end":484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122302,"byte_end":122305,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122310,"byte_end":122317,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122322,"byte_end":122349,"line_start":487,"line_end":487,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122354,"byte_end":122402,"line_start":488,"line_end":488,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122407,"byte_end":122410,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122415,"byte_end":122462,"line_start":490,"line_end":490,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122467,"byte_end":122529,"line_start":491,"line_end":491,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122534,"byte_end":122585,"line_start":492,"line_end":492,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122590,"byte_end":122597,"line_start":493,"line_end":493,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122638,"byte_end":122644,"line_start":494,"line_end":494,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123208,"byte_end":123216,"line_start":512,"line_end":512,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122718,"byte_end":122791,"line_start":499,"line_end":499,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122796,"byte_end":122799,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122804,"byte_end":122879,"line_start":501,"line_end":501,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122884,"byte_end":122950,"line_start":502,"line_end":502,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122955,"byte_end":122958,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122963,"byte_end":122977,"line_start":504,"line_end":504,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122982,"byte_end":122985,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":122990,"byte_end":122997,"line_start":506,"line_end":506,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123002,"byte_end":123029,"line_start":507,"line_end":507,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123034,"byte_end":123095,"line_start":508,"line_end":508,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123100,"byte_end":123135,"line_start":509,"line_end":509,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123140,"byte_end":123147,"line_start":510,"line_end":510,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123188,"byte_end":123194,"line_start":511,"line_end":511,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123740,"byte_end":123744,"line_start":534,"line_end":534,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S, A>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123276,"byte_end":123329,"line_start":516,"line_end":516,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123334,"byte_end":123375,"line_start":517,"line_end":517,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123380,"byte_end":123383,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123388,"byte_end":123402,"line_start":519,"line_end":519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123407,"byte_end":123410,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123415,"byte_end":123422,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123427,"byte_end":123454,"line_start":522,"line_end":522,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123459,"byte_end":123462,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123467,"byte_end":123500,"line_start":524,"line_end":524,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123505,"byte_end":123528,"line_start":525,"line_end":525,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123533,"byte_end":123556,"line_start":526,"line_end":526,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123561,"byte_end":123584,"line_start":527,"line_end":527,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123589,"byte_end":123592,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123597,"byte_end":123624,"line_start":529,"line_end":529,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123629,"byte_end":123657,"line_start":530,"line_end":530,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123662,"byte_end":123667,"line_start":531,"line_end":531,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123672,"byte_end":123679,"line_start":532,"line_end":532,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123720,"byte_end":123726,"line_start":533,"line_end":533,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124287,"byte_end":124293,"line_start":556,"line_end":556,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S, A>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123819,"byte_end":123874,"line_start":538,"line_end":538,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123879,"byte_end":123920,"line_start":539,"line_end":539,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123925,"byte_end":123928,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123933,"byte_end":123947,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123952,"byte_end":123955,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123960,"byte_end":123967,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":123972,"byte_end":123999,"line_start":544,"line_end":544,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124004,"byte_end":124007,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124012,"byte_end":124045,"line_start":546,"line_end":546,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124050,"byte_end":124073,"line_start":547,"line_end":547,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124078,"byte_end":124101,"line_start":548,"line_end":548,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124106,"byte_end":124129,"line_start":549,"line_end":549,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124134,"byte_end":124137,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124142,"byte_end":124171,"line_start":551,"line_end":551,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124176,"byte_end":124204,"line_start":552,"line_end":552,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124209,"byte_end":124214,"line_start":553,"line_end":553,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124219,"byte_end":124226,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124267,"byte_end":124273,"line_start":555,"line_end":555,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124946,"byte_end":124956,"line_start":583,"line_end":583,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S, A>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124372,"byte_end":124435,"line_start":560,"line_end":560,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124440,"byte_end":124485,"line_start":561,"line_end":561,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124490,"byte_end":124493,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124498,"byte_end":124512,"line_start":563,"line_end":563,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124517,"byte_end":124520,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124525,"byte_end":124532,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124537,"byte_end":124564,"line_start":566,"line_end":566,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124569,"byte_end":124572,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124577,"byte_end":124610,"line_start":568,"line_end":568,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124615,"byte_end":124618,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124623,"byte_end":124646,"line_start":570,"line_end":570,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124651,"byte_end":124674,"line_start":571,"line_end":571,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124679,"byte_end":124702,"line_start":572,"line_end":572,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124707,"byte_end":124710,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124715,"byte_end":124748,"line_start":574,"line_end":574,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124753,"byte_end":124778,"line_start":575,"line_end":575,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124783,"byte_end":124788,"line_start":576,"line_end":576,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124793,"byte_end":124796,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124801,"byte_end":124830,"line_start":578,"line_end":578,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124835,"byte_end":124863,"line_start":579,"line_end":579,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124868,"byte_end":124873,"line_start":580,"line_end":580,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124878,"byte_end":124885,"line_start":581,"line_end":581,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":124926,"byte_end":124932,"line_start":582,"line_end":582,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125579,"byte_end":125583,"line_start":607,"line_end":607,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S, A>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125070,"byte_end":125134,"line_start":589,"line_end":589,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125139,"byte_end":125189,"line_start":590,"line_end":590,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125194,"byte_end":125197,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125202,"byte_end":125216,"line_start":592,"line_end":592,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125221,"byte_end":125224,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125229,"byte_end":125236,"line_start":594,"line_end":594,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125241,"byte_end":125268,"line_start":595,"line_end":595,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125273,"byte_end":125276,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125281,"byte_end":125314,"line_start":597,"line_end":597,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125319,"byte_end":125342,"line_start":598,"line_end":598,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125347,"byte_end":125370,"line_start":599,"line_end":599,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125375,"byte_end":125398,"line_start":600,"line_end":600,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125403,"byte_end":125406,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125411,"byte_end":125445,"line_start":602,"line_end":602,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125450,"byte_end":125496,"line_start":603,"line_end":603,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125501,"byte_end":125506,"line_start":604,"line_end":604,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125511,"byte_end":125518,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125559,"byte_end":125565,"line_start":606,"line_end":606,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126483,"byte_end":126491,"line_start":641,"line_end":641,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S, A>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125818,"byte_end":125882,"line_start":617,"line_end":617,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125887,"byte_end":125929,"line_start":618,"line_end":618,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125934,"byte_end":125988,"line_start":619,"line_end":619,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":125993,"byte_end":125996,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126001,"byte_end":126015,"line_start":621,"line_end":621,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126020,"byte_end":126023,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126028,"byte_end":126035,"line_start":623,"line_end":623,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126040,"byte_end":126067,"line_start":624,"line_end":624,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126072,"byte_end":126075,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126080,"byte_end":126113,"line_start":626,"line_end":626,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126118,"byte_end":126141,"line_start":627,"line_end":627,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126146,"byte_end":126169,"line_start":628,"line_end":628,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126174,"byte_end":126197,"line_start":629,"line_end":629,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126202,"byte_end":126205,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126210,"byte_end":126234,"line_start":631,"line_end":631,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126239,"byte_end":126275,"line_start":632,"line_end":632,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126280,"byte_end":126298,"line_start":633,"line_end":633,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126303,"byte_end":126308,"line_start":634,"line_end":634,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126313,"byte_end":126316,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126321,"byte_end":126349,"line_start":636,"line_end":636,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126354,"byte_end":126400,"line_start":637,"line_end":637,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126405,"byte_end":126410,"line_start":638,"line_end":638,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126415,"byte_end":126422,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126463,"byte_end":126469,"line_start":640,"line_end":640,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127208,"byte_end":127211,"line_start":670,"line_end":670,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126876,"byte_end":126922,"line_start":657,"line_end":657,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126927,"byte_end":126930,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126935,"byte_end":126949,"line_start":659,"line_end":659,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126954,"byte_end":126957,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126962,"byte_end":126969,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":126974,"byte_end":127001,"line_start":662,"line_end":662,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127006,"byte_end":127009,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127014,"byte_end":127045,"line_start":664,"line_end":664,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127050,"byte_end":127077,"line_start":665,"line_end":665,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127082,"byte_end":127103,"line_start":666,"line_end":666,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127108,"byte_end":127135,"line_start":667,"line_end":667,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127140,"byte_end":127147,"line_start":668,"line_end":668,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127188,"byte_end":127194,"line_start":669,"line_end":669,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127602,"byte_end":127610,"line_start":687,"line_end":687,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127266,"byte_end":127317,"line_start":674,"line_end":674,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127322,"byte_end":127325,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127330,"byte_end":127344,"line_start":676,"line_end":676,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127349,"byte_end":127352,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127357,"byte_end":127364,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127369,"byte_end":127396,"line_start":679,"line_end":679,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127401,"byte_end":127404,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127409,"byte_end":127440,"line_start":681,"line_end":681,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127445,"byte_end":127471,"line_start":682,"line_end":682,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127476,"byte_end":127497,"line_start":683,"line_end":683,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127502,"byte_end":127529,"line_start":684,"line_end":684,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127534,"byte_end":127541,"line_start":685,"line_end":685,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127582,"byte_end":127588,"line_start":686,"line_end":686,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128203,"byte_end":128208,"line_start":711,"line_end":711,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S, A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, K, V, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127663,"byte_end":127738,"line_start":691,"line_end":691,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127743,"byte_end":127774,"line_start":692,"line_end":692,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127779,"byte_end":127782,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127787,"byte_end":127801,"line_start":694,"line_end":694,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127806,"byte_end":127809,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127814,"byte_end":127821,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127826,"byte_end":127853,"line_start":697,"line_end":697,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127858,"byte_end":127861,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127866,"byte_end":127897,"line_start":699,"line_end":699,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127902,"byte_end":127923,"line_start":700,"line_end":700,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127928,"byte_end":127949,"line_start":701,"line_end":701,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127954,"byte_end":127957,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":127962,"byte_end":127999,"line_start":703,"line_end":703,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128004,"byte_end":128038,"line_start":704,"line_end":704,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128043,"byte_end":128081,"line_start":705,"line_end":705,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128086,"byte_end":128091,"line_start":706,"line_end":706,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128096,"byte_end":128099,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128104,"byte_end":128130,"line_start":708,"line_end":708,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128135,"byte_end":128142,"line_start":709,"line_end":709,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128183,"byte_end":128189,"line_start":710,"line_end":710,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128739,"byte_end":128745,"line_start":730,"line_end":730,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S, A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128320,"byte_end":128377,"line_start":717,"line_end":717,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128382,"byte_end":128385,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128390,"byte_end":128477,"line_start":719,"line_end":719,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128482,"byte_end":128485,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128490,"byte_end":128504,"line_start":721,"line_end":721,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128509,"byte_end":128512,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128517,"byte_end":128524,"line_start":723,"line_end":723,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128529,"byte_end":128556,"line_start":724,"line_end":724,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128561,"byte_end":128564,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128569,"byte_end":128641,"line_start":726,"line_end":726,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128646,"byte_end":128681,"line_start":727,"line_end":727,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128686,"byte_end":128715,"line_start":728,"line_end":728,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":128720,"byte_end":128727,"line_start":729,"line_end":729,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130161,"byte_end":130173,"line_start":771,"line_end":771,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashMap<K, V, S, A>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, K, V, F, A> where\nF: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are true under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are true under the given predicate,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129162,"byte_end":129223,"line_start":745,"line_end":745,"column_start":5,"column_end":66}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129228,"byte_end":129279,"line_start":746,"line_end":746,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129284,"byte_end":129287,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ In other words, move all pairs `(k, v)` such that `f(&k,&mut v)` returns `true` out","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129292,"byte_end":129379,"line_start":748,"line_end":748,"column_start":5,"column_end":92}},{"value":"/ into another iterator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129384,"byte_end":129410,"line_start":749,"line_end":749,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129415,"byte_end":129418,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, any remaining elements that satisfy","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129423,"byte_end":129506,"line_start":751,"line_end":751,"column_start":5,"column_end":88}},{"value":"/ the predicate are dropped from the table.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129511,"byte_end":129556,"line_start":752,"line_end":752,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129561,"byte_end":129564,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129569,"byte_end":129583,"line_start":754,"line_end":754,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129588,"byte_end":129591,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129596,"byte_end":129603,"line_start":756,"line_end":756,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129608,"byte_end":129635,"line_start":757,"line_end":757,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129640,"byte_end":129643,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129648,"byte_end":129718,"line_start":759,"line_end":759,"column_start":5,"column_end":75}},{"value":"/ let drained: HashMap<i32, i32> = map.drain_filter(|k, _v| k % 2 == 0).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129723,"byte_end":129807,"line_start":760,"line_end":760,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129812,"byte_end":129815,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ let mut evens = drained.keys().cloned().collect::<Vec<_>>();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129820,"byte_end":129884,"line_start":762,"line_end":762,"column_start":5,"column_end":69}},{"value":"/ let mut odds = map.keys().cloned().collect::<Vec<_>>();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129889,"byte_end":129948,"line_start":763,"line_end":763,"column_start":5,"column_end":64}},{"value":"/ evens.sort();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129953,"byte_end":129970,"line_start":764,"line_end":764,"column_start":5,"column_end":22}},{"value":"/ odds.sort();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129975,"byte_end":129991,"line_start":765,"line_end":765,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":129996,"byte_end":129999,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![0, 2, 4, 6]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130004,"byte_end":130044,"line_start":767,"line_end":767,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 7]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130049,"byte_end":130088,"line_start":768,"line_end":768,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130093,"byte_end":130100,"line_start":769,"line_end":769,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130141,"byte_end":130147,"line_start":770,"line_end":770,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130849,"byte_end":130854,"line_start":798,"line_end":798,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130482,"byte_end":130558,"line_start":784,"line_end":784,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130563,"byte_end":130577,"line_start":785,"line_end":785,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130582,"byte_end":130585,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130590,"byte_end":130604,"line_start":787,"line_end":787,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130609,"byte_end":130612,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130617,"byte_end":130624,"line_start":789,"line_end":789,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130629,"byte_end":130656,"line_start":790,"line_end":790,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130661,"byte_end":130664,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130669,"byte_end":130700,"line_start":792,"line_end":792,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130705,"byte_end":130726,"line_start":793,"line_end":793,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130731,"byte_end":130745,"line_start":794,"line_end":794,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130750,"byte_end":130776,"line_start":795,"line_end":795,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130781,"byte_end":130788,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130829,"byte_end":130835,"line_start":797,"line_end":797,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131385,"byte_end":131394,"line_start":819,"line_end":819,"column_start":12,"column_end":21},"name":"into_keys","qualname":"<HashMap<K, V, S, A>>::into_keys","value":"pub fn into_keys(Self) -> IntoKeys<K, V, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a consuming iterator visiting all the keys in arbitrary order.\n The map cannot be used after calling this.\n The iterator element type is `K`.","sig":null,"attributes":[{"value":"/ Creates a consuming iterator visiting all the keys in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130907,"byte_end":130981,"line_start":802,"line_end":802,"column_start":5,"column_end":79}},{"value":"/ The map cannot be used after calling this.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":130986,"byte_end":131032,"line_start":803,"line_end":803,"column_start":5,"column_end":51}},{"value":"/ The iterator element type is `K`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131037,"byte_end":131074,"line_start":804,"line_end":804,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131079,"byte_end":131082,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131087,"byte_end":131101,"line_start":806,"line_end":806,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131106,"byte_end":131109,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131114,"byte_end":131121,"line_start":808,"line_end":808,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131126,"byte_end":131153,"line_start":809,"line_end":809,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131158,"byte_end":131161,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131166,"byte_end":131199,"line_start":811,"line_end":811,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131204,"byte_end":131227,"line_start":812,"line_end":812,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131232,"byte_end":131255,"line_start":813,"line_end":813,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131260,"byte_end":131283,"line_start":814,"line_end":814,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131288,"byte_end":131291,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<&str> = map.into_keys().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131296,"byte_end":131347,"line_start":816,"line_end":816,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131352,"byte_end":131359,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131364,"byte_end":131373,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131982,"byte_end":131993,"line_start":842,"line_end":842,"column_start":12,"column_end":23},"name":"into_values","qualname":"<HashMap<K, V, S, A>>::into_values","value":"pub fn into_values(Self) -> IntoValues<K, V, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a consuming iterator visiting all the values in arbitrary order.\n The map cannot be used after calling this.\n The iterator element type is `V`.","sig":null,"attributes":[{"value":"/ Creates a consuming iterator visiting all the values in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131501,"byte_end":131577,"line_start":825,"line_end":825,"column_start":5,"column_end":81}},{"value":"/ The map cannot be used after calling this.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131582,"byte_end":131628,"line_start":826,"line_end":826,"column_start":5,"column_end":51}},{"value":"/ The iterator element type is `V`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131633,"byte_end":131670,"line_start":827,"line_end":827,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131675,"byte_end":131678,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131683,"byte_end":131697,"line_start":829,"line_end":829,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131702,"byte_end":131705,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131710,"byte_end":131717,"line_start":831,"line_end":831,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131722,"byte_end":131749,"line_start":832,"line_end":832,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131754,"byte_end":131757,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131762,"byte_end":131795,"line_start":834,"line_end":834,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131800,"byte_end":131823,"line_start":835,"line_end":835,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131828,"byte_end":131851,"line_start":836,"line_end":836,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131856,"byte_end":131879,"line_start":837,"line_end":837,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131884,"byte_end":131887,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<i32> = map.into_values().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131892,"byte_end":131944,"line_start":839,"line_end":839,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131949,"byte_end":131956,"line_start":840,"line_end":840,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":131961,"byte_end":131970,"line_start":841,"line_end":841,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132805,"byte_end":132812,"line_start":873,"line_end":873,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S, A>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132215,"byte_end":132291,"line_start":855,"line_end":855,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132296,"byte_end":132364,"line_start":856,"line_end":856,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132369,"byte_end":132396,"line_start":857,"line_end":857,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132401,"byte_end":132404,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132409,"byte_end":132421,"line_start":859,"line_end":859,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132426,"byte_end":132429,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132434,"byte_end":132492,"line_start":861,"line_end":861,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132497,"byte_end":132500,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132505,"byte_end":132570,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132575,"byte_end":132578,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132583,"byte_end":132597,"line_start":865,"line_end":865,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132602,"byte_end":132605,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132610,"byte_end":132617,"line_start":867,"line_end":867,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132622,"byte_end":132649,"line_start":868,"line_end":868,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132654,"byte_end":132707,"line_start":869,"line_end":869,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132712,"byte_end":132732,"line_start":870,"line_end":870,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132737,"byte_end":132744,"line_start":871,"line_end":871,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132785,"byte_end":132791,"line_start":872,"line_end":872,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133590,"byte_end":133601,"line_start":895,"line_end":895,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S, A>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132956,"byte_end":133040,"line_start":878,"line_end":878,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133045,"byte_end":133124,"line_start":879,"line_end":879,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133129,"byte_end":133156,"line_start":880,"line_end":880,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133161,"byte_end":133164,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133169,"byte_end":133181,"line_start":882,"line_end":882,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133186,"byte_end":133189,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133194,"byte_end":133274,"line_start":884,"line_end":884,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133279,"byte_end":133295,"line_start":885,"line_end":885,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133300,"byte_end":133303,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133308,"byte_end":133322,"line_start":887,"line_end":887,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133327,"byte_end":133330,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133335,"byte_end":133342,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133347,"byte_end":133374,"line_start":890,"line_end":890,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133379,"byte_end":133434,"line_start":891,"line_end":891,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133439,"byte_end":133517,"line_start":892,"line_end":892,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133522,"byte_end":133529,"line_start":893,"line_end":893,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133570,"byte_end":133576,"line_start":894,"line_end":894,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134385,"byte_end":134398,"line_start":917,"line_end":917,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S, A>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133779,"byte_end":133848,"line_start":900,"line_end":900,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133853,"byte_end":133918,"line_start":901,"line_end":901,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":133923,"byte_end":133996,"line_start":902,"line_end":902,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134001,"byte_end":134004,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134009,"byte_end":134023,"line_start":904,"line_end":904,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134028,"byte_end":134031,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134036,"byte_end":134043,"line_start":906,"line_end":906,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134048,"byte_end":134075,"line_start":907,"line_end":907,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134080,"byte_end":134083,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134088,"byte_end":134153,"line_start":909,"line_end":909,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134158,"byte_end":134179,"line_start":910,"line_end":910,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134184,"byte_end":134205,"line_start":911,"line_end":911,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134210,"byte_end":134245,"line_start":912,"line_end":912,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134250,"byte_end":134274,"line_start":913,"line_end":913,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134279,"byte_end":134312,"line_start":914,"line_end":914,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134317,"byte_end":134324,"line_start":915,"line_end":915,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134365,"byte_end":134371,"line_start":916,"line_end":916,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135384,"byte_end":135393,"line_start":946,"line_end":946,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S, A>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134516,"byte_end":134584,"line_start":922,"line_end":922,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134589,"byte_end":134667,"line_start":923,"line_end":923,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134672,"byte_end":134745,"line_start":924,"line_end":924,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134750,"byte_end":134753,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ This function does nothing if the current capacity is smaller than the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134758,"byte_end":134832,"line_start":926,"line_end":926,"column_start":5,"column_end":79}},{"value":"/ supplied minimum capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134837,"byte_end":134867,"line_start":927,"line_end":927,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134872,"byte_end":134875,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134880,"byte_end":134894,"line_start":929,"line_end":929,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134899,"byte_end":134902,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134907,"byte_end":134914,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134919,"byte_end":134946,"line_start":932,"line_end":932,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134951,"byte_end":134954,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":134959,"byte_end":135024,"line_start":934,"line_end":934,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135029,"byte_end":135050,"line_start":935,"line_end":935,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135055,"byte_end":135076,"line_start":936,"line_end":936,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135081,"byte_end":135116,"line_start":937,"line_end":937,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135121,"byte_end":135143,"line_start":938,"line_end":938,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135148,"byte_end":135182,"line_start":939,"line_end":939,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135187,"byte_end":135208,"line_start":940,"line_end":940,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135213,"byte_end":135246,"line_start":941,"line_end":941,"column_start":5,"column_end":38}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135251,"byte_end":135273,"line_start":942,"line_end":942,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135278,"byte_end":135311,"line_start":943,"line_end":943,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135316,"byte_end":135323,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135364,"byte_end":135370,"line_start":945,"line_end":945,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136153,"byte_end":136158,"line_start":971,"line_end":971,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S, A>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135543,"byte_end":135625,"line_start":951,"line_end":951,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135630,"byte_end":135633,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135638,"byte_end":135652,"line_start":953,"line_end":953,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135657,"byte_end":135660,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135665,"byte_end":135672,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135677,"byte_end":135704,"line_start":956,"line_end":956,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135709,"byte_end":135712,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135717,"byte_end":135754,"line_start":958,"line_end":958,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135759,"byte_end":135762,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135767,"byte_end":135818,"line_start":960,"line_end":960,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135823,"byte_end":135876,"line_start":961,"line_end":961,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135881,"byte_end":135903,"line_start":962,"line_end":962,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135908,"byte_end":135913,"line_start":963,"line_end":963,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135918,"byte_end":135921,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135926,"byte_end":135959,"line_start":965,"line_end":965,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":135964,"byte_end":135997,"line_start":966,"line_end":966,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136002,"byte_end":136035,"line_start":967,"line_end":967,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136040,"byte_end":136080,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136085,"byte_end":136092,"line_start":969,"line_end":969,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136133,"byte_end":136139,"line_start":970,"line_end":970,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137316,"byte_end":137325,"line_start":1007,"line_end":1007,"column_start":12,"column_end":21},"name":"entry_ref","qualname":"<HashMap<K, V, S, A>>::entry_ref","value":"pub fn entry_ref<'a, 'b, Q: ?Sized>(&'a mut Self, &'b Q) -> EntryRef where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry by reference in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry by reference in the map for in-place manipulation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136679,"byte_end":136774,"line_start":989,"line_end":989,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136779,"byte_end":136782,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136787,"byte_end":136801,"line_start":991,"line_end":991,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136806,"byte_end":136809,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136814,"byte_end":136821,"line_start":993,"line_end":993,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136826,"byte_end":136853,"line_start":994,"line_end":994,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136858,"byte_end":136861,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ let mut words: HashMap<String, usize> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136866,"byte_end":136925,"line_start":996,"line_end":996,"column_start":5,"column_end":64}},{"value":"/ let source = [\"poneyland\", \"horseyland\", \"poneyland\", \"poneyland\"];","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":136930,"byte_end":137001,"line_start":997,"line_end":997,"column_start":5,"column_end":76}},{"value":"/ for (i, &s) in source.iter().enumerate() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137006,"byte_end":137052,"line_start":998,"line_end":998,"column_start":5,"column_end":51}},{"value":"/     let counter = words.entry_ref(s).or_insert(0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137057,"byte_end":137111,"line_start":999,"line_end":999,"column_start":5,"column_end":59}},{"value":"/     *counter += 1;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137116,"byte_end":137138,"line_start":1000,"line_end":1000,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137143,"byte_end":137148,"line_start":1001,"line_end":1001,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137153,"byte_end":137156,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(words[\"poneyland\"], 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137161,"byte_end":137199,"line_start":1003,"line_end":1003,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(words[\"horseyland\"], 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137204,"byte_end":137243,"line_start":1004,"line_end":1004,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137248,"byte_end":137255,"line_start":1005,"line_end":1005,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137296,"byte_end":137302,"line_start":1006,"line_end":1006,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138639,"byte_end":138642,"line_start":1049,"line_end":1049,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S, A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":137991,"byte_end":138053,"line_start":1029,"line_end":1029,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138058,"byte_end":138061,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138066,"byte_end":138129,"line_start":1031,"line_end":1031,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138134,"byte_end":138201,"line_start":1032,"line_end":1032,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138206,"byte_end":138223,"line_start":1033,"line_end":1033,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138228,"byte_end":138231,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138236,"byte_end":138295,"line_start":1035,"line_end":1035,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138300,"byte_end":138364,"line_start":1036,"line_end":1036,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138369,"byte_end":138372,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138377,"byte_end":138391,"line_start":1038,"line_end":1038,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138396,"byte_end":138399,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138404,"byte_end":138411,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138416,"byte_end":138443,"line_start":1041,"line_end":1041,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138448,"byte_end":138451,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138456,"byte_end":138489,"line_start":1043,"line_end":1043,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138494,"byte_end":138517,"line_start":1044,"line_end":1044,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138522,"byte_end":138562,"line_start":1045,"line_end":1045,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138567,"byte_end":138601,"line_start":1046,"line_end":1046,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138606,"byte_end":138613,"line_start":1047,"line_end":1047,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138618,"byte_end":138627,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139609,"byte_end":139622,"line_start":1081,"line_end":1081,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S, A>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138923,"byte_end":138988,"line_start":1061,"line_end":1061,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":138993,"byte_end":138996,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139001,"byte_end":139073,"line_start":1063,"line_end":1063,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139078,"byte_end":139145,"line_start":1064,"line_end":1064,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139150,"byte_end":139167,"line_start":1065,"line_end":1065,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139172,"byte_end":139175,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139180,"byte_end":139239,"line_start":1067,"line_end":1067,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139244,"byte_end":139308,"line_start":1068,"line_end":1068,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139313,"byte_end":139316,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139321,"byte_end":139335,"line_start":1070,"line_end":1070,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139340,"byte_end":139343,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139348,"byte_end":139355,"line_start":1072,"line_end":1072,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139360,"byte_end":139387,"line_start":1073,"line_end":1073,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139392,"byte_end":139395,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139400,"byte_end":139433,"line_start":1075,"line_end":1075,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139438,"byte_end":139461,"line_start":1076,"line_end":1076,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139466,"byte_end":139522,"line_start":1077,"line_end":1077,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139527,"byte_end":139571,"line_start":1078,"line_end":1078,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139576,"byte_end":139583,"line_start":1079,"line_end":1079,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":139588,"byte_end":139597,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141139,"byte_end":141156,"line_start":1131,"line_end":1131,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<HashMap<K, V, S, A>>::get_key_value_mut","value":"pub fn get_key_value_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(&K, &mut V)>\nwhere K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140271,"byte_end":140371,"line_start":1107,"line_end":1107,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140376,"byte_end":140379,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140384,"byte_end":140456,"line_start":1109,"line_end":1109,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140461,"byte_end":140528,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140533,"byte_end":140550,"line_start":1111,"line_end":1111,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140555,"byte_end":140558,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140563,"byte_end":140622,"line_start":1113,"line_end":1113,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140627,"byte_end":140691,"line_start":1114,"line_end":1114,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140696,"byte_end":140699,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140704,"byte_end":140718,"line_start":1116,"line_end":1116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140723,"byte_end":140726,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140731,"byte_end":140738,"line_start":1118,"line_end":1118,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140743,"byte_end":140770,"line_start":1119,"line_end":1119,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140775,"byte_end":140778,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140783,"byte_end":140816,"line_start":1121,"line_end":1121,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140821,"byte_end":140844,"line_start":1122,"line_end":1122,"column_start":5,"column_end":28}},{"value":"/ let (k, v) = map.get_key_value_mut(&1).unwrap();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140849,"byte_end":140901,"line_start":1123,"line_end":1123,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(k, &1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140906,"byte_end":140928,"line_start":1124,"line_end":1124,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(v, &mut \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140933,"byte_end":140961,"line_start":1125,"line_end":1125,"column_start":5,"column_end":33}},{"value":"/ *v = \"b\";","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140966,"byte_end":140979,"line_start":1126,"line_end":1126,"column_start":5,"column_end":18}},{"value":"/ assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":140984,"byte_end":141048,"line_start":1127,"line_end":1127,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(map.get_key_value_mut(&2), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141053,"byte_end":141101,"line_start":1128,"line_end":1128,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141106,"byte_end":141113,"line_start":1129,"line_end":1129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141118,"byte_end":141127,"line_start":1130,"line_end":1130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142187,"byte_end":142199,"line_start":1163,"line_end":1163,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S, A>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141484,"byte_end":141553,"line_start":1143,"line_end":1143,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141558,"byte_end":141561,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141566,"byte_end":141629,"line_start":1145,"line_end":1145,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141634,"byte_end":141701,"line_start":1146,"line_end":1146,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141706,"byte_end":141723,"line_start":1147,"line_end":1147,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141728,"byte_end":141731,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141736,"byte_end":141795,"line_start":1149,"line_end":1149,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141800,"byte_end":141864,"line_start":1150,"line_end":1150,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141869,"byte_end":141872,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141877,"byte_end":141891,"line_start":1152,"line_end":1152,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141896,"byte_end":141899,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141904,"byte_end":141911,"line_start":1154,"line_end":1154,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141916,"byte_end":141943,"line_start":1155,"line_end":1155,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141948,"byte_end":141951,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141956,"byte_end":141989,"line_start":1157,"line_end":1157,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":141994,"byte_end":142017,"line_start":1158,"line_end":1158,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142022,"byte_end":142065,"line_start":1159,"line_end":1159,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142070,"byte_end":142114,"line_start":1160,"line_end":1160,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142119,"byte_end":142126,"line_start":1161,"line_end":1161,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142167,"byte_end":142173,"line_start":1162,"line_end":1162,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":143056,"byte_end":143063,"line_start":1193,"line_end":1193,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S, A>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142340,"byte_end":142410,"line_start":1171,"line_end":1171,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142415,"byte_end":142418,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142423,"byte_end":142486,"line_start":1173,"line_end":1173,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142491,"byte_end":142558,"line_start":1174,"line_end":1174,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142563,"byte_end":142580,"line_start":1175,"line_end":1175,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142585,"byte_end":142588,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142593,"byte_end":142652,"line_start":1177,"line_end":1177,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142657,"byte_end":142721,"line_start":1178,"line_end":1178,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142726,"byte_end":142729,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142734,"byte_end":142748,"line_start":1180,"line_end":1180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142753,"byte_end":142756,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142761,"byte_end":142768,"line_start":1182,"line_end":1182,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142773,"byte_end":142800,"line_start":1183,"line_end":1183,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142805,"byte_end":142808,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142813,"byte_end":142846,"line_start":1185,"line_end":1185,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142851,"byte_end":142874,"line_start":1186,"line_end":1186,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142879,"byte_end":142917,"line_start":1187,"line_end":1187,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142922,"byte_end":142939,"line_start":1188,"line_end":1188,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142944,"byte_end":142949,"line_start":1189,"line_end":1189,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142954,"byte_end":142983,"line_start":1190,"line_end":1190,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":142988,"byte_end":142995,"line_start":1191,"line_end":1191,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":143036,"byte_end":143042,"line_start":1192,"line_end":1192,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145098,"byte_end":145110,"line_start":1262,"line_end":1262,"column_start":12,"column_end":24},"name":"get_many_mut","qualname":"<HashMap<K, V, S, A>>::get_many_mut","value":"pub fn get_many_mut<Q: ?Sized, const N: usize>(&mut Self, [&Q; ])\n-> Option<[&mut V; ]> where K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` values in the map at once.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` values in the map at once.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":143721,"byte_end":143793,"line_start":1219,"line_end":1219,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":143798,"byte_end":143801,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query. For soundness, at most one","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":143806,"byte_end":143899,"line_start":1221,"line_end":1221,"column_start":5,"column_end":98}},{"value":"/ mutable reference will be returned to any value. `None` will be returned if any of the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":143904,"byte_end":143994,"line_start":1222,"line_end":1222,"column_start":5,"column_end":95}},{"value":"/ keys are duplicates or missing.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":143999,"byte_end":144034,"line_start":1223,"line_end":1223,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144039,"byte_end":144042,"line_start":1224,"line_end":1224,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144047,"byte_end":144061,"line_start":1225,"line_end":1225,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144066,"byte_end":144069,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144074,"byte_end":144081,"line_start":1227,"line_end":1227,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144086,"byte_end":144113,"line_start":1228,"line_end":1228,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144118,"byte_end":144121,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ let mut libraries = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144126,"byte_end":144165,"line_start":1230,"line_end":1230,"column_start":5,"column_end":44}},{"value":"/ libraries.insert(\"Bodleian Library\".to_string(), 1602);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144170,"byte_end":144229,"line_start":1231,"line_end":1231,"column_start":5,"column_end":64}},{"value":"/ libraries.insert(\"Athenæum\".to_string(), 1807);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144234,"byte_end":144286,"line_start":1232,"line_end":1232,"column_start":5,"column_end":56}},{"value":"/ libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144291,"byte_end":144365,"line_start":1233,"line_end":1233,"column_start":5,"column_end":79}},{"value":"/ libraries.insert(\"Library of Congress\".to_string(), 1800);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144370,"byte_end":144432,"line_start":1234,"line_end":1234,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144437,"byte_end":144440,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144445,"byte_end":144483,"line_start":1236,"line_end":1236,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144488,"byte_end":144508,"line_start":1237,"line_end":1237,"column_start":5,"column_end":24}},{"value":"/     \"Library of Congress\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144513,"byte_end":144543,"line_start":1238,"line_end":1238,"column_start":5,"column_end":35}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144548,"byte_end":144555,"line_start":1239,"line_end":1239,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144560,"byte_end":144575,"line_start":1240,"line_end":1240,"column_start":5,"column_end":20}},{"value":"/     got,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144580,"byte_end":144592,"line_start":1241,"line_end":1241,"column_start":5,"column_end":17}},{"value":"/     Some([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144597,"byte_end":144611,"line_start":1242,"line_end":1242,"column_start":5,"column_end":19}},{"value":"/         &mut 1807,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144616,"byte_end":144638,"line_start":1243,"line_end":1243,"column_start":5,"column_end":27}},{"value":"/         &mut 1800,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144643,"byte_end":144665,"line_start":1244,"line_end":1244,"column_start":5,"column_end":27}},{"value":"/     ]),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144670,"byte_end":144681,"line_start":1245,"line_end":1245,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144686,"byte_end":144692,"line_start":1246,"line_end":1246,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144697,"byte_end":144700,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ // Missing keys result in None","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144705,"byte_end":144739,"line_start":1248,"line_end":1248,"column_start":5,"column_end":39}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144744,"byte_end":144782,"line_start":1249,"line_end":1249,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144787,"byte_end":144807,"line_start":1250,"line_end":1250,"column_start":5,"column_end":24}},{"value":"/     \"New York Public Library\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144812,"byte_end":144846,"line_start":1251,"line_end":1251,"column_start":5,"column_end":39}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144851,"byte_end":144858,"line_start":1252,"line_end":1252,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144863,"byte_end":144889,"line_start":1253,"line_end":1253,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144894,"byte_end":144897,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ // Duplicate keys result in None","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144902,"byte_end":144938,"line_start":1255,"line_end":1255,"column_start":5,"column_end":41}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144943,"byte_end":144981,"line_start":1256,"line_end":1256,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":144986,"byte_end":145006,"line_start":1257,"line_end":1257,"column_start":5,"column_end":24}},{"value":"/     \"Athenæum\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145011,"byte_end":145031,"line_start":1258,"line_end":1258,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145036,"byte_end":145043,"line_start":1259,"line_end":1259,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145048,"byte_end":145074,"line_start":1260,"line_end":1260,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145079,"byte_end":145086,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146816,"byte_end":146838,"line_start":1315,"line_end":1315,"column_start":19,"column_end":41},"name":"get_many_unchecked_mut","qualname":"<HashMap<K, V, S, A>>::get_many_unchecked_mut","value":"pub unsafe fn get_many_unchecked_mut<Q: ?Sized, const N:\nusize>(&mut Self, [&Q; ]) -> Option<[&mut V; ]> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` values in the map at once, without validating that\n the values are unique.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` values in the map at once, without validating that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145326,"byte_end":145422,"line_start":1270,"line_end":1270,"column_start":5,"column_end":101}},{"value":"/ the values are unique.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145427,"byte_end":145453,"line_start":1271,"line_end":1271,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145458,"byte_end":145461,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query. `None` will be returned if","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145466,"byte_end":145559,"line_start":1273,"line_end":1273,"column_start":5,"column_end":98}},{"value":"/ any of the keys are missing.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145564,"byte_end":145596,"line_start":1274,"line_end":1274,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145601,"byte_end":145604,"line_start":1275,"line_end":1275,"column_start":5,"column_end":8}},{"value":"/ For a safe alternative see [`get_many_mut`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145609,"byte_end":145657,"line_start":1276,"line_end":1276,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145662,"byte_end":145665,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145670,"byte_end":145682,"line_start":1278,"line_end":1278,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145687,"byte_end":145690,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ Calling this method with overlapping keys is *[undefined behavior]* even if the resulting","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145695,"byte_end":145788,"line_start":1280,"line_end":1280,"column_start":5,"column_end":98}},{"value":"/ references are not used.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145793,"byte_end":145821,"line_start":1281,"line_end":1281,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145826,"byte_end":145829,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145834,"byte_end":145930,"line_start":1283,"line_end":1283,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145935,"byte_end":145938,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145943,"byte_end":145957,"line_start":1285,"line_end":1285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145962,"byte_end":145965,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145970,"byte_end":145977,"line_start":1287,"line_end":1287,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":145982,"byte_end":146009,"line_start":1288,"line_end":1288,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146014,"byte_end":146017,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ let mut libraries = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146022,"byte_end":146061,"line_start":1290,"line_end":1290,"column_start":5,"column_end":44}},{"value":"/ libraries.insert(\"Bodleian Library\".to_string(), 1602);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146066,"byte_end":146125,"line_start":1291,"line_end":1291,"column_start":5,"column_end":64}},{"value":"/ libraries.insert(\"Athenæum\".to_string(), 1807);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146130,"byte_end":146182,"line_start":1292,"line_end":1292,"column_start":5,"column_end":56}},{"value":"/ libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146187,"byte_end":146261,"line_start":1293,"line_end":1293,"column_start":5,"column_end":79}},{"value":"/ libraries.insert(\"Library of Congress\".to_string(), 1800);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146266,"byte_end":146328,"line_start":1294,"line_end":1294,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146333,"byte_end":146336,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146341,"byte_end":146379,"line_start":1296,"line_end":1296,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146384,"byte_end":146404,"line_start":1297,"line_end":1297,"column_start":5,"column_end":24}},{"value":"/     \"Library of Congress\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146409,"byte_end":146439,"line_start":1298,"line_end":1298,"column_start":5,"column_end":35}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146444,"byte_end":146451,"line_start":1299,"line_end":1299,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146456,"byte_end":146471,"line_start":1300,"line_end":1300,"column_start":5,"column_end":20}},{"value":"/     got,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146476,"byte_end":146488,"line_start":1301,"line_end":1301,"column_start":5,"column_end":17}},{"value":"/     Some([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146493,"byte_end":146507,"line_start":1302,"line_end":1302,"column_start":5,"column_end":19}},{"value":"/         &mut 1807,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146512,"byte_end":146534,"line_start":1303,"line_end":1303,"column_start":5,"column_end":27}},{"value":"/         &mut 1800,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146539,"byte_end":146561,"line_start":1304,"line_end":1304,"column_start":5,"column_end":27}},{"value":"/     ]),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146566,"byte_end":146577,"line_start":1305,"line_end":1305,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146582,"byte_end":146588,"line_start":1306,"line_end":1306,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146593,"byte_end":146596,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ // Missing keys result in None","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146601,"byte_end":146635,"line_start":1308,"line_end":1308,"column_start":5,"column_end":39}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146640,"byte_end":146678,"line_start":1309,"line_end":1309,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146683,"byte_end":146703,"line_start":1310,"line_end":1310,"column_start":5,"column_end":24}},{"value":"/     \"New York Public Library\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146708,"byte_end":146742,"line_start":1311,"line_end":1311,"column_start":5,"column_end":39}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146747,"byte_end":146754,"line_start":1312,"line_end":1312,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146759,"byte_end":146785,"line_start":1313,"line_end":1313,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":146790,"byte_end":146797,"line_start":1314,"line_end":1314,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148734,"byte_end":148756,"line_start":1371,"line_end":1371,"column_start":12,"column_end":34},"name":"get_many_key_value_mut","qualname":"<HashMap<K, V, S, A>>::get_many_key_value_mut","value":"pub fn get_many_key_value_mut<Q: ?Sized, const N: usize>(&mut Self, [&Q; ])\n-> Option<[(&K, &mut V); ]> where K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` values in the map at once, with immutable\n references to the corresponding keys.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` values in the map at once, with immutable","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147100,"byte_end":147187,"line_start":1327,"line_end":1327,"column_start":5,"column_end":92}},{"value":"/ references to the corresponding keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147192,"byte_end":147233,"line_start":1328,"line_end":1328,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147238,"byte_end":147241,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query. For soundness, at most one","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147246,"byte_end":147339,"line_start":1330,"line_end":1330,"column_start":5,"column_end":98}},{"value":"/ mutable reference will be returned to any value. `None` will be returned if any of the keys","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147344,"byte_end":147439,"line_start":1331,"line_end":1331,"column_start":5,"column_end":100}},{"value":"/ are duplicates or missing.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147444,"byte_end":147474,"line_start":1332,"line_end":1332,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147479,"byte_end":147482,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147487,"byte_end":147501,"line_start":1334,"line_end":1334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147506,"byte_end":147509,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147514,"byte_end":147521,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147526,"byte_end":147553,"line_start":1337,"line_end":1337,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147558,"byte_end":147561,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ let mut libraries = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147566,"byte_end":147605,"line_start":1339,"line_end":1339,"column_start":5,"column_end":44}},{"value":"/ libraries.insert(\"Bodleian Library\".to_string(), 1602);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147610,"byte_end":147669,"line_start":1340,"line_end":1340,"column_start":5,"column_end":64}},{"value":"/ libraries.insert(\"Athenæum\".to_string(), 1807);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147674,"byte_end":147726,"line_start":1341,"line_end":1341,"column_start":5,"column_end":56}},{"value":"/ libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147731,"byte_end":147805,"line_start":1342,"line_end":1342,"column_start":5,"column_end":79}},{"value":"/ libraries.insert(\"Library of Congress\".to_string(), 1800);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147810,"byte_end":147872,"line_start":1343,"line_end":1343,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147877,"byte_end":147880,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147885,"byte_end":147933,"line_start":1345,"line_end":1345,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147938,"byte_end":147965,"line_start":1346,"line_end":1346,"column_start":5,"column_end":32}},{"value":"/     \"Herzogin-Anna-Amalia-Bibliothek\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":147970,"byte_end":148012,"line_start":1347,"line_end":1347,"column_start":5,"column_end":47}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148017,"byte_end":148024,"line_start":1348,"line_end":1348,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148029,"byte_end":148044,"line_start":1349,"line_end":1349,"column_start":5,"column_end":20}},{"value":"/     got,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148049,"byte_end":148061,"line_start":1350,"line_end":1350,"column_start":5,"column_end":17}},{"value":"/     Some([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148066,"byte_end":148080,"line_start":1351,"line_end":1351,"column_start":5,"column_end":19}},{"value":"/         (&\"Bodleian Library\".to_string(), &mut 1602),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148085,"byte_end":148142,"line_start":1352,"line_end":1352,"column_start":5,"column_end":62}},{"value":"/         (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148147,"byte_end":148219,"line_start":1353,"line_end":1353,"column_start":5,"column_end":77}},{"value":"/     ]),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148224,"byte_end":148235,"line_start":1354,"line_end":1354,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148240,"byte_end":148246,"line_start":1355,"line_end":1355,"column_start":5,"column_end":11}},{"value":"/ // Missing keys result in None","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148251,"byte_end":148285,"line_start":1356,"line_end":1356,"column_start":5,"column_end":39}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148290,"byte_end":148338,"line_start":1357,"line_end":1357,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148343,"byte_end":148370,"line_start":1358,"line_end":1358,"column_start":5,"column_end":32}},{"value":"/     \"Gewandhaus\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148375,"byte_end":148396,"line_start":1359,"line_end":1359,"column_start":5,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148401,"byte_end":148408,"line_start":1360,"line_end":1360,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148413,"byte_end":148439,"line_start":1361,"line_end":1361,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148444,"byte_end":148447,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ // Duplicate keys result in None","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148452,"byte_end":148488,"line_start":1363,"line_end":1363,"column_start":5,"column_end":41}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148493,"byte_end":148541,"line_start":1364,"line_end":1364,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148546,"byte_end":148573,"line_start":1365,"line_end":1365,"column_start":5,"column_end":32}},{"value":"/     \"Herzogin-Anna-Amalia-Bibliothek\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148578,"byte_end":148620,"line_start":1366,"line_end":1366,"column_start":5,"column_end":47}},{"value":"/     \"Herzogin-Anna-Amalia-Bibliothek\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148625,"byte_end":148667,"line_start":1367,"line_end":1367,"column_start":5,"column_end":47}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148672,"byte_end":148679,"line_start":1368,"line_end":1368,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148684,"byte_end":148710,"line_start":1369,"line_end":1369,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":148715,"byte_end":148722,"line_start":1370,"line_end":1370,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150687,"byte_end":150719,"line_start":1427,"line_end":1427,"column_start":19,"column_end":51},"name":"get_many_key_value_unchecked_mut","qualname":"<HashMap<K, V, S, A>>::get_many_key_value_unchecked_mut","value":"pub unsafe fn get_many_key_value_unchecked_mut<Q: ?Sized, const N:\nusize>(&mut Self, [&Q; ]) -> Option<[(&K, &mut V); ]> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` values in the map at once, with immutable\n references to the corresponding keys, without validating that the values are unique.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` values in the map at once, with immutable","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149024,"byte_end":149111,"line_start":1383,"line_end":1383,"column_start":5,"column_end":92}},{"value":"/ references to the corresponding keys, without validating that the values are unique.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149116,"byte_end":149204,"line_start":1384,"line_end":1384,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149209,"byte_end":149212,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query. `None` will be returned if","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149217,"byte_end":149310,"line_start":1386,"line_end":1386,"column_start":5,"column_end":98}},{"value":"/ any of the keys are missing.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149315,"byte_end":149347,"line_start":1387,"line_end":1387,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149352,"byte_end":149355,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ For a safe alternative see [`get_many_key_value_mut`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149360,"byte_end":149418,"line_start":1389,"line_end":1389,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149423,"byte_end":149426,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149431,"byte_end":149443,"line_start":1391,"line_end":1391,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149448,"byte_end":149451,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ Calling this method with overlapping keys is *[undefined behavior]* even if the resulting","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149456,"byte_end":149549,"line_start":1393,"line_end":1393,"column_start":5,"column_end":98}},{"value":"/ references are not used.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149554,"byte_end":149582,"line_start":1394,"line_end":1394,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149587,"byte_end":149590,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149595,"byte_end":149691,"line_start":1396,"line_end":1396,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149696,"byte_end":149699,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149704,"byte_end":149718,"line_start":1398,"line_end":1398,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149723,"byte_end":149726,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149731,"byte_end":149738,"line_start":1400,"line_end":1400,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149743,"byte_end":149770,"line_start":1401,"line_end":1401,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149775,"byte_end":149778,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ let mut libraries = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149783,"byte_end":149822,"line_start":1403,"line_end":1403,"column_start":5,"column_end":44}},{"value":"/ libraries.insert(\"Bodleian Library\".to_string(), 1602);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149827,"byte_end":149886,"line_start":1404,"line_end":1404,"column_start":5,"column_end":64}},{"value":"/ libraries.insert(\"Athenæum\".to_string(), 1807);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149891,"byte_end":149943,"line_start":1405,"line_end":1405,"column_start":5,"column_end":56}},{"value":"/ libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":149948,"byte_end":150022,"line_start":1406,"line_end":1406,"column_start":5,"column_end":79}},{"value":"/ libraries.insert(\"Library of Congress\".to_string(), 1800);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150027,"byte_end":150089,"line_start":1407,"line_end":1407,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150094,"byte_end":150097,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150102,"byte_end":150150,"line_start":1409,"line_end":1409,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150155,"byte_end":150182,"line_start":1410,"line_end":1410,"column_start":5,"column_end":32}},{"value":"/     \"Herzogin-Anna-Amalia-Bibliothek\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150187,"byte_end":150229,"line_start":1411,"line_end":1411,"column_start":5,"column_end":47}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150234,"byte_end":150241,"line_start":1412,"line_end":1412,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150246,"byte_end":150261,"line_start":1413,"line_end":1413,"column_start":5,"column_end":20}},{"value":"/     got,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150266,"byte_end":150278,"line_start":1414,"line_end":1414,"column_start":5,"column_end":17}},{"value":"/     Some([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150283,"byte_end":150297,"line_start":1415,"line_end":1415,"column_start":5,"column_end":19}},{"value":"/         (&\"Bodleian Library\".to_string(), &mut 1602),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150302,"byte_end":150359,"line_start":1416,"line_end":1416,"column_start":5,"column_end":62}},{"value":"/         (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150364,"byte_end":150436,"line_start":1417,"line_end":1417,"column_start":5,"column_end":77}},{"value":"/     ]),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150441,"byte_end":150452,"line_start":1418,"line_end":1418,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150457,"byte_end":150463,"line_start":1419,"line_end":1419,"column_start":5,"column_end":11}},{"value":"/ // Missing keys result in None","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150468,"byte_end":150502,"line_start":1420,"line_end":1420,"column_start":5,"column_end":39}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150507,"byte_end":150555,"line_start":1421,"line_end":1421,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150560,"byte_end":150587,"line_start":1422,"line_end":1422,"column_start":5,"column_end":32}},{"value":"/     \"Gewandhaus\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150592,"byte_end":150613,"line_start":1423,"line_end":1423,"column_start":5,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150618,"byte_end":150625,"line_start":1424,"line_end":1424,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150630,"byte_end":150656,"line_start":1425,"line_end":1425,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":150661,"byte_end":150668,"line_start":1426,"line_end":1426,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152980,"byte_end":152986,"line_start":1503,"line_end":1503,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S, A>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152005,"byte_end":152047,"line_start":1477,"line_end":1477,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152052,"byte_end":152055,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152060,"byte_end":152127,"line_start":1479,"line_end":1479,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152132,"byte_end":152135,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152140,"byte_end":152215,"line_start":1481,"line_end":1481,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152220,"byte_end":152291,"line_start":1482,"line_end":1482,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152296,"byte_end":152369,"line_start":1483,"line_end":1483,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152374,"byte_end":152402,"line_start":1484,"line_end":1484,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152407,"byte_end":152410,"line_start":1485,"line_end":1485,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152415,"byte_end":152495,"line_start":1486,"line_end":1486,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152500,"byte_end":152568,"line_start":1487,"line_end":1487,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152573,"byte_end":152576,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152581,"byte_end":152595,"line_start":1489,"line_end":1489,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152600,"byte_end":152603,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152608,"byte_end":152615,"line_start":1491,"line_end":1491,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152620,"byte_end":152647,"line_start":1492,"line_end":1492,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152652,"byte_end":152655,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152660,"byte_end":152693,"line_start":1494,"line_end":1494,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152698,"byte_end":152740,"line_start":1495,"line_end":1495,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152745,"byte_end":152783,"line_start":1496,"line_end":1496,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152788,"byte_end":152791,"line_start":1497,"line_end":1497,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152796,"byte_end":152820,"line_start":1498,"line_end":1498,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152825,"byte_end":152872,"line_start":1499,"line_end":1499,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152877,"byte_end":152907,"line_start":1500,"line_end":1500,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152912,"byte_end":152919,"line_start":1501,"line_end":1501,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":152960,"byte_end":152966,"line_start":1502,"line_end":1502,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154352,"byte_end":154375,"line_start":1535,"line_end":1535,"column_start":12,"column_end":35},"name":"insert_unique_unchecked","qualname":"<HashMap<K, V, S, A>>::insert_unique_unchecked","value":"pub fn insert_unique_unchecked(&mut Self, K, V) -> (&K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair into the map without checking\n if the key already exists in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair into the map without checking","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153378,"byte_end":153435,"line_start":1514,"line_end":1514,"column_start":5,"column_end":62}},{"value":"/ if the key already exists in the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153440,"byte_end":153481,"line_start":1515,"line_end":1515,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153486,"byte_end":153489,"line_start":1516,"line_end":1516,"column_start":5,"column_end":8}},{"value":"/ Returns a reference to the key and value just inserted.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153494,"byte_end":153553,"line_start":1517,"line_end":1517,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153558,"byte_end":153561,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ This operation is safe if a key does not exist in the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153566,"byte_end":153628,"line_start":1519,"line_end":1519,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153633,"byte_end":153636,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ However, if a key exists in the map already, the behavior is unspecified:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153641,"byte_end":153718,"line_start":1521,"line_end":1521,"column_start":5,"column_end":82}},{"value":"/ this operation may panic, loop forever, or any following operation with the map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153723,"byte_end":153806,"line_start":1522,"line_end":1522,"column_start":5,"column_end":88}},{"value":"/ may panic, loop forever or return arbitrary result.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153811,"byte_end":153866,"line_start":1523,"line_end":1523,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153871,"byte_end":153874,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ That said, this operation (and following operations) are guaranteed to","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153879,"byte_end":153953,"line_start":1525,"line_end":1525,"column_start":5,"column_end":79}},{"value":"/ not violate memory safety.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153958,"byte_end":153988,"line_start":1526,"line_end":1526,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":153993,"byte_end":153996,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/ This operation is faster than regular insert, because it does not perform","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154001,"byte_end":154078,"line_start":1528,"line_end":1528,"column_start":5,"column_end":82}},{"value":"/ lookup before insertion.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154083,"byte_end":154111,"line_start":1529,"line_end":1529,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154116,"byte_end":154119,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ This operation is useful during initial population of the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154124,"byte_end":154190,"line_start":1531,"line_end":1531,"column_start":5,"column_end":71}},{"value":"/ For example, when constructing a map from another map, we know","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154195,"byte_end":154261,"line_start":1532,"line_end":1532,"column_start":5,"column_end":71}},{"value":"/ that keys are unique.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154266,"byte_end":154291,"line_start":1533,"line_end":1533,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154332,"byte_end":154338,"line_start":1534,"line_end":1534,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155473,"byte_end":155483,"line_start":1568,"line_end":1568,"column_start":12,"column_end":22},"name":"try_insert","qualname":"<HashMap<K, V, S, A>>::try_insert","value":"pub fn try_insert(&mut Self, K, V)\n-> Result<&mut V, OccupiedError<, K, V, S, A>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to insert a key-value pair into the map, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Tries to insert a key-value pair into the map, and returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154704,"byte_end":154766,"line_start":1544,"line_end":1544,"column_start":5,"column_end":67}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154771,"byte_end":154821,"line_start":1545,"line_end":1545,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154826,"byte_end":154829,"line_start":1546,"line_end":1546,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154834,"byte_end":154846,"line_start":1547,"line_end":1547,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154851,"byte_end":154854,"line_start":1548,"line_end":1548,"column_start":5,"column_end":8}},{"value":"/ If the map already had this key present, nothing is updated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154859,"byte_end":154927,"line_start":1549,"line_end":1549,"column_start":5,"column_end":73}},{"value":"/ an error containing the occupied entry and the value is returned.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":154932,"byte_end":155001,"line_start":1550,"line_end":1550,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155006,"byte_end":155009,"line_start":1551,"line_end":1551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155014,"byte_end":155028,"line_start":1552,"line_end":1552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155033,"byte_end":155036,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155041,"byte_end":155057,"line_start":1554,"line_end":1554,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155062,"byte_end":155065,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155070,"byte_end":155077,"line_start":1556,"line_end":1556,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155082,"byte_end":155109,"line_start":1557,"line_end":1557,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155114,"byte_end":155117,"line_start":1558,"line_end":1558,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155122,"byte_end":155155,"line_start":1559,"line_end":1559,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155160,"byte_end":155215,"line_start":1560,"line_end":1560,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155220,"byte_end":155223,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ let err = map.try_insert(37, \"b\").unwrap_err();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155228,"byte_end":155279,"line_start":1562,"line_end":1562,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(err.entry.key(), &37);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155284,"byte_end":155321,"line_start":1563,"line_end":1563,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(err.entry.get(), &\"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155326,"byte_end":155364,"line_start":1564,"line_end":1564,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(err.value, \"b\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155369,"byte_end":155400,"line_start":1565,"line_end":1565,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155405,"byte_end":155412,"line_start":1566,"line_end":1566,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155453,"byte_end":155459,"line_start":1567,"line_end":1567,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156518,"byte_end":156524,"line_start":1600,"line_end":1600,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S, A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155784,"byte_end":155857,"line_start":1579,"line_end":1579,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155862,"byte_end":155892,"line_start":1580,"line_end":1580,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155897,"byte_end":155900,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155905,"byte_end":155968,"line_start":1582,"line_end":1582,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":155973,"byte_end":156040,"line_start":1583,"line_end":1583,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156045,"byte_end":156062,"line_start":1584,"line_end":1584,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156067,"byte_end":156070,"line_start":1585,"line_end":1585,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156075,"byte_end":156134,"line_start":1586,"line_end":1586,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156139,"byte_end":156203,"line_start":1587,"line_end":1587,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156208,"byte_end":156211,"line_start":1588,"line_end":1588,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156216,"byte_end":156230,"line_start":1589,"line_end":1589,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156235,"byte_end":156238,"line_start":1590,"line_end":1590,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156243,"byte_end":156250,"line_start":1591,"line_end":1591,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156255,"byte_end":156282,"line_start":1592,"line_end":1592,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156287,"byte_end":156290,"line_start":1593,"line_end":1593,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156295,"byte_end":156328,"line_start":1594,"line_end":1594,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156333,"byte_end":156356,"line_start":1595,"line_end":1595,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156361,"byte_end":156403,"line_start":1596,"line_end":1596,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156408,"byte_end":156445,"line_start":1597,"line_end":1597,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156450,"byte_end":156457,"line_start":1598,"line_end":1598,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156498,"byte_end":156504,"line_start":1599,"line_end":1599,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157555,"byte_end":157567,"line_start":1633,"line_end":1633,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S, A>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156806,"byte_end":156879,"line_start":1612,"line_end":1612,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156884,"byte_end":156918,"line_start":1613,"line_end":1613,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156923,"byte_end":156926,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156931,"byte_end":156994,"line_start":1615,"line_end":1615,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":156999,"byte_end":157066,"line_start":1616,"line_end":1616,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157071,"byte_end":157088,"line_start":1617,"line_end":1617,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157093,"byte_end":157096,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157101,"byte_end":157160,"line_start":1619,"line_end":1619,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157165,"byte_end":157229,"line_start":1620,"line_end":1620,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157234,"byte_end":157237,"line_start":1621,"line_end":1621,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157242,"byte_end":157256,"line_start":1622,"line_end":1622,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157261,"byte_end":157264,"line_start":1623,"line_end":1623,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157269,"byte_end":157276,"line_start":1624,"line_end":1624,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157281,"byte_end":157308,"line_start":1625,"line_end":1625,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157313,"byte_end":157316,"line_start":1626,"line_end":1626,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157321,"byte_end":157354,"line_start":1627,"line_end":1627,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157359,"byte_end":157382,"line_start":1628,"line_end":1628,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157387,"byte_end":157440,"line_start":1629,"line_end":1629,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157445,"byte_end":157482,"line_start":1630,"line_end":1630,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157487,"byte_end":157494,"line_start":1631,"line_end":1631,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157535,"byte_end":157541,"line_start":1632,"line_end":1632,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159807,"byte_end":159820,"line_start":1676,"line_end":1676,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S, A>>::raw_entry_mut","value":"pub fn raw_entry_mut(&mut Self) -> RawEntryBuilderMut<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157867,"byte_end":157915,"line_start":1644,"line_end":1644,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157920,"byte_end":157923,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157928,"byte_end":157997,"line_start":1646,"line_end":1646,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158002,"byte_end":158075,"line_start":1647,"line_end":1647,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158080,"byte_end":158150,"line_start":1648,"line_end":1648,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158155,"byte_end":158201,"line_start":1649,"line_end":1649,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158206,"byte_end":158209,"line_start":1650,"line_end":1650,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158214,"byte_end":158271,"line_start":1651,"line_end":1651,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158276,"byte_end":158279,"line_start":1652,"line_end":1652,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158284,"byte_end":158306,"line_start":1653,"line_end":1653,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158311,"byte_end":158388,"line_start":1654,"line_end":1654,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158393,"byte_end":158457,"line_start":1655,"line_end":1655,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158462,"byte_end":158522,"line_start":1656,"line_end":1656,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158527,"byte_end":158530,"line_start":1657,"line_end":1657,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158535,"byte_end":158612,"line_start":1658,"line_end":1658,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158617,"byte_end":158692,"line_start":1659,"line_end":1659,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158697,"byte_end":158773,"line_start":1660,"line_end":1660,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158778,"byte_end":158849,"line_start":1661,"line_end":1661,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158854,"byte_end":158857,"line_start":1662,"line_end":1662,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158862,"byte_end":158937,"line_start":1663,"line_end":1663,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":158942,"byte_end":159021,"line_start":1664,"line_end":1664,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159026,"byte_end":159101,"line_start":1665,"line_end":1665,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159106,"byte_end":159168,"line_start":1666,"line_end":1666,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159173,"byte_end":159176,"line_start":1667,"line_end":1667,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159181,"byte_end":159251,"line_start":1668,"line_end":1668,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159256,"byte_end":159336,"line_start":1669,"line_end":1669,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159341,"byte_end":159413,"line_start":1670,"line_end":1670,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159418,"byte_end":159494,"line_start":1671,"line_end":1671,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159499,"byte_end":159574,"line_start":1672,"line_end":1672,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159579,"byte_end":159661,"line_start":1673,"line_end":1673,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159666,"byte_end":159746,"line_start":1674,"line_end":1674,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159787,"byte_end":159793,"line_start":1675,"line_end":1675,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160661,"byte_end":160670,"line_start":1696,"line_end":1696,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S, A>>::raw_entry","value":"pub fn raw_entry(&Self) -> RawEntryBuilder<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159924,"byte_end":159982,"line_start":1680,"line_end":1680,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159987,"byte_end":159990,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":159995,"byte_end":160064,"line_start":1682,"line_end":1682,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160069,"byte_end":160142,"line_start":1683,"line_end":1683,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160147,"byte_end":160174,"line_start":1684,"line_end":1684,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160179,"byte_end":160182,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160187,"byte_end":160209,"line_start":1686,"line_end":1686,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160214,"byte_end":160236,"line_start":1687,"line_end":1687,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160241,"byte_end":160305,"line_start":1688,"line_end":1688,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160310,"byte_end":160370,"line_start":1689,"line_end":1689,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160375,"byte_end":160378,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160383,"byte_end":160464,"line_start":1691,"line_end":1691,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160469,"byte_end":160499,"line_start":1692,"line_end":1692,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160504,"byte_end":160507,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160512,"byte_end":160600,"line_start":1694,"line_end":1694,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160641,"byte_end":160647,"line_start":1695,"line_end":1695,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":917},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163183,"byte_end":163187,"line_start":1798,"line_end":1798,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":162928,"byte_end":162976,"line_start":1791,"line_end":1791,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":162977,"byte_end":162980,"line_start":1792,"line_end":1792,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":162981,"byte_end":163056,"line_start":1793,"line_end":1793,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163057,"byte_end":163084,"line_start":1794,"line_end":1794,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163085,"byte_end":163088,"line_start":1795,"line_end":1795,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163089,"byte_end":163134,"line_start":1796,"line_end":1796,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163135,"byte_end":163171,"line_start":1797,"line_end":1797,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":931},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164007,"byte_end":164014,"line_start":1827,"line_end":1827,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163733,"byte_end":163788,"line_start":1820,"line_end":1820,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163789,"byte_end":163792,"line_start":1821,"line_end":1821,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163793,"byte_end":163872,"line_start":1822,"line_end":1822,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163873,"byte_end":163900,"line_start":1823,"line_end":1823,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163901,"byte_end":163904,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163905,"byte_end":163958,"line_start":1825,"line_end":1825,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163959,"byte_end":163995,"line_start":1826,"line_end":1826,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":944},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165013,"byte_end":165021,"line_start":1856,"line_end":1856,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":948}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164697,"byte_end":164752,"line_start":1849,"line_end":1849,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164753,"byte_end":164756,"line_start":1850,"line_end":1850,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164757,"byte_end":164828,"line_start":1851,"line_end":1851,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164829,"byte_end":164904,"line_start":1852,"line_end":1852,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164905,"byte_end":164908,"line_start":1853,"line_end":1853,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164909,"byte_end":164964,"line_start":1854,"line_end":1854,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164965,"byte_end":165001,"line_start":1855,"line_end":1855,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":954},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165697,"byte_end":165705,"line_start":1878,"line_end":1878,"column_start":12,"column_end":20},"name":"IntoKeys","qualname":"::map::IntoKeys","value":"IntoKeys {  }","parent":null,"children":[{"krate":0,"index":958}],"decl_id":null,"docs":" An owning iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the keys of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165423,"byte_end":165475,"line_start":1871,"line_end":1871,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165476,"byte_end":165479,"line_start":1872,"line_end":1872,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_keys`] method on [`HashMap`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165480,"byte_end":165552,"line_start":1873,"line_end":1873,"column_start":1,"column_end":73}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165553,"byte_end":165588,"line_start":1874,"line_end":1874,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165589,"byte_end":165592,"line_start":1875,"line_end":1875,"column_start":1,"column_end":4}},{"value":"/ [`into_keys`]: struct.HashMap.html#method.into_keys","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165593,"byte_end":165648,"line_start":1876,"line_end":1876,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165649,"byte_end":165685,"line_start":1877,"line_end":1877,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":982},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166832,"byte_end":166842,"line_start":1919,"line_end":1919,"column_start":12,"column_end":22},"name":"IntoValues","qualname":"::map::IntoValues","value":"IntoValues {  }","parent":null,"children":[{"krate":0,"index":986}],"decl_id":null,"docs":" An owning iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the values of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166550,"byte_end":166604,"line_start":1912,"line_end":1912,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166605,"byte_end":166608,"line_start":1913,"line_end":1913,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_values`] method on [`HashMap`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166609,"byte_end":166683,"line_start":1914,"line_end":1914,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166684,"byte_end":166719,"line_start":1915,"line_end":1915,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166720,"byte_end":166723,"line_start":1916,"line_end":1916,"column_start":1,"column_end":4}},{"value":"/ [`into_values`]: struct.HashMap.html#method.into_values","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166724,"byte_end":166783,"line_start":1917,"line_end":1917,"column_start":1,"column_end":60}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166784,"byte_end":166820,"line_start":1918,"line_end":1918,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1010},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167947,"byte_end":167951,"line_start":1960,"line_end":1960,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":1014}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167695,"byte_end":167740,"line_start":1953,"line_end":1953,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167741,"byte_end":167744,"line_start":1954,"line_end":1954,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167745,"byte_end":167820,"line_start":1955,"line_end":1955,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167821,"byte_end":167848,"line_start":1956,"line_end":1956,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167849,"byte_end":167852,"line_start":1957,"line_end":1957,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167853,"byte_end":167898,"line_start":1958,"line_end":1958,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167899,"byte_end":167935,"line_start":1959,"line_end":1959,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1023},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168675,"byte_end":168681,"line_start":1987,"line_end":1987,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":1027}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168415,"byte_end":168462,"line_start":1980,"line_end":1980,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168463,"byte_end":168466,"line_start":1981,"line_end":1981,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168467,"byte_end":168544,"line_start":1982,"line_end":1982,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168545,"byte_end":168572,"line_start":1983,"line_end":1983,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168573,"byte_end":168576,"line_start":1984,"line_end":1984,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168577,"byte_end":168626,"line_start":1985,"line_end":1985,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168627,"byte_end":168663,"line_start":1986,"line_end":1986,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1036},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169417,"byte_end":169422,"line_start":2014,"line_end":2014,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1041}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169151,"byte_end":169207,"line_start":2007,"line_end":2007,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169208,"byte_end":169211,"line_start":2008,"line_end":2008,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169212,"byte_end":169288,"line_start":2009,"line_end":2009,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169289,"byte_end":169316,"line_start":2010,"line_end":2010,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169317,"byte_end":169320,"line_start":2011,"line_end":2011,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169321,"byte_end":169368,"line_start":2012,"line_end":2012,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169369,"byte_end":169405,"line_start":2013,"line_end":2013,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1047},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170151,"byte_end":170162,"line_start":2036,"line_end":2036,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::map::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":1053},{"krate":0,"index":1054}],"decl_id":null,"docs":" A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169830,"byte_end":169920,"line_start":2029,"line_end":2029,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169921,"byte_end":169924,"line_start":2030,"line_end":2030,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169925,"byte_end":170008,"line_start":2031,"line_end":2031,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170009,"byte_end":170036,"line_start":2032,"line_end":2032,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170037,"byte_end":170040,"line_start":2033,"line_end":2033,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashMap.html#method.drain_filter","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170041,"byte_end":170102,"line_start":2034,"line_end":2034,"column_start":1,"column_end":62}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170103,"byte_end":170139,"line_start":2035,"line_end":2035,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1095},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172416,"byte_end":172425,"line_start":2119,"line_end":2119,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":1099}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172137,"byte_end":172191,"line_start":2112,"line_end":2112,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172192,"byte_end":172195,"line_start":2113,"line_end":2113,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172196,"byte_end":172277,"line_start":2114,"line_end":2114,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172278,"byte_end":172305,"line_start":2115,"line_end":2115,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172306,"byte_end":172309,"line_start":2116,"line_end":2116,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172310,"byte_end":172367,"line_start":2117,"line_end":2117,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172368,"byte_end":172404,"line_start":2118,"line_end":2118,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1100},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172712,"byte_end":172730,"line_start":2128,"line_end":2128,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":1106}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172471,"byte_end":172555,"line_start":2123,"line_end":2123,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172556,"byte_end":172559,"line_start":2124,"line_end":2124,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172560,"byte_end":172623,"line_start":2125,"line_end":2125,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172624,"byte_end":172627,"line_start":2126,"line_end":2126,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172628,"byte_end":172700,"line_start":2127,"line_end":2127,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1113},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173400,"byte_end":173408,"line_start":2145,"line_end":2145,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut)","parent":{"krate":0,"index":1107},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173373,"byte_end":173395,"line_start":2144,"line_end":2144,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1116},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173475,"byte_end":173481,"line_start":2147,"line_end":2147,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut)","parent":{"krate":0,"index":1107},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173451,"byte_end":173470,"line_start":2146,"line_end":2146,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1107},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173311,"byte_end":173322,"line_start":2143,"line_end":2143,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"pub enum RawEntryMut<'a, K, V, S, A: Allocator + Clone = Global> {\n    Occupied(RawOccupiedEntryMut),\n    Vacant(RawVacantEntryMut),\n}","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1116}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172818,"byte_end":172898,"line_start":2132,"line_end":2132,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172899,"byte_end":172902,"line_start":2133,"line_end":2133,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172903,"byte_end":172950,"line_start":2134,"line_end":2134,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172951,"byte_end":172954,"line_start":2135,"line_end":2135,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":172955,"byte_end":173038,"line_start":2136,"line_end":2136,"column_start":1,"column_end":84}},{"value":"/ then calling one of the methods of that [`RawEntryBuilderMut`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173039,"byte_end":173106,"line_start":2137,"line_end":2137,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173107,"byte_end":173110,"line_start":2138,"line_end":2138,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173111,"byte_end":173147,"line_start":2139,"line_end":2139,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173148,"byte_end":173178,"line_start":2140,"line_end":2140,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173179,"byte_end":173242,"line_start":2141,"line_end":2141,"column_start":1,"column_end":64}},{"value":"/ [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173243,"byte_end":173301,"line_start":2142,"line_end":2142,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1119},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173673,"byte_end":173692,"line_start":2154,"line_end":2154,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173521,"byte_end":173570,"line_start":2150,"line_end":2150,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173571,"byte_end":173614,"line_start":2151,"line_end":2151,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173615,"byte_end":173618,"line_start":2152,"line_end":2152,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173619,"byte_end":173661,"line_start":2153,"line_end":2153,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1138},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174285,"byte_end":174302,"line_start":2181,"line_end":2181,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174136,"byte_end":174182,"line_start":2177,"line_end":2177,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174183,"byte_end":174226,"line_start":2178,"line_end":2178,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174227,"byte_end":174230,"line_start":2179,"line_end":2179,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174231,"byte_end":174273,"line_start":2180,"line_end":2180,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1146},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174646,"byte_end":174661,"line_start":2191,"line_end":2191,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":1152}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174417,"byte_end":174501,"line_start":2186,"line_end":2186,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174502,"byte_end":174505,"line_start":2187,"line_end":2187,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174506,"byte_end":174565,"line_start":2188,"line_end":2188,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174566,"byte_end":174569,"line_start":2189,"line_end":2189,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174570,"byte_end":174634,"line_start":2190,"line_end":2190,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174978,"byte_end":174986,"line_start":2199,"line_end":2199,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> RawEntryMut where S: BuildHasher,\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174826,"byte_end":174873,"line_start":2196,"line_end":2196,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174914,"byte_end":174920,"line_start":2197,"line_end":2197,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174927,"byte_end":174966,"line_start":2198,"line_end":2198,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175381,"byte_end":175404,"line_start":2212,"line_end":2212,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q) -> RawEntryMut where\nK: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175251,"byte_end":175311,"line_start":2209,"line_end":2209,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175316,"byte_end":175325,"line_start":2210,"line_end":2210,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175330,"byte_end":175369,"line_start":2211,"line_end":2211,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175811,"byte_end":175820,"line_start":2225,"line_end":2225,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> RawEntryMut where for<'b> F: FnMut(&'b K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175658,"byte_end":175706,"line_start":2222,"line_end":2222,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175747,"byte_end":175753,"line_start":2223,"line_end":2223,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175760,"byte_end":175799,"line_start":2224,"line_end":2224,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":176846,"byte_end":176854,"line_start":2255,"line_end":2255,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> Option<(&'a K, &'a V)> where\nS: BuildHasher, K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":176714,"byte_end":176741,"line_start":2252,"line_end":2252,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":176782,"byte_end":176788,"line_start":2253,"line_end":2253,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":176795,"byte_end":176834,"line_start":2254,"line_end":2254,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":177261,"byte_end":177284,"line_start":2268,"line_end":2268,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q)\n-> Option<(&'a K, &'a V)> where K: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":177114,"byte_end":177156,"line_start":2265,"line_end":2265,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":177197,"byte_end":177203,"line_start":2266,"line_end":2266,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":177210,"byte_end":177249,"line_start":2267,"line_end":2267,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":177928,"byte_end":177937,"line_start":2290,"line_end":2290,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> Option<(&'a K, &'a V)> where F: FnMut(&K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":177795,"byte_end":177823,"line_start":2287,"line_end":2287,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":177864,"byte_end":177870,"line_start":2288,"line_end":2288,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":177877,"byte_end":177916,"line_start":2289,"line_end":2289,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178606,"byte_end":178612,"line_start":2312,"line_end":2312,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawEntryMut>::insert","value":"pub fn insert(Self, K, V) -> RawOccupiedEntryMut where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RawOccupiedEntryMut.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RawOccupiedEntryMut.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178162,"byte_end":178229,"line_start":2299,"line_end":2299,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178234,"byte_end":178237,"line_start":2300,"line_end":2300,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178242,"byte_end":178256,"line_start":2301,"line_end":2301,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178261,"byte_end":178264,"line_start":2302,"line_end":2302,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178269,"byte_end":178276,"line_start":2303,"line_end":2303,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178281,"byte_end":178308,"line_start":2304,"line_end":2304,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178313,"byte_end":178316,"line_start":2305,"line_end":2305,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178321,"byte_end":178374,"line_start":2306,"line_end":2306,"column_start":5,"column_end":58}},{"value":"/ let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178379,"byte_end":178463,"line_start":2307,"line_end":2307,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178468,"byte_end":178471,"line_start":2308,"line_end":2308,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.remove_entry(), (\"horseyland\", 37));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178476,"byte_end":178533,"line_start":2309,"line_end":2309,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178538,"byte_end":178545,"line_start":2310,"line_end":2310,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178586,"byte_end":178592,"line_start":2311,"line_end":2311,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179595,"byte_end":179604,"line_start":2343,"line_end":2343,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"pub fn or_insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178972,"byte_end":179054,"line_start":2326,"line_end":2326,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179059,"byte_end":179116,"line_start":2327,"line_end":2327,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179121,"byte_end":179124,"line_start":2328,"line_end":2328,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179129,"byte_end":179143,"line_start":2329,"line_end":2329,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179148,"byte_end":179151,"line_start":2330,"line_end":2330,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179156,"byte_end":179163,"line_start":2331,"line_end":2331,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179168,"byte_end":179195,"line_start":2332,"line_end":2332,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179200,"byte_end":179203,"line_start":2333,"line_end":2333,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179208,"byte_end":179261,"line_start":2334,"line_end":2334,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179266,"byte_end":179269,"line_start":2335,"line_end":2335,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179274,"byte_end":179346,"line_start":2336,"line_end":2336,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179351,"byte_end":179387,"line_start":2337,"line_end":2337,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179392,"byte_end":179395,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179400,"byte_end":179481,"line_start":2339,"line_end":2339,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179486,"byte_end":179522,"line_start":2340,"line_end":2340,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179527,"byte_end":179534,"line_start":2341,"line_end":2341,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179575,"byte_end":179581,"line_start":2342,"line_end":2342,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180508,"byte_end":180522,"line_start":2371,"line_end":2371,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> (&'a mut K, &'a mut V) where F: FnOnce()\n-> (K, V), K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":179918,"byte_end":180011,"line_start":2354,"line_end":2354,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180016,"byte_end":180085,"line_start":2355,"line_end":2355,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180090,"byte_end":180093,"line_start":2356,"line_end":2356,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180098,"byte_end":180112,"line_start":2357,"line_end":2357,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180117,"byte_end":180120,"line_start":2358,"line_end":2358,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180125,"byte_end":180132,"line_start":2359,"line_end":2359,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180137,"byte_end":180164,"line_start":2360,"line_end":2360,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180169,"byte_end":180172,"line_start":2361,"line_end":2361,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180177,"byte_end":180233,"line_start":2362,"line_end":2362,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180238,"byte_end":180241,"line_start":2363,"line_end":2363,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180246,"byte_end":180311,"line_start":2364,"line_end":2364,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180316,"byte_end":180357,"line_start":2365,"line_end":2365,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180362,"byte_end":180369,"line_start":2366,"line_end":2366,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180374,"byte_end":180377,"line_start":2367,"line_end":2367,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180382,"byte_end":180435,"line_start":2368,"line_end":2368,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180440,"byte_end":180447,"line_start":2369,"line_end":2369,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180488,"byte_end":180494,"line_start":2370,"line_end":2370,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181618,"byte_end":181628,"line_start":2409,"line_end":2409,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut K, &mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180901,"byte_end":180969,"line_start":2386,"line_end":2386,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":180974,"byte_end":181009,"line_start":2387,"line_end":2387,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181014,"byte_end":181017,"line_start":2388,"line_end":2388,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181022,"byte_end":181036,"line_start":2389,"line_end":2389,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181041,"byte_end":181044,"line_start":2390,"line_end":2390,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181049,"byte_end":181056,"line_start":2391,"line_end":2391,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181061,"byte_end":181088,"line_start":2392,"line_end":2392,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181093,"byte_end":181096,"line_start":2393,"line_end":2393,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181101,"byte_end":181154,"line_start":2394,"line_end":2394,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181159,"byte_end":181162,"line_start":2395,"line_end":2395,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181167,"byte_end":181190,"line_start":2396,"line_end":2396,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181195,"byte_end":181224,"line_start":2397,"line_end":2397,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181229,"byte_end":181268,"line_start":2398,"line_end":2398,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181273,"byte_end":181308,"line_start":2399,"line_end":2399,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181313,"byte_end":181350,"line_start":2400,"line_end":2400,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181355,"byte_end":181358,"line_start":2401,"line_end":2401,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181363,"byte_end":181386,"line_start":2402,"line_end":2402,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181391,"byte_end":181420,"line_start":2403,"line_end":2403,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181425,"byte_end":181464,"line_start":2404,"line_end":2404,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181469,"byte_end":181503,"line_start":2405,"line_end":2405,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181508,"byte_end":181545,"line_start":2406,"line_end":2406,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181550,"byte_end":181557,"line_start":2407,"line_end":2407,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":181598,"byte_end":181604,"line_start":2408,"line_end":2408,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183714,"byte_end":183736,"line_start":2481,"line_end":2481,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<RawEntryMut>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182049,"byte_end":182119,"line_start":2425,"line_end":2425,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182124,"byte_end":182193,"line_start":2426,"line_end":2426,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182198,"byte_end":182231,"line_start":2427,"line_end":2427,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182236,"byte_end":182239,"line_start":2428,"line_end":2428,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182244,"byte_end":182258,"line_start":2429,"line_end":2429,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182263,"byte_end":182266,"line_start":2430,"line_end":2430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182271,"byte_end":182278,"line_start":2431,"line_end":2431,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182283,"byte_end":182310,"line_start":2432,"line_end":2432,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RawEntryMut;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182315,"byte_end":182356,"line_start":2433,"line_end":2433,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182361,"byte_end":182364,"line_start":2434,"line_end":2434,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182369,"byte_end":182422,"line_start":2435,"line_end":2435,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182427,"byte_end":182430,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182435,"byte_end":182454,"line_start":2437,"line_end":2437,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182459,"byte_end":182483,"line_start":2438,"line_end":2438,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182488,"byte_end":182518,"line_start":2439,"line_end":2439,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182523,"byte_end":182574,"line_start":2440,"line_end":2440,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182579,"byte_end":182582,"line_start":2441,"line_end":2441,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182587,"byte_end":182604,"line_start":2442,"line_end":2442,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Vacant(_) => {},","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182609,"byte_end":182646,"line_start":2443,"line_end":2443,"column_start":5,"column_end":42}},{"value":"/     RawEntryMut::Occupied(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182651,"byte_end":182696,"line_start":2444,"line_end":2444,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182701,"byte_end":182706,"line_start":2445,"line_end":2445,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182711,"byte_end":182714,"line_start":2446,"line_end":2446,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182719,"byte_end":182751,"line_start":2447,"line_end":2447,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182756,"byte_end":182759,"line_start":2448,"line_end":2448,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182764,"byte_end":182783,"line_start":2449,"line_end":2449,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182788,"byte_end":182812,"line_start":2450,"line_end":2450,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182817,"byte_end":182847,"line_start":2451,"line_end":2451,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182852,"byte_end":182892,"line_start":2452,"line_end":2452,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182897,"byte_end":182937,"line_start":2453,"line_end":2453,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182942,"byte_end":182972,"line_start":2454,"line_end":2454,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":182977,"byte_end":183000,"line_start":2455,"line_end":2455,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183005,"byte_end":183016,"line_start":2456,"line_end":2456,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183021,"byte_end":183024,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183029,"byte_end":183046,"line_start":2458,"line_end":2458,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Occupied(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183051,"byte_end":183088,"line_start":2459,"line_end":2459,"column_start":5,"column_end":42}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183093,"byte_end":183139,"line_start":2460,"line_end":2460,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183144,"byte_end":183181,"line_start":2461,"line_end":2461,"column_start":5,"column_end":42}},{"value":"/     },","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183186,"byte_end":183196,"line_start":2462,"line_end":2462,"column_start":5,"column_end":15}},{"value":"/     RawEntryMut::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183201,"byte_end":183244,"line_start":2463,"line_end":2463,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183249,"byte_end":183254,"line_start":2464,"line_end":2464,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183259,"byte_end":183262,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183267,"byte_end":183304,"line_start":2466,"line_end":2466,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183309,"byte_end":183312,"line_start":2467,"line_end":2467,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183317,"byte_end":183336,"line_start":2468,"line_end":2468,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183341,"byte_end":183365,"line_start":2469,"line_end":2469,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183370,"byte_end":183400,"line_start":2470,"line_end":2470,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183405,"byte_end":183452,"line_start":2471,"line_end":2471,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183457,"byte_end":183460,"line_start":2472,"line_end":2472,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183465,"byte_end":183482,"line_start":2473,"line_end":2473,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Vacant(_) => {},","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183487,"byte_end":183524,"line_start":2474,"line_end":2474,"column_start":5,"column_end":42}},{"value":"/     RawEntryMut::Occupied(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183529,"byte_end":183574,"line_start":2475,"line_end":2475,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183579,"byte_end":183584,"line_start":2476,"line_end":2476,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183589,"byte_end":183592,"line_start":2477,"line_end":2477,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183597,"byte_end":183641,"line_start":2478,"line_end":2478,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183646,"byte_end":183653,"line_start":2479,"line_end":2479,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":183694,"byte_end":183700,"line_start":2480,"line_end":2480,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184160,"byte_end":184163,"line_start":2495,"line_end":2495,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184054,"byte_end":184099,"line_start":2493,"line_end":2493,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184140,"byte_end":184146,"line_start":2494,"line_end":2494,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184345,"byte_end":184352,"line_start":2501,"line_end":2501,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"pub fn key_mut(&mut Self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184231,"byte_end":184284,"line_start":2499,"line_end":2499,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184325,"byte_end":184331,"line_start":2500,"line_end":2500,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184613,"byte_end":184621,"line_start":2508,"line_end":2508,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"pub fn into_key(Self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184432,"byte_end":184503,"line_start":2505,"line_end":2505,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184508,"byte_end":184552,"line_start":2506,"line_end":2506,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184593,"byte_end":184599,"line_start":2507,"line_end":2507,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184807,"byte_end":184810,"line_start":2514,"line_end":2514,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184699,"byte_end":184746,"line_start":2512,"line_end":2512,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184787,"byte_end":184793,"line_start":2513,"line_end":2513,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185069,"byte_end":185077,"line_start":2521,"line_end":2521,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184878,"byte_end":184959,"line_start":2518,"line_end":2518,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184964,"byte_end":185008,"line_start":2519,"line_end":2519,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185049,"byte_end":185055,"line_start":2520,"line_end":2520,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185271,"byte_end":185278,"line_start":2527,"line_end":2527,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185155,"byte_end":185210,"line_start":2525,"line_end":2525,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185251,"byte_end":185257,"line_start":2526,"line_end":2526,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185474,"byte_end":185487,"line_start":2533,"line_end":2533,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"pub fn get_key_value(&mut Self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185358,"byte_end":185413,"line_start":2531,"line_end":2531,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185454,"byte_end":185460,"line_start":2532,"line_end":2532,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185760,"byte_end":185777,"line_start":2542,"line_end":2542,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"pub fn get_key_value_mut(&mut Self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185636,"byte_end":185699,"line_start":2540,"line_end":2540,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185740,"byte_end":185746,"line_start":2541,"line_end":2541,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186145,"byte_end":186159,"line_start":2552,"line_end":2552,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"pub fn into_key_value(Self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":185946,"byte_end":186035,"line_start":2549,"line_end":2549,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186040,"byte_end":186084,"line_start":2550,"line_end":2550,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186125,"byte_end":186131,"line_start":2551,"line_end":2551,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186457,"byte_end":186463,"line_start":2561,"line_end":2561,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186329,"byte_end":186396,"line_start":2559,"line_end":2559,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186437,"byte_end":186443,"line_start":2560,"line_end":2560,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186675,"byte_end":186685,"line_start":2567,"line_end":2567,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"pub fn insert_key(&mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186547,"byte_end":186614,"line_start":2565,"line_end":2565,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186655,"byte_end":186661,"line_start":2566,"line_end":2566,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186879,"byte_end":186885,"line_start":2573,"line_end":2573,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186765,"byte_end":186818,"line_start":2571,"line_end":2571,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186859,"byte_end":186865,"line_start":2572,"line_end":2572,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":187058,"byte_end":187070,"line_start":2579,"line_end":2579,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":186940,"byte_end":186997,"line_start":2577,"line_end":2577,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":187038,"byte_end":187044,"line_start":2578,"line_end":2578,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":187383,"byte_end":187401,"line_start":2587,"line_end":2587,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<RawOccupiedEntryMut>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> RawEntryMut where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.\n","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":187148,"byte_end":187218,"line_start":2583,"line_end":2583,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":187223,"byte_end":187284,"line_start":2584,"line_end":2584,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":187289,"byte_end":187322,"line_start":2585,"line_end":2585,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":187363,"byte_end":187369,"line_start":2586,"line_end":2586,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188288,"byte_end":188294,"line_start":2614,"line_end":2614,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"pub fn insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188121,"byte_end":188180,"line_start":2611,"line_end":2611,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188185,"byte_end":188227,"line_start":2612,"line_end":2612,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188268,"byte_end":188274,"line_start":2613,"line_end":2613,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188742,"byte_end":188763,"line_start":2627,"line_end":2627,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"pub fn insert_hashed_nocheck(Self, u64, K, V) -> (&'a mut K, &'a mut V) where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188536,"byte_end":188595,"line_start":2623,"line_end":2623,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188600,"byte_end":188642,"line_start":2624,"line_end":2624,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188683,"byte_end":188689,"line_start":2625,"line_end":2625,"column_start":41,"column_end":47}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188696,"byte_end":188730,"line_start":2626,"line_end":2626,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":189209,"byte_end":189227,"line_start":2642,"line_end":2642,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"pub fn insert_with_hasher<H>(Self, u64, K, V, H) -> (&'a mut K, &'a mut V)\nwhere H: Fn(&K) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":189088,"byte_end":189148,"line_start":2640,"line_end":2640,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":189189,"byte_end":189195,"line_start":2641,"line_end":2641,"column_start":41,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1276},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191752,"byte_end":191760,"line_start":2725,"line_end":2725,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":1270},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191725,"byte_end":191747,"line_start":2724,"line_end":2724,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1279},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191822,"byte_end":191828,"line_start":2728,"line_end":2728,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":1270},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191798,"byte_end":191817,"line_start":2727,"line_end":2727,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1270},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191656,"byte_end":191661,"line_start":2720,"line_end":2720,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"pub enum Entry<'a, K, V, S, A = Global> where A: Allocator + Clone {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1279}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191400,"byte_end":191480,"line_start":2714,"line_end":2714,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191481,"byte_end":191484,"line_start":2715,"line_end":2715,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191485,"byte_end":191557,"line_start":2716,"line_end":2716,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191558,"byte_end":191561,"line_start":2717,"line_end":2717,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191562,"byte_end":191598,"line_start":2718,"line_end":2718,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191599,"byte_end":191646,"line_start":2719,"line_end":2719,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1288},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192342,"byte_end":192355,"line_start":2744,"line_end":2744,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192208,"byte_end":192257,"line_start":2740,"line_end":2740,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192258,"byte_end":192295,"line_start":2741,"line_end":2741,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192296,"byte_end":192299,"line_start":2742,"line_end":2742,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192300,"byte_end":192330,"line_start":2743,"line_end":2743,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1314},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193232,"byte_end":193243,"line_start":2781,"line_end":2781,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193101,"byte_end":193147,"line_start":2777,"line_end":2777,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193148,"byte_end":193185,"line_start":2778,"line_end":2778,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193186,"byte_end":193189,"line_start":2779,"line_end":2779,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193190,"byte_end":193220,"line_start":2780,"line_end":2780,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1337},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193961,"byte_end":193969,"line_start":2804,"line_end":2804,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::EntryRef::Occupied","value":"EntryRef::Occupied(OccupiedEntryRef)","parent":{"krate":0,"index":1329},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193934,"byte_end":193956,"line_start":2803,"line_end":2803,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1340},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":194041,"byte_end":194047,"line_start":2807,"line_end":2807,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::EntryRef::Vacant","value":"EntryRef::Vacant(VacantEntryRef)","parent":{"krate":0,"index":1329},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":194017,"byte_end":194036,"line_start":2806,"line_end":2806,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1329},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193847,"byte_end":193855,"line_start":2799,"line_end":2799,"column_start":10,"column_end":18},"name":"EntryRef","qualname":"::map::EntryRef","value":"pub enum EntryRef<'a, 'b, K, Q: ?Sized, V, S, A = Global> where A: Allocator +\n    Clone {\n    Occupied(OccupiedEntryRef),\n    Vacant(VacantEntryRef),\n}","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1340}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193579,"byte_end":193659,"line_start":2793,"line_end":2793,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193660,"byte_end":193663,"line_start":2794,"line_end":2794,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry_ref`] method on [`HashMap`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193664,"byte_end":193740,"line_start":2795,"line_end":2795,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193741,"byte_end":193744,"line_start":2796,"line_end":2796,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193745,"byte_end":193781,"line_start":2797,"line_end":2797,"column_start":1,"column_end":37}},{"value":"/ [`entry_ref`]: struct.HashMap.html#method.entry_ref","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193782,"byte_end":193837,"line_start":2798,"line_end":2798,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1370},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195189,"byte_end":195205,"line_start":2851,"line_end":2851,"column_start":12,"column_end":28},"name":"OccupiedEntryRef","qualname":"::map::OccupiedEntryRef","value":"OccupiedEntryRef {  }","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`EntryRef`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195046,"byte_end":195095,"line_start":2847,"line_end":2847,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`EntryRef`] enum.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195096,"byte_end":195136,"line_start":2848,"line_end":2848,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195137,"byte_end":195140,"line_start":2849,"line_end":2849,"column_start":1,"column_end":4}},{"value":"/ [`EntryRef`]: enum.EntryRef.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195141,"byte_end":195177,"line_start":2850,"line_end":2850,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1405},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196251,"byte_end":196265,"line_start":2892,"line_end":2892,"column_start":12,"column_end":26},"name":"VacantEntryRef","qualname":"::map::VacantEntryRef","value":"VacantEntryRef {  }","parent":null,"children":[{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`EntryRef`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196111,"byte_end":196157,"line_start":2888,"line_end":2888,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`EntryRef`] enum.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196158,"byte_end":196198,"line_start":2889,"line_end":2889,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196199,"byte_end":196202,"line_start":2890,"line_end":2890,"column_start":1,"column_end":4}},{"value":"/ [`EntryRef`]: enum.EntryRef.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196203,"byte_end":196239,"line_start":2891,"line_end":2891,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1423},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196850,"byte_end":196863,"line_start":2909,"line_end":2909,"column_start":12,"column_end":25},"name":"OccupiedError","qualname":"::map::OccupiedError","value":"OccupiedError { entry, value }","parent":null,"children":[{"krate":0,"index":1429},{"krate":0,"index":1430}],"decl_id":null,"docs":" The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.","sig":null,"attributes":[{"value":"/ The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196674,"byte_end":196764,"line_start":2906,"line_end":2906,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196765,"byte_end":196768,"line_start":2907,"line_end":2907,"column_start":1,"column_end":4}},{"value":"/ Contains the occupied entry, and the value that was not inserted.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196769,"byte_end":196838,"line_start":2908,"line_end":2908,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1429},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196974,"byte_end":196979,"line_start":2911,"line_end":2911,"column_start":9,"column_end":14},"name":"entry","qualname":"::map::OccupiedError::entry","value":"map::OccupiedEntry<'a, K, V, S, A>","parent":{"krate":0,"index":1423},"children":[],"decl_id":null,"docs":" The entry in the map that was already occupied.\n","sig":null,"attributes":[{"value":"/ The entry in the map that was already occupied.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196914,"byte_end":196965,"line_start":2910,"line_end":2910,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1430},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":197102,"byte_end":197107,"line_start":2913,"line_end":2913,"column_start":9,"column_end":14},"name":"value","qualname":"::map::OccupiedError::value","value":"V","parent":{"krate":0,"index":1423},"children":[],"decl_id":null,"docs":" The value which was not inserted, because the entry was already occupied.\n","sig":null,"attributes":[{"value":"/ The value which was not inserted, because the entry was already occupied.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":197016,"byte_end":197093,"line_start":2912,"line_end":2912,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1597},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205480,"byte_end":205486,"line_start":3207,"line_end":3207,"column_start":12,"column_end":18},"name":"insert","qualname":"<Entry>::insert","value":"pub fn insert(Self, V) -> OccupiedEntry where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205088,"byte_end":205150,"line_start":3194,"line_end":3194,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205155,"byte_end":205158,"line_start":3195,"line_end":3195,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205163,"byte_end":205177,"line_start":3196,"line_end":3196,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205182,"byte_end":205185,"line_start":3197,"line_end":3197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205190,"byte_end":205197,"line_start":3198,"line_end":3198,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205202,"byte_end":205229,"line_start":3199,"line_end":3199,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205234,"byte_end":205237,"line_start":3200,"line_end":3200,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205242,"byte_end":205295,"line_start":3201,"line_end":3201,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205300,"byte_end":205351,"line_start":3202,"line_end":3202,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205356,"byte_end":205359,"line_start":3203,"line_end":3203,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205364,"byte_end":205407,"line_start":3204,"line_end":3204,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205412,"byte_end":205419,"line_start":3205,"line_end":3205,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205460,"byte_end":205466,"line_start":3206,"line_end":3206,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206365,"byte_end":206374,"line_start":3238,"line_end":3238,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205815,"byte_end":205897,"line_start":3221,"line_end":3221,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205902,"byte_end":205952,"line_start":3222,"line_end":3222,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205957,"byte_end":205960,"line_start":3223,"line_end":3223,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205965,"byte_end":205979,"line_start":3224,"line_end":3224,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205984,"byte_end":205987,"line_start":3225,"line_end":3225,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205992,"byte_end":205999,"line_start":3226,"line_end":3226,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206004,"byte_end":206031,"line_start":3227,"line_end":3227,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206036,"byte_end":206039,"line_start":3228,"line_end":3228,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206044,"byte_end":206097,"line_start":3229,"line_end":3229,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206102,"byte_end":206105,"line_start":3230,"line_end":3230,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206110,"byte_end":206150,"line_start":3231,"line_end":3231,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206155,"byte_end":206191,"line_start":3232,"line_end":3232,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206196,"byte_end":206199,"line_start":3233,"line_end":3233,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206204,"byte_end":206251,"line_start":3234,"line_end":3234,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206256,"byte_end":206292,"line_start":3235,"line_end":3235,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206297,"byte_end":206304,"line_start":3236,"line_end":3236,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206345,"byte_end":206351,"line_start":3237,"line_end":3237,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207164,"byte_end":207178,"line_start":3265,"line_end":3265,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206620,"byte_end":206713,"line_start":3249,"line_end":3249,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206718,"byte_end":206780,"line_start":3250,"line_end":3250,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206785,"byte_end":206788,"line_start":3251,"line_end":3251,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206793,"byte_end":206807,"line_start":3252,"line_end":3252,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206812,"byte_end":206815,"line_start":3253,"line_end":3253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206820,"byte_end":206827,"line_start":3254,"line_end":3254,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206832,"byte_end":206859,"line_start":3255,"line_end":3255,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206864,"byte_end":206867,"line_start":3256,"line_end":3256,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206872,"byte_end":206928,"line_start":3257,"line_end":3257,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206933,"byte_end":206964,"line_start":3258,"line_end":3258,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206969,"byte_end":206972,"line_start":3259,"line_end":3259,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":206977,"byte_end":207025,"line_start":3260,"line_end":3260,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207030,"byte_end":207033,"line_start":3261,"line_end":3261,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207038,"byte_end":207091,"line_start":3262,"line_end":3262,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207096,"byte_end":207103,"line_start":3263,"line_end":3263,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207144,"byte_end":207150,"line_start":3264,"line_end":3264,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208245,"byte_end":208263,"line_start":3295,"line_end":3295,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F: FnOnce(&K) -> V>(Self, F) -> &'a mut V where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function.\n This method allows for generating key-derived values for insertion by providing the default\n function a reference to the key that was moved during the `.entry(key)` method call.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207444,"byte_end":207539,"line_start":3276,"line_end":3276,"column_start":5,"column_end":100}},{"value":"/ This method allows for generating key-derived values for insertion by providing the default","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207544,"byte_end":207639,"line_start":3277,"line_end":3277,"column_start":5,"column_end":100}},{"value":"/ function a reference to the key that was moved during the `.entry(key)` method call.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207644,"byte_end":207732,"line_start":3278,"line_end":3278,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207737,"byte_end":207740,"line_start":3279,"line_end":3279,"column_start":5,"column_end":8}},{"value":"/ The reference to the moved key is provided so that cloning or copying the key is","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207745,"byte_end":207829,"line_start":3280,"line_end":3280,"column_start":5,"column_end":89}},{"value":"/ unnecessary, unlike with `.or_insert_with(|| ... )`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207834,"byte_end":207890,"line_start":3281,"line_end":3281,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207895,"byte_end":207898,"line_start":3282,"line_end":3282,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207903,"byte_end":207917,"line_start":3283,"line_end":3283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207922,"byte_end":207925,"line_start":3284,"line_end":3284,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207930,"byte_end":207937,"line_start":3285,"line_end":3285,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207942,"byte_end":207969,"line_start":3286,"line_end":3286,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207974,"byte_end":207977,"line_start":3287,"line_end":3287,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, usize> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":207982,"byte_end":208037,"line_start":3288,"line_end":3288,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208042,"byte_end":208045,"line_start":3289,"line_end":3289,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208050,"byte_end":208123,"line_start":3290,"line_end":3290,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208128,"byte_end":208131,"line_start":3291,"line_end":3291,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208136,"byte_end":208172,"line_start":3292,"line_end":3292,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208177,"byte_end":208184,"line_start":3293,"line_end":3293,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208225,"byte_end":208231,"line_start":3294,"line_end":3294,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208934,"byte_end":208937,"line_start":3320,"line_end":3320,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208608,"byte_end":208652,"line_start":3309,"line_end":3309,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208657,"byte_end":208660,"line_start":3310,"line_end":3310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208665,"byte_end":208679,"line_start":3311,"line_end":3311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208684,"byte_end":208687,"line_start":3312,"line_end":3312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208692,"byte_end":208699,"line_start":3313,"line_end":3313,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208704,"byte_end":208731,"line_start":3314,"line_end":3314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208736,"byte_end":208739,"line_start":3315,"line_end":3315,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208744,"byte_end":208797,"line_start":3316,"line_end":3316,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208802,"byte_end":208861,"line_start":3317,"line_end":3317,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208866,"byte_end":208873,"line_start":3318,"line_end":3318,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":208914,"byte_end":208920,"line_start":3319,"line_end":3319,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209726,"byte_end":209736,"line_start":3348,"line_end":3348,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209104,"byte_end":209172,"line_start":3327,"line_end":3327,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209177,"byte_end":209212,"line_start":3328,"line_end":3328,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209217,"byte_end":209220,"line_start":3329,"line_end":3329,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209225,"byte_end":209239,"line_start":3330,"line_end":3330,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209244,"byte_end":209247,"line_start":3331,"line_end":3331,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209252,"byte_end":209259,"line_start":3332,"line_end":3332,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209264,"byte_end":209291,"line_start":3333,"line_end":3333,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209296,"byte_end":209299,"line_start":3334,"line_end":3334,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209304,"byte_end":209357,"line_start":3335,"line_end":3335,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209362,"byte_end":209365,"line_start":3336,"line_end":3336,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209370,"byte_end":209396,"line_start":3337,"line_end":3337,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209401,"byte_end":209436,"line_start":3338,"line_end":3338,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209441,"byte_end":209463,"line_start":3339,"line_end":3339,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209468,"byte_end":209505,"line_start":3340,"line_end":3340,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209510,"byte_end":209513,"line_start":3341,"line_end":3341,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209518,"byte_end":209544,"line_start":3342,"line_end":3342,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209549,"byte_end":209584,"line_start":3343,"line_end":3343,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209589,"byte_end":209611,"line_start":3344,"line_end":3344,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209616,"byte_end":209653,"line_start":3345,"line_end":3345,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209658,"byte_end":209665,"line_start":3346,"line_end":3346,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":209706,"byte_end":209712,"line_start":3347,"line_end":3347,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1606},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211656,"byte_end":211678,"line_start":3416,"line_end":3416,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<Entry>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210036,"byte_end":210106,"line_start":3361,"line_end":3361,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210111,"byte_end":210180,"line_start":3362,"line_end":3362,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210185,"byte_end":210218,"line_start":3363,"line_end":3363,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210223,"byte_end":210226,"line_start":3364,"line_end":3364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210231,"byte_end":210245,"line_start":3365,"line_end":3365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210250,"byte_end":210253,"line_start":3366,"line_end":3366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210258,"byte_end":210265,"line_start":3367,"line_end":3367,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210270,"byte_end":210297,"line_start":3368,"line_end":3368,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210302,"byte_end":210337,"line_start":3369,"line_end":3369,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210342,"byte_end":210345,"line_start":3370,"line_end":3370,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210350,"byte_end":210403,"line_start":3371,"line_end":3371,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210408,"byte_end":210411,"line_start":3372,"line_end":3372,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210416,"byte_end":210435,"line_start":3373,"line_end":3373,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210440,"byte_end":210467,"line_start":3374,"line_end":3374,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210472,"byte_end":210523,"line_start":3375,"line_end":3375,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210528,"byte_end":210531,"line_start":3376,"line_end":3376,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210536,"byte_end":210553,"line_start":3377,"line_end":3377,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210558,"byte_end":210587,"line_start":3378,"line_end":3378,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210592,"byte_end":210638,"line_start":3379,"line_end":3379,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210643,"byte_end":210652,"line_start":3380,"line_end":3380,"column_start":5,"column_end":14}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210657,"byte_end":210696,"line_start":3381,"line_end":3381,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210701,"byte_end":210706,"line_start":3382,"line_end":3382,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210711,"byte_end":210714,"line_start":3383,"line_end":3383,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210719,"byte_end":210751,"line_start":3384,"line_end":3384,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210756,"byte_end":210759,"line_start":3385,"line_end":3385,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210764,"byte_end":210783,"line_start":3386,"line_end":3386,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210788,"byte_end":210815,"line_start":3387,"line_end":3387,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210820,"byte_end":210860,"line_start":3388,"line_end":3388,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210865,"byte_end":210905,"line_start":3389,"line_end":3389,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210910,"byte_end":210940,"line_start":3390,"line_end":3390,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210945,"byte_end":210968,"line_start":3391,"line_end":3391,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210973,"byte_end":210984,"line_start":3392,"line_end":3392,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210989,"byte_end":210992,"line_start":3393,"line_end":3393,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":210997,"byte_end":211014,"line_start":3394,"line_end":3394,"column_start":5,"column_end":22}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211019,"byte_end":211050,"line_start":3395,"line_end":3395,"column_start":5,"column_end":36}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211055,"byte_end":211101,"line_start":3396,"line_end":3396,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211106,"byte_end":211143,"line_start":3397,"line_end":3397,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211148,"byte_end":211157,"line_start":3398,"line_end":3398,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211162,"byte_end":211199,"line_start":3399,"line_end":3399,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211204,"byte_end":211209,"line_start":3400,"line_end":3400,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211214,"byte_end":211217,"line_start":3401,"line_end":3401,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211222,"byte_end":211259,"line_start":3402,"line_end":3402,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211264,"byte_end":211267,"line_start":3403,"line_end":3403,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211272,"byte_end":211291,"line_start":3404,"line_end":3404,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211296,"byte_end":211323,"line_start":3405,"line_end":3405,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211328,"byte_end":211375,"line_start":3406,"line_end":3406,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211380,"byte_end":211383,"line_start":3407,"line_end":3407,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211388,"byte_end":211405,"line_start":3408,"line_end":3408,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => assert_eq!(e.key(), &\"poneyland\"),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211410,"byte_end":211472,"line_start":3409,"line_end":3409,"column_start":5,"column_end":67}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211477,"byte_end":211516,"line_start":3410,"line_end":3410,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211521,"byte_end":211526,"line_start":3411,"line_end":3411,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211531,"byte_end":211534,"line_start":3412,"line_end":3412,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211539,"byte_end":211583,"line_start":3413,"line_end":3413,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211588,"byte_end":211595,"line_start":3414,"line_end":3414,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211636,"byte_end":211642,"line_start":3415,"line_end":3415,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212445,"byte_end":212455,"line_start":3442,"line_end":3442,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211979,"byte_end":212055,"line_start":3428,"line_end":3428,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212060,"byte_end":212122,"line_start":3429,"line_end":3429,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212127,"byte_end":212130,"line_start":3430,"line_end":3430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212135,"byte_end":212149,"line_start":3431,"line_end":3431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212154,"byte_end":212157,"line_start":3432,"line_end":3432,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212162,"byte_end":212169,"line_start":3433,"line_end":3433,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212174,"byte_end":212201,"line_start":3434,"line_end":3434,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212206,"byte_end":212209,"line_start":3435,"line_end":3435,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212214,"byte_end":212275,"line_start":3436,"line_end":3436,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212280,"byte_end":212320,"line_start":3437,"line_end":3437,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212325,"byte_end":212328,"line_start":3438,"line_end":3438,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212333,"byte_end":212372,"line_start":3439,"line_end":3439,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212377,"byte_end":212384,"line_start":3440,"line_end":3440,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212425,"byte_end":212431,"line_start":3441,"line_end":3441,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213147,"byte_end":213150,"line_start":3467,"line_end":3467,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212774,"byte_end":212819,"line_start":3455,"line_end":3455,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212824,"byte_end":212827,"line_start":3456,"line_end":3456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212832,"byte_end":212846,"line_start":3457,"line_end":3457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212851,"byte_end":212854,"line_start":3458,"line_end":3458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212859,"byte_end":212866,"line_start":3459,"line_end":3459,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212871,"byte_end":212898,"line_start":3460,"line_end":3460,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212903,"byte_end":212906,"line_start":3461,"line_end":3461,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212911,"byte_end":212964,"line_start":3462,"line_end":3462,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212969,"byte_end":213010,"line_start":3463,"line_end":3463,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213015,"byte_end":213074,"line_start":3464,"line_end":3464,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213079,"byte_end":213086,"line_start":3465,"line_end":3465,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213127,"byte_end":213133,"line_start":3466,"line_end":3466,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213803,"byte_end":213815,"line_start":3490,"line_end":3490,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213218,"byte_end":213275,"line_start":3471,"line_end":3471,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213280,"byte_end":213283,"line_start":3472,"line_end":3472,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213288,"byte_end":213302,"line_start":3473,"line_end":3473,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213307,"byte_end":213310,"line_start":3474,"line_end":3474,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213315,"byte_end":213322,"line_start":3475,"line_end":3475,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213327,"byte_end":213354,"line_start":3476,"line_end":3476,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213359,"byte_end":213394,"line_start":3477,"line_end":3477,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213399,"byte_end":213402,"line_start":3478,"line_end":3478,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213407,"byte_end":213460,"line_start":3479,"line_end":3479,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213465,"byte_end":213506,"line_start":3480,"line_end":3480,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213511,"byte_end":213514,"line_start":3481,"line_end":3481,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213519,"byte_end":213575,"line_start":3482,"line_end":3482,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213580,"byte_end":213624,"line_start":3483,"line_end":3483,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213629,"byte_end":213654,"line_start":3484,"line_end":3484,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213659,"byte_end":213664,"line_start":3485,"line_end":3485,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213669,"byte_end":213672,"line_start":3486,"line_end":3486,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213677,"byte_end":213730,"line_start":3487,"line_end":3487,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213735,"byte_end":213742,"line_start":3488,"line_end":3488,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213783,"byte_end":213789,"line_start":3489,"line_end":3489,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214367,"byte_end":214370,"line_start":3510,"line_end":3510,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213899,"byte_end":213946,"line_start":3494,"line_end":3494,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213951,"byte_end":213954,"line_start":3495,"line_end":3495,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213959,"byte_end":213973,"line_start":3496,"line_end":3496,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213978,"byte_end":213981,"line_start":3497,"line_end":3497,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213986,"byte_end":213993,"line_start":3498,"line_end":3498,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":213998,"byte_end":214025,"line_start":3499,"line_end":3499,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214030,"byte_end":214065,"line_start":3500,"line_end":3500,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214070,"byte_end":214073,"line_start":3501,"line_end":3501,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214078,"byte_end":214131,"line_start":3502,"line_end":3502,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214136,"byte_end":214177,"line_start":3503,"line_end":3503,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214182,"byte_end":214185,"line_start":3504,"line_end":3504,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214190,"byte_end":214246,"line_start":3505,"line_end":3505,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214251,"byte_end":214284,"line_start":3506,"line_end":3506,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214289,"byte_end":214294,"line_start":3507,"line_end":3507,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214299,"byte_end":214306,"line_start":3508,"line_end":3508,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214347,"byte_end":214353,"line_start":3509,"line_end":3509,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215330,"byte_end":215337,"line_start":3542,"line_end":3542,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214438,"byte_end":214493,"line_start":3514,"line_end":3514,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214498,"byte_end":214501,"line_start":3515,"line_end":3515,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214506,"byte_end":214578,"line_start":3516,"line_end":3516,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214583,"byte_end":214638,"line_start":3517,"line_end":3517,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214643,"byte_end":214646,"line_start":3518,"line_end":3518,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214651,"byte_end":214685,"line_start":3519,"line_end":3519,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214690,"byte_end":214693,"line_start":3520,"line_end":3520,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214698,"byte_end":214712,"line_start":3521,"line_end":3521,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214717,"byte_end":214720,"line_start":3522,"line_end":3522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214725,"byte_end":214732,"line_start":3523,"line_end":3523,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214737,"byte_end":214764,"line_start":3524,"line_end":3524,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214769,"byte_end":214804,"line_start":3525,"line_end":3525,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214809,"byte_end":214812,"line_start":3526,"line_end":3526,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214817,"byte_end":214870,"line_start":3527,"line_end":3527,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214875,"byte_end":214916,"line_start":3528,"line_end":3528,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214921,"byte_end":214924,"line_start":3529,"line_end":3529,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214929,"byte_end":214966,"line_start":3530,"line_end":3530,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":214971,"byte_end":215031,"line_start":3531,"line_end":3531,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215036,"byte_end":215063,"line_start":3532,"line_end":3532,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215068,"byte_end":215101,"line_start":3533,"line_end":3533,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215106,"byte_end":215109,"line_start":3534,"line_end":3534,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215114,"byte_end":215166,"line_start":3535,"line_end":3535,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215171,"byte_end":215197,"line_start":3536,"line_end":3536,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215202,"byte_end":215207,"line_start":3537,"line_end":3537,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215212,"byte_end":215215,"line_start":3538,"line_end":3538,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215220,"byte_end":215257,"line_start":3539,"line_end":3539,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215262,"byte_end":215269,"line_start":3540,"line_end":3540,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215310,"byte_end":215316,"line_start":3541,"line_end":3541,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1625},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216189,"byte_end":216197,"line_start":3570,"line_end":3570,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215417,"byte_end":215498,"line_start":3546,"line_end":3546,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215503,"byte_end":215547,"line_start":3547,"line_end":3547,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215552,"byte_end":215555,"line_start":3548,"line_end":3548,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215560,"byte_end":215636,"line_start":3549,"line_end":3549,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215641,"byte_end":215644,"line_start":3550,"line_end":3550,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215649,"byte_end":215681,"line_start":3551,"line_end":3551,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215686,"byte_end":215689,"line_start":3552,"line_end":3552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215694,"byte_end":215708,"line_start":3553,"line_end":3553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215713,"byte_end":215716,"line_start":3554,"line_end":3554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215721,"byte_end":215728,"line_start":3555,"line_end":3555,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215733,"byte_end":215760,"line_start":3556,"line_end":3556,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215765,"byte_end":215800,"line_start":3557,"line_end":3557,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215805,"byte_end":215808,"line_start":3558,"line_end":3558,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215813,"byte_end":215866,"line_start":3559,"line_end":3559,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215871,"byte_end":215912,"line_start":3560,"line_end":3560,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215917,"byte_end":215920,"line_start":3561,"line_end":3561,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215925,"byte_end":215962,"line_start":3562,"line_end":3562,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":215967,"byte_end":216023,"line_start":3563,"line_end":3563,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216028,"byte_end":216056,"line_start":3564,"line_end":3564,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216061,"byte_end":216066,"line_start":3565,"line_end":3565,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216071,"byte_end":216074,"line_start":3566,"line_end":3566,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216079,"byte_end":216116,"line_start":3567,"line_end":3567,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216121,"byte_end":216128,"line_start":3568,"line_end":3568,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216169,"byte_end":216175,"line_start":3569,"line_end":3569,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1626},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216821,"byte_end":216827,"line_start":3592,"line_end":3592,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216275,"byte_end":216342,"line_start":3574,"line_end":3574,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216347,"byte_end":216350,"line_start":3575,"line_end":3575,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216355,"byte_end":216369,"line_start":3576,"line_end":3576,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216374,"byte_end":216377,"line_start":3577,"line_end":3577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216382,"byte_end":216389,"line_start":3578,"line_end":3578,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216394,"byte_end":216421,"line_start":3579,"line_end":3579,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216426,"byte_end":216461,"line_start":3580,"line_end":3580,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216466,"byte_end":216469,"line_start":3581,"line_end":3581,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216474,"byte_end":216527,"line_start":3582,"line_end":3582,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216532,"byte_end":216573,"line_start":3583,"line_end":3583,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216578,"byte_end":216581,"line_start":3584,"line_end":3584,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216586,"byte_end":216646,"line_start":3585,"line_end":3585,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216651,"byte_end":216688,"line_start":3586,"line_end":3586,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216693,"byte_end":216698,"line_start":3587,"line_end":3587,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216703,"byte_end":216706,"line_start":3588,"line_end":3588,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216711,"byte_end":216748,"line_start":3589,"line_end":3589,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216753,"byte_end":216760,"line_start":3590,"line_end":3590,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216801,"byte_end":216807,"line_start":3591,"line_end":3591,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1627},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217509,"byte_end":217515,"line_start":3616,"line_end":3616,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":216967,"byte_end":217020,"line_start":3598,"line_end":3598,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217025,"byte_end":217028,"line_start":3599,"line_end":3599,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217033,"byte_end":217047,"line_start":3600,"line_end":3600,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217052,"byte_end":217055,"line_start":3601,"line_end":3601,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217060,"byte_end":217067,"line_start":3602,"line_end":3602,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217072,"byte_end":217099,"line_start":3603,"line_end":3603,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217104,"byte_end":217139,"line_start":3604,"line_end":3604,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217144,"byte_end":217147,"line_start":3605,"line_end":3605,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217152,"byte_end":217205,"line_start":3606,"line_end":3606,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217210,"byte_end":217251,"line_start":3607,"line_end":3607,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217256,"byte_end":217259,"line_start":3608,"line_end":3608,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217264,"byte_end":217320,"line_start":3609,"line_end":3609,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217325,"byte_end":217360,"line_start":3610,"line_end":3610,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217365,"byte_end":217370,"line_start":3611,"line_end":3611,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217375,"byte_end":217378,"line_start":3612,"line_end":3612,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217383,"byte_end":217436,"line_start":3613,"line_end":3613,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217441,"byte_end":217448,"line_start":3614,"line_end":3614,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217489,"byte_end":217495,"line_start":3615,"line_end":3615,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218448,"byte_end":218461,"line_start":3645,"line_end":3645,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217570,"byte_end":217662,"line_start":3620,"line_end":3620,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217667,"byte_end":217705,"line_start":3621,"line_end":3621,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217710,"byte_end":217713,"line_start":3622,"line_end":3622,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217718,"byte_end":217730,"line_start":3623,"line_end":3623,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217735,"byte_end":217738,"line_start":3624,"line_end":3624,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217743,"byte_end":217818,"line_start":3625,"line_end":3625,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217823,"byte_end":217826,"line_start":3626,"line_end":3626,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217831,"byte_end":217845,"line_start":3627,"line_end":3627,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217850,"byte_end":217853,"line_start":3628,"line_end":3628,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217858,"byte_end":217865,"line_start":3629,"line_end":3629,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217870,"byte_end":217916,"line_start":3630,"line_end":3630,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217921,"byte_end":217941,"line_start":3631,"line_end":3631,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217946,"byte_end":217949,"line_start":3632,"line_end":3632,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":217954,"byte_end":218013,"line_start":3633,"line_end":3633,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218018,"byte_end":218073,"line_start":3634,"line_end":3634,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218078,"byte_end":218081,"line_start":3635,"line_end":3635,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218086,"byte_end":218138,"line_start":3636,"line_end":3636,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218143,"byte_end":218146,"line_start":3637,"line_end":3637,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218151,"byte_end":218206,"line_start":3638,"line_end":3638,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218211,"byte_end":218274,"line_start":3639,"line_end":3639,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218279,"byte_end":218357,"line_start":3640,"line_end":3640,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218362,"byte_end":218367,"line_start":3641,"line_end":3641,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218372,"byte_end":218375,"line_start":3642,"line_end":3642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218380,"byte_end":218387,"line_start":3643,"line_end":3643,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218428,"byte_end":218434,"line_start":3644,"line_end":3644,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1629},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219735,"byte_end":219746,"line_start":3683,"line_end":3683,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"pub fn replace_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218711,"byte_end":218787,"line_start":3654,"line_end":3654,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218792,"byte_end":218795,"line_start":3655,"line_end":3655,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218800,"byte_end":218812,"line_start":3656,"line_end":3656,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218817,"byte_end":218820,"line_start":3657,"line_end":3657,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218825,"byte_end":218900,"line_start":3658,"line_end":3658,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218905,"byte_end":218908,"line_start":3659,"line_end":3659,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218913,"byte_end":218927,"line_start":3660,"line_end":3660,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218932,"byte_end":218935,"line_start":3661,"line_end":3661,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218940,"byte_end":218947,"line_start":3662,"line_end":3662,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":218952,"byte_end":218998,"line_start":3663,"line_end":3663,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219003,"byte_end":219023,"line_start":3664,"line_end":3664,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219028,"byte_end":219031,"line_start":3665,"line_end":3665,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219036,"byte_end":219095,"line_start":3666,"line_end":3666,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219100,"byte_end":219156,"line_start":3667,"line_end":3667,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219161,"byte_end":219164,"line_start":3668,"line_end":3668,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219169,"byte_end":219219,"line_start":3669,"line_end":3669,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219224,"byte_end":219227,"line_start":3670,"line_end":3670,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219232,"byte_end":219277,"line_start":3671,"line_end":3671,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219282,"byte_end":219285,"line_start":3672,"line_end":3672,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219290,"byte_end":219380,"line_start":3673,"line_end":3673,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219385,"byte_end":219417,"line_start":3674,"line_end":3674,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219422,"byte_end":219488,"line_start":3675,"line_end":3675,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219493,"byte_end":219579,"line_start":3676,"line_end":3676,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219584,"byte_end":219620,"line_start":3677,"line_end":3677,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219625,"byte_end":219638,"line_start":3678,"line_end":3678,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219643,"byte_end":219652,"line_start":3679,"line_end":3679,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219657,"byte_end":219662,"line_start":3680,"line_end":3680,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219667,"byte_end":219674,"line_start":3681,"line_end":3681,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219715,"byte_end":219721,"line_start":3682,"line_end":3682,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221390,"byte_end":221408,"line_start":3737,"line_end":3737,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<OccupiedEntry>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> Entry where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219876,"byte_end":219946,"line_start":3688,"line_end":3688,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":219951,"byte_end":220012,"line_start":3689,"line_end":3689,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220017,"byte_end":220050,"line_start":3690,"line_end":3690,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220055,"byte_end":220058,"line_start":3691,"line_end":3691,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220063,"byte_end":220077,"line_start":3692,"line_end":3692,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220082,"byte_end":220085,"line_start":3693,"line_end":3693,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220090,"byte_end":220097,"line_start":3694,"line_end":3694,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220102,"byte_end":220129,"line_start":3695,"line_end":3695,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220134,"byte_end":220169,"line_start":3696,"line_end":3696,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220174,"byte_end":220177,"line_start":3697,"line_end":3697,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220182,"byte_end":220235,"line_start":3698,"line_end":3698,"column_start":5,"column_end":58}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220240,"byte_end":220272,"line_start":3699,"line_end":3699,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220277,"byte_end":220280,"line_start":3700,"line_end":3700,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220285,"byte_end":220331,"line_start":3701,"line_end":3701,"column_start":5,"column_end":51}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220336,"byte_end":220367,"line_start":3702,"line_end":3702,"column_start":5,"column_end":36}},{"value":"/         e.replace_entry_with(|k, v| {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220372,"byte_end":220413,"line_start":3703,"line_end":3703,"column_start":5,"column_end":46}},{"value":"/             assert_eq!(k, &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220418,"byte_end":220462,"line_start":3704,"line_end":3704,"column_start":5,"column_end":49}},{"value":"/             assert_eq!(v, 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220467,"byte_end":220501,"line_start":3705,"line_end":3705,"column_start":5,"column_end":39}},{"value":"/             Some(v + 1)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220506,"byte_end":220533,"line_start":3706,"line_end":3706,"column_start":5,"column_end":32}},{"value":"/         })","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220538,"byte_end":220552,"line_start":3707,"line_end":3707,"column_start":5,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220557,"byte_end":220566,"line_start":3708,"line_end":3708,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220571,"byte_end":220608,"line_start":3709,"line_end":3709,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220613,"byte_end":220619,"line_start":3710,"line_end":3710,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220624,"byte_end":220627,"line_start":3711,"line_end":3711,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220632,"byte_end":220649,"line_start":3712,"line_end":3712,"column_start":5,"column_end":22}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220654,"byte_end":220685,"line_start":3713,"line_end":3713,"column_start":5,"column_end":36}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220690,"byte_end":220736,"line_start":3714,"line_end":3714,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220741,"byte_end":220778,"line_start":3715,"line_end":3715,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220783,"byte_end":220792,"line_start":3716,"line_end":3716,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220797,"byte_end":220834,"line_start":3717,"line_end":3717,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220839,"byte_end":220844,"line_start":3718,"line_end":3718,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220849,"byte_end":220852,"line_start":3719,"line_end":3719,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220857,"byte_end":220894,"line_start":3720,"line_end":3720,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220899,"byte_end":220902,"line_start":3721,"line_end":3721,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220907,"byte_end":220953,"line_start":3722,"line_end":3722,"column_start":5,"column_end":51}},{"value":"/     Entry::Occupied(e) => e.replace_entry_with(|_k, _v| None),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":220958,"byte_end":221024,"line_start":3723,"line_end":3723,"column_start":5,"column_end":71}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221029,"byte_end":221066,"line_start":3724,"line_end":3724,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221071,"byte_end":221077,"line_start":3725,"line_end":3725,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221082,"byte_end":221085,"line_start":3726,"line_end":3726,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221090,"byte_end":221107,"line_start":3727,"line_end":3727,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221112,"byte_end":221141,"line_start":3728,"line_end":3728,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221146,"byte_end":221192,"line_start":3729,"line_end":3729,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221197,"byte_end":221206,"line_start":3730,"line_end":3730,"column_start":5,"column_end":14}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221211,"byte_end":221250,"line_start":3731,"line_end":3731,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221255,"byte_end":221260,"line_start":3732,"line_end":3732,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221265,"byte_end":221268,"line_start":3733,"line_end":3733,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221273,"byte_end":221317,"line_start":3734,"line_end":3734,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221322,"byte_end":221329,"line_start":3735,"line_end":3735,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":221370,"byte_end":221376,"line_start":3736,"line_end":3736,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1639},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222699,"byte_end":222702,"line_start":3781,"line_end":3781,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222309,"byte_end":222382,"line_start":3769,"line_end":3769,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222387,"byte_end":222417,"line_start":3770,"line_end":3770,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222422,"byte_end":222425,"line_start":3771,"line_end":3771,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222430,"byte_end":222444,"line_start":3772,"line_end":3772,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222449,"byte_end":222452,"line_start":3773,"line_end":3773,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222457,"byte_end":222464,"line_start":3774,"line_end":3774,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222469,"byte_end":222496,"line_start":3775,"line_end":3775,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222501,"byte_end":222504,"line_start":3776,"line_end":3776,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222509,"byte_end":222562,"line_start":3777,"line_end":3777,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222567,"byte_end":222626,"line_start":3778,"line_end":3778,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222631,"byte_end":222638,"line_start":3779,"line_end":3779,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222679,"byte_end":222685,"line_start":3780,"line_end":3780,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223138,"byte_end":223146,"line_start":3800,"line_end":3800,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222747,"byte_end":222777,"line_start":3785,"line_end":3785,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222782,"byte_end":222785,"line_start":3786,"line_end":3786,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222790,"byte_end":222804,"line_start":3787,"line_end":3787,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222809,"byte_end":222812,"line_start":3788,"line_end":3788,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222817,"byte_end":222824,"line_start":3789,"line_end":3789,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222829,"byte_end":222856,"line_start":3790,"line_end":3790,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222861,"byte_end":222896,"line_start":3791,"line_end":3791,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222901,"byte_end":222904,"line_start":3792,"line_end":3792,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222909,"byte_end":222962,"line_start":3793,"line_end":3793,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222967,"byte_end":222970,"line_start":3794,"line_end":3794,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222975,"byte_end":223029,"line_start":3795,"line_end":3795,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223034,"byte_end":223055,"line_start":3796,"line_end":3796,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223060,"byte_end":223065,"line_start":3797,"line_end":3797,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223070,"byte_end":223077,"line_start":3798,"line_end":3798,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223118,"byte_end":223124,"line_start":3799,"line_end":3799,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223697,"byte_end":223703,"line_start":3821,"line_end":3821,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223188,"byte_end":223247,"line_start":3804,"line_end":3804,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223252,"byte_end":223294,"line_start":3805,"line_end":3805,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223299,"byte_end":223302,"line_start":3806,"line_end":3806,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223307,"byte_end":223321,"line_start":3807,"line_end":3807,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223326,"byte_end":223329,"line_start":3808,"line_end":3808,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223334,"byte_end":223341,"line_start":3809,"line_end":3809,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223346,"byte_end":223373,"line_start":3810,"line_end":3810,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223378,"byte_end":223413,"line_start":3811,"line_end":3811,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223418,"byte_end":223421,"line_start":3812,"line_end":3812,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223426,"byte_end":223479,"line_start":3813,"line_end":3813,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223484,"byte_end":223487,"line_start":3814,"line_end":3814,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223492,"byte_end":223546,"line_start":3815,"line_end":3815,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223551,"byte_end":223572,"line_start":3816,"line_end":3816,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223577,"byte_end":223582,"line_start":3817,"line_end":3817,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223587,"byte_end":223624,"line_start":3818,"line_end":3818,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223629,"byte_end":223636,"line_start":3819,"line_end":3819,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":223677,"byte_end":223683,"line_start":3820,"line_end":3820,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1651},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225017,"byte_end":225023,"line_start":3869,"line_end":3869,"column_start":12,"column_end":18},"name":"insert","qualname":"<EntryRef>::insert","value":"pub fn insert(Self, V) -> OccupiedEntryRef where K: Hash + From<&'b Q>,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntryRef.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntryRef.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224617,"byte_end":224682,"line_start":3856,"line_end":3856,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224687,"byte_end":224690,"line_start":3857,"line_end":3857,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224695,"byte_end":224709,"line_start":3858,"line_end":3858,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224714,"byte_end":224717,"line_start":3859,"line_end":3859,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224722,"byte_end":224729,"line_start":3860,"line_end":3860,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224734,"byte_end":224761,"line_start":3861,"line_end":3861,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224766,"byte_end":224769,"line_start":3862,"line_end":3862,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224774,"byte_end":224829,"line_start":3863,"line_end":3863,"column_start":5,"column_end":60}},{"value":"/ let entry = map.entry_ref(\"horseyland\").insert(37);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224834,"byte_end":224889,"line_start":3864,"line_end":3864,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224894,"byte_end":224897,"line_start":3865,"line_end":3865,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), \"horseyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224902,"byte_end":224944,"line_start":3866,"line_end":3866,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224949,"byte_end":224956,"line_start":3867,"line_end":3867,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224997,"byte_end":225003,"line_start":3868,"line_end":3868,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225942,"byte_end":225951,"line_start":3900,"line_end":3900,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<EntryRef>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash + From<&'b Q>,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225382,"byte_end":225464,"line_start":3883,"line_end":3883,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225469,"byte_end":225519,"line_start":3884,"line_end":3884,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225524,"byte_end":225527,"line_start":3885,"line_end":3885,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225532,"byte_end":225546,"line_start":3886,"line_end":3886,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225551,"byte_end":225554,"line_start":3887,"line_end":3887,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225559,"byte_end":225566,"line_start":3888,"line_end":3888,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225571,"byte_end":225598,"line_start":3889,"line_end":3889,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225603,"byte_end":225606,"line_start":3890,"line_end":3890,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225611,"byte_end":225666,"line_start":3891,"line_end":3891,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225671,"byte_end":225674,"line_start":3892,"line_end":3892,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225679,"byte_end":225723,"line_start":3893,"line_end":3893,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225728,"byte_end":225764,"line_start":3894,"line_end":3894,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225769,"byte_end":225772,"line_start":3895,"line_end":3895,"column_start":5,"column_end":8}},{"value":"/ *map.entry_ref(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225777,"byte_end":225828,"line_start":3896,"line_end":3896,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225833,"byte_end":225869,"line_start":3897,"line_end":3897,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225874,"byte_end":225881,"line_start":3898,"line_end":3898,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":225922,"byte_end":225928,"line_start":3899,"line_end":3899,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1653},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226767,"byte_end":226781,"line_start":3927,"line_end":3927,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<EntryRef>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash +\nFrom<&'b Q>, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226217,"byte_end":226310,"line_start":3911,"line_end":3911,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226315,"byte_end":226377,"line_start":3912,"line_end":3912,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226382,"byte_end":226385,"line_start":3913,"line_end":3913,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226390,"byte_end":226404,"line_start":3914,"line_end":3914,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226409,"byte_end":226412,"line_start":3915,"line_end":3915,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226417,"byte_end":226424,"line_start":3916,"line_end":3916,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226429,"byte_end":226456,"line_start":3917,"line_end":3917,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226461,"byte_end":226464,"line_start":3918,"line_end":3918,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, String> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226469,"byte_end":226527,"line_start":3919,"line_end":3919,"column_start":5,"column_end":63}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226532,"byte_end":226563,"line_start":3920,"line_end":3920,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226568,"byte_end":226571,"line_start":3921,"line_end":3921,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226576,"byte_end":226628,"line_start":3922,"line_end":3922,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226633,"byte_end":226636,"line_start":3923,"line_end":3923,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226641,"byte_end":226694,"line_start":3924,"line_end":3924,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226699,"byte_end":226706,"line_start":3925,"line_end":3925,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":226747,"byte_end":226753,"line_start":3926,"line_end":3926,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227878,"byte_end":227896,"line_start":3957,"line_end":3957,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<EntryRef>::or_insert_with_key","value":"pub fn or_insert_with_key<F: FnOnce(&Q) -> V>(Self, F) -> &'a mut V where\nK: Hash + Borrow<Q> + From<&'b Q>, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function.\n This method allows for generating key-derived values for insertion by providing the default\n function a reference to the key that was moved during the `.entry_ref(key)` method call.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227067,"byte_end":227162,"line_start":3938,"line_end":3938,"column_start":5,"column_end":100}},{"value":"/ This method allows for generating key-derived values for insertion by providing the default","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227167,"byte_end":227262,"line_start":3939,"line_end":3939,"column_start":5,"column_end":100}},{"value":"/ function a reference to the key that was moved during the `.entry_ref(key)` method call.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227267,"byte_end":227359,"line_start":3940,"line_end":3940,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227364,"byte_end":227367,"line_start":3941,"line_end":3941,"column_start":5,"column_end":8}},{"value":"/ The reference to the moved key is provided so that cloning or copying the key is","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227372,"byte_end":227456,"line_start":3942,"line_end":3942,"column_start":5,"column_end":89}},{"value":"/ unnecessary, unlike with `.or_insert_with(|| ... )`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227461,"byte_end":227517,"line_start":3943,"line_end":3943,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227522,"byte_end":227525,"line_start":3944,"line_end":3944,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227530,"byte_end":227544,"line_start":3945,"line_end":3945,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227549,"byte_end":227552,"line_start":3946,"line_end":3946,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227557,"byte_end":227564,"line_start":3947,"line_end":3947,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227569,"byte_end":227596,"line_start":3948,"line_end":3948,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227601,"byte_end":227604,"line_start":3949,"line_end":3949,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, usize> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227609,"byte_end":227666,"line_start":3950,"line_end":3950,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227671,"byte_end":227674,"line_start":3951,"line_end":3951,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227679,"byte_end":227756,"line_start":3952,"line_end":3952,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227761,"byte_end":227764,"line_start":3953,"line_end":3953,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227769,"byte_end":227805,"line_start":3954,"line_end":3954,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227810,"byte_end":227817,"line_start":3955,"line_end":3955,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":227858,"byte_end":227864,"line_start":3956,"line_end":3956,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228611,"byte_end":228614,"line_start":3982,"line_end":3982,"column_start":12,"column_end":15},"name":"key","qualname":"<EntryRef>::key","value":"pub fn key(&Self) -> &Q where K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228280,"byte_end":228324,"line_start":3971,"line_end":3971,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228329,"byte_end":228332,"line_start":3972,"line_end":3972,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228337,"byte_end":228351,"line_start":3973,"line_end":3973,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228356,"byte_end":228359,"line_start":3974,"line_end":3974,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228364,"byte_end":228371,"line_start":3975,"line_end":3975,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228376,"byte_end":228403,"line_start":3976,"line_end":3976,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228408,"byte_end":228411,"line_start":3977,"line_end":3977,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228416,"byte_end":228471,"line_start":3978,"line_end":3978,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(map.entry_ref(\"poneyland\").key(), \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228476,"byte_end":228538,"line_start":3979,"line_end":3979,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228543,"byte_end":228550,"line_start":3980,"line_end":3980,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228591,"byte_end":228597,"line_start":3981,"line_end":3981,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229455,"byte_end":229465,"line_start":4013,"line_end":4013,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<EntryRef>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228823,"byte_end":228891,"line_start":3992,"line_end":3992,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228896,"byte_end":228931,"line_start":3993,"line_end":3993,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228936,"byte_end":228939,"line_start":3994,"line_end":3994,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228944,"byte_end":228958,"line_start":3995,"line_end":3995,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228963,"byte_end":228966,"line_start":3996,"line_end":3996,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228971,"byte_end":228978,"line_start":3997,"line_end":3997,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":228983,"byte_end":229010,"line_start":3998,"line_end":3998,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229015,"byte_end":229018,"line_start":3999,"line_end":3999,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229023,"byte_end":229078,"line_start":4000,"line_end":4000,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229083,"byte_end":229086,"line_start":4001,"line_end":4001,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229091,"byte_end":229121,"line_start":4002,"line_end":4002,"column_start":5,"column_end":35}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229126,"byte_end":229161,"line_start":4003,"line_end":4003,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229166,"byte_end":229188,"line_start":4004,"line_end":4004,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229193,"byte_end":229230,"line_start":4005,"line_end":4005,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229235,"byte_end":229238,"line_start":4006,"line_end":4006,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229243,"byte_end":229273,"line_start":4007,"line_end":4007,"column_start":5,"column_end":35}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229278,"byte_end":229313,"line_start":4008,"line_end":4008,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229318,"byte_end":229340,"line_start":4009,"line_end":4009,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229345,"byte_end":229382,"line_start":4010,"line_end":4010,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229387,"byte_end":229394,"line_start":4011,"line_end":4011,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229435,"byte_end":229441,"line_start":4012,"line_end":4012,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231440,"byte_end":231462,"line_start":4081,"line_end":4081,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<EntryRef>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&Q, V) ->\nOption<V>, K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229777,"byte_end":229847,"line_start":4026,"line_end":4026,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229852,"byte_end":229921,"line_start":4027,"line_end":4027,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229926,"byte_end":229959,"line_start":4028,"line_end":4028,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229964,"byte_end":229967,"line_start":4029,"line_end":4029,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229972,"byte_end":229986,"line_start":4030,"line_end":4030,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229991,"byte_end":229994,"line_start":4031,"line_end":4031,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":229999,"byte_end":230006,"line_start":4032,"line_end":4032,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230011,"byte_end":230038,"line_start":4033,"line_end":4033,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230043,"byte_end":230081,"line_start":4034,"line_end":4034,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230086,"byte_end":230089,"line_start":4035,"line_end":4035,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230094,"byte_end":230149,"line_start":4036,"line_end":4036,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230154,"byte_end":230157,"line_start":4037,"line_end":4037,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230162,"byte_end":230181,"line_start":4038,"line_end":4038,"column_start":5,"column_end":24}},{"value":"/     .entry_ref(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230186,"byte_end":230217,"line_start":4039,"line_end":4039,"column_start":5,"column_end":36}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230222,"byte_end":230273,"line_start":4040,"line_end":4040,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230278,"byte_end":230281,"line_start":4041,"line_end":4041,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230286,"byte_end":230303,"line_start":4042,"line_end":4042,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Vacant(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230308,"byte_end":230340,"line_start":4043,"line_end":4043,"column_start":5,"column_end":37}},{"value":"/         assert_eq!(e.key(), \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230345,"byte_end":230390,"line_start":4044,"line_end":4044,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230395,"byte_end":230404,"line_start":4045,"line_end":4045,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Occupied(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230409,"byte_end":230451,"line_start":4046,"line_end":4046,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230456,"byte_end":230461,"line_start":4047,"line_end":4047,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230466,"byte_end":230469,"line_start":4048,"line_end":4048,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\".to_string(), 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230474,"byte_end":230518,"line_start":4049,"line_end":4049,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230523,"byte_end":230526,"line_start":4050,"line_end":4050,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230531,"byte_end":230550,"line_start":4051,"line_end":4051,"column_start":5,"column_end":24}},{"value":"/     .entry_ref(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230555,"byte_end":230586,"line_start":4052,"line_end":4052,"column_start":5,"column_end":36}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230591,"byte_end":230631,"line_start":4053,"line_end":4053,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230636,"byte_end":230675,"line_start":4054,"line_end":4054,"column_start":5,"column_end":44}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230680,"byte_end":230710,"line_start":4055,"line_end":4055,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230715,"byte_end":230738,"line_start":4056,"line_end":4056,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230743,"byte_end":230754,"line_start":4057,"line_end":4057,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230759,"byte_end":230762,"line_start":4058,"line_end":4058,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230767,"byte_end":230784,"line_start":4059,"line_end":4059,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Occupied(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230789,"byte_end":230823,"line_start":4060,"line_end":4060,"column_start":5,"column_end":39}},{"value":"/         assert_eq!(e.key(), \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230828,"byte_end":230873,"line_start":4061,"line_end":4061,"column_start":5,"column_end":50}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230878,"byte_end":230915,"line_start":4062,"line_end":4062,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230920,"byte_end":230929,"line_start":4063,"line_end":4063,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230934,"byte_end":230974,"line_start":4064,"line_end":4064,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230979,"byte_end":230984,"line_start":4065,"line_end":4065,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230989,"byte_end":230992,"line_start":4066,"line_end":4066,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":230997,"byte_end":231034,"line_start":4067,"line_end":4067,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231039,"byte_end":231042,"line_start":4068,"line_end":4068,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231047,"byte_end":231066,"line_start":4069,"line_end":4069,"column_start":5,"column_end":24}},{"value":"/     .entry_ref(\"poneyland\")","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231071,"byte_end":231102,"line_start":4070,"line_end":4070,"column_start":5,"column_end":36}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231107,"byte_end":231154,"line_start":4071,"line_end":4071,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231159,"byte_end":231162,"line_start":4072,"line_end":4072,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231167,"byte_end":231184,"line_start":4073,"line_end":4073,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Vacant(e) => assert_eq!(e.key(), \"poneyland\"),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231189,"byte_end":231253,"line_start":4074,"line_end":4074,"column_start":5,"column_end":69}},{"value":"/     EntryRef::Occupied(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231258,"byte_end":231300,"line_start":4075,"line_end":4075,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231305,"byte_end":231310,"line_start":4076,"line_end":4076,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231315,"byte_end":231318,"line_start":4077,"line_end":4077,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231323,"byte_end":231367,"line_start":4078,"line_end":4078,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231372,"byte_end":231379,"line_start":4079,"line_end":4079,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231420,"byte_end":231426,"line_start":4080,"line_end":4080,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1670},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232282,"byte_end":232292,"line_start":4108,"line_end":4108,"column_start":12,"column_end":22},"name":"or_default","qualname":"<EntryRef>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash + From<&'b Q>,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231816,"byte_end":231892,"line_start":4094,"line_end":4094,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231897,"byte_end":231959,"line_start":4095,"line_end":4095,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231964,"byte_end":231967,"line_start":4096,"line_end":4096,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231972,"byte_end":231986,"line_start":4097,"line_end":4097,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231991,"byte_end":231994,"line_start":4098,"line_end":4098,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231999,"byte_end":232006,"line_start":4099,"line_end":4099,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232011,"byte_end":232038,"line_start":4100,"line_end":4100,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232043,"byte_end":232046,"line_start":4101,"line_end":4101,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232051,"byte_end":232112,"line_start":4102,"line_end":4102,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232117,"byte_end":232157,"line_start":4103,"line_end":4103,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232162,"byte_end":232165,"line_start":4104,"line_end":4104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232170,"byte_end":232209,"line_start":4105,"line_end":4105,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232214,"byte_end":232221,"line_start":4106,"line_end":4106,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232262,"byte_end":232268,"line_start":4107,"line_end":4107,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233038,"byte_end":233041,"line_start":4133,"line_end":4133,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntryRef>::key","value":"pub fn key(&Self) -> &Q where K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232656,"byte_end":232701,"line_start":4121,"line_end":4121,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232706,"byte_end":232709,"line_start":4122,"line_end":4122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232714,"byte_end":232728,"line_start":4123,"line_end":4123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232733,"byte_end":232736,"line_start":4124,"line_end":4124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232741,"byte_end":232748,"line_start":4125,"line_end":4125,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232753,"byte_end":232780,"line_start":4126,"line_end":4126,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232785,"byte_end":232788,"line_start":4127,"line_end":4127,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232793,"byte_end":232848,"line_start":4128,"line_end":4128,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232853,"byte_end":232898,"line_start":4129,"line_end":4129,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(map.entry_ref(\"poneyland\").key(), \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232903,"byte_end":232965,"line_start":4130,"line_end":4130,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232970,"byte_end":232977,"line_start":4131,"line_end":4131,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233018,"byte_end":233024,"line_start":4132,"line_end":4132,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233755,"byte_end":233767,"line_start":4159,"line_end":4159,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntryRef>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233154,"byte_end":233211,"line_start":4140,"line_end":4140,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233216,"byte_end":233219,"line_start":4141,"line_end":4141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233224,"byte_end":233238,"line_start":4142,"line_end":4142,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233243,"byte_end":233246,"line_start":4143,"line_end":4143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233251,"byte_end":233258,"line_start":4144,"line_end":4144,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233263,"byte_end":233290,"line_start":4145,"line_end":4145,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233295,"byte_end":233333,"line_start":4146,"line_end":4146,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233338,"byte_end":233341,"line_start":4147,"line_end":4147,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233346,"byte_end":233401,"line_start":4148,"line_end":4148,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233406,"byte_end":233451,"line_start":4149,"line_end":4149,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233456,"byte_end":233459,"line_start":4150,"line_end":4150,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233464,"byte_end":233527,"line_start":4151,"line_end":4151,"column_start":5,"column_end":68}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233532,"byte_end":233576,"line_start":4152,"line_end":4152,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233581,"byte_end":233606,"line_start":4153,"line_end":4153,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233611,"byte_end":233616,"line_start":4154,"line_end":4154,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233621,"byte_end":233624,"line_start":4155,"line_end":4155,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233629,"byte_end":233682,"line_start":4156,"line_end":4156,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233687,"byte_end":233694,"line_start":4157,"line_end":4157,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233735,"byte_end":233741,"line_start":4158,"line_end":4158,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234335,"byte_end":234338,"line_start":4179,"line_end":4179,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntryRef>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233851,"byte_end":233898,"line_start":4163,"line_end":4163,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233903,"byte_end":233906,"line_start":4164,"line_end":4164,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233911,"byte_end":233925,"line_start":4165,"line_end":4165,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233930,"byte_end":233933,"line_start":4166,"line_end":4166,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233938,"byte_end":233945,"line_start":4167,"line_end":4167,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233950,"byte_end":233977,"line_start":4168,"line_end":4168,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":233982,"byte_end":234020,"line_start":4169,"line_end":4169,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234025,"byte_end":234028,"line_start":4170,"line_end":4170,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234033,"byte_end":234088,"line_start":4171,"line_end":4171,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234093,"byte_end":234138,"line_start":4172,"line_end":4172,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234143,"byte_end":234146,"line_start":4173,"line_end":4173,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234151,"byte_end":234214,"line_start":4174,"line_end":4174,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234219,"byte_end":234252,"line_start":4175,"line_end":4175,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234257,"byte_end":234262,"line_start":4176,"line_end":4176,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234267,"byte_end":234274,"line_start":4177,"line_end":4177,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234315,"byte_end":234321,"line_start":4178,"line_end":4178,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235320,"byte_end":235327,"line_start":4211,"line_end":4211,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntryRef>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234406,"byte_end":234461,"line_start":4183,"line_end":4183,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234466,"byte_end":234469,"line_start":4184,"line_end":4184,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntryRef` which may outlive the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234474,"byte_end":234549,"line_start":4185,"line_end":4185,"column_start":5,"column_end":80}},{"value":"/ destruction of the `EntryRef` value, see [`into_mut`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234554,"byte_end":234612,"line_start":4186,"line_end":4186,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234617,"byte_end":234620,"line_start":4187,"line_end":4187,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234625,"byte_end":234659,"line_start":4188,"line_end":4188,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234664,"byte_end":234667,"line_start":4189,"line_end":4189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234672,"byte_end":234686,"line_start":4190,"line_end":4190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234691,"byte_end":234694,"line_start":4191,"line_end":4191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234699,"byte_end":234706,"line_start":4192,"line_end":4192,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234711,"byte_end":234738,"line_start":4193,"line_end":4193,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234743,"byte_end":234781,"line_start":4194,"line_end":4194,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234786,"byte_end":234789,"line_start":4195,"line_end":4195,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234794,"byte_end":234849,"line_start":4196,"line_end":4196,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234854,"byte_end":234899,"line_start":4197,"line_end":4197,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234904,"byte_end":234907,"line_start":4198,"line_end":4198,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234912,"byte_end":234949,"line_start":4199,"line_end":4199,"column_start":5,"column_end":42}},{"value":"/ if let EntryRef::Occupied(mut o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":234954,"byte_end":235021,"line_start":4200,"line_end":4200,"column_start":5,"column_end":72}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235026,"byte_end":235053,"line_start":4201,"line_end":4201,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235058,"byte_end":235091,"line_start":4202,"line_end":4202,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235096,"byte_end":235099,"line_start":4203,"line_end":4203,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235104,"byte_end":235156,"line_start":4204,"line_end":4204,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235161,"byte_end":235187,"line_start":4205,"line_end":4205,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235192,"byte_end":235197,"line_start":4206,"line_end":4206,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235202,"byte_end":235205,"line_start":4207,"line_end":4207,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235210,"byte_end":235247,"line_start":4208,"line_end":4208,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235252,"byte_end":235259,"line_start":4209,"line_end":4209,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235300,"byte_end":235306,"line_start":4210,"line_end":4210,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236201,"byte_end":236209,"line_start":4239,"line_end":4239,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntryRef>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntryRef into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntryRef into a mutable reference to the value in the entry","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235407,"byte_end":235491,"line_start":4215,"line_end":4215,"column_start":5,"column_end":89}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235496,"byte_end":235540,"line_start":4216,"line_end":4216,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235545,"byte_end":235548,"line_start":4217,"line_end":4217,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntryRef`, see [`get_mut`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235553,"byte_end":235632,"line_start":4218,"line_end":4218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235637,"byte_end":235640,"line_start":4219,"line_end":4219,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235645,"byte_end":235677,"line_start":4220,"line_end":4220,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235682,"byte_end":235685,"line_start":4221,"line_end":4221,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235690,"byte_end":235704,"line_start":4222,"line_end":4222,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235709,"byte_end":235712,"line_start":4223,"line_end":4223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235717,"byte_end":235724,"line_start":4224,"line_end":4224,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235729,"byte_end":235756,"line_start":4225,"line_end":4225,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235761,"byte_end":235799,"line_start":4226,"line_end":4226,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235804,"byte_end":235807,"line_start":4227,"line_end":4227,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235812,"byte_end":235867,"line_start":4228,"line_end":4228,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235872,"byte_end":235917,"line_start":4229,"line_end":4229,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235922,"byte_end":235925,"line_start":4230,"line_end":4230,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235930,"byte_end":235967,"line_start":4231,"line_end":4231,"column_start":5,"column_end":42}},{"value":"/ if let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":235972,"byte_end":236035,"line_start":4232,"line_end":4232,"column_start":5,"column_end":68}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236040,"byte_end":236068,"line_start":4233,"line_end":4233,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236073,"byte_end":236078,"line_start":4234,"line_end":4234,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236083,"byte_end":236086,"line_start":4235,"line_end":4235,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236091,"byte_end":236128,"line_start":4236,"line_end":4236,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236133,"byte_end":236140,"line_start":4237,"line_end":4237,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236181,"byte_end":236187,"line_start":4238,"line_end":4238,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236849,"byte_end":236855,"line_start":4261,"line_end":4261,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntryRef>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236287,"byte_end":236354,"line_start":4243,"line_end":4243,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236359,"byte_end":236362,"line_start":4244,"line_end":4244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236367,"byte_end":236381,"line_start":4245,"line_end":4245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236386,"byte_end":236389,"line_start":4246,"line_end":4246,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236394,"byte_end":236401,"line_start":4247,"line_end":4247,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236406,"byte_end":236433,"line_start":4248,"line_end":4248,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236438,"byte_end":236476,"line_start":4249,"line_end":4249,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236481,"byte_end":236484,"line_start":4250,"line_end":4250,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236489,"byte_end":236544,"line_start":4251,"line_end":4251,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236549,"byte_end":236594,"line_start":4252,"line_end":4252,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236599,"byte_end":236602,"line_start":4253,"line_end":4253,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(mut o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236607,"byte_end":236674,"line_start":4254,"line_end":4254,"column_start":5,"column_end":72}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236679,"byte_end":236716,"line_start":4255,"line_end":4255,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236721,"byte_end":236726,"line_start":4256,"line_end":4256,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236731,"byte_end":236734,"line_start":4257,"line_end":4257,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236739,"byte_end":236776,"line_start":4258,"line_end":4258,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236781,"byte_end":236788,"line_start":4259,"line_end":4259,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236829,"byte_end":236835,"line_start":4260,"line_end":4260,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237553,"byte_end":237559,"line_start":4285,"line_end":4285,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntryRef>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":236995,"byte_end":237048,"line_start":4267,"line_end":4267,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237053,"byte_end":237056,"line_start":4268,"line_end":4268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237061,"byte_end":237075,"line_start":4269,"line_end":4269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237080,"byte_end":237083,"line_start":4270,"line_end":4270,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237088,"byte_end":237095,"line_start":4271,"line_end":4271,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237100,"byte_end":237127,"line_start":4272,"line_end":4272,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237132,"byte_end":237170,"line_start":4273,"line_end":4273,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237175,"byte_end":237178,"line_start":4274,"line_end":4274,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237183,"byte_end":237238,"line_start":4275,"line_end":4275,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237243,"byte_end":237288,"line_start":4276,"line_end":4276,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237293,"byte_end":237296,"line_start":4277,"line_end":4277,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237301,"byte_end":237364,"line_start":4278,"line_end":4278,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237369,"byte_end":237404,"line_start":4279,"line_end":4279,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237409,"byte_end":237414,"line_start":4280,"line_end":4280,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237419,"byte_end":237422,"line_start":4281,"line_end":4281,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237427,"byte_end":237480,"line_start":4282,"line_end":4282,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237485,"byte_end":237492,"line_start":4283,"line_end":4283,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237533,"byte_end":237539,"line_start":4284,"line_end":4284,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238430,"byte_end":238443,"line_start":4312,"line_end":4312,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntryRef>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V) where K: From<&'b Q>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237614,"byte_end":237706,"line_start":4289,"line_end":4289,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237711,"byte_end":237749,"line_start":4290,"line_end":4290,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237754,"byte_end":237757,"line_start":4291,"line_end":4291,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237762,"byte_end":237774,"line_start":4292,"line_end":4292,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237779,"byte_end":237782,"line_start":4293,"line_end":4293,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`EntryRef::insert`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237787,"byte_end":237865,"line_start":4294,"line_end":4294,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237870,"byte_end":237873,"line_start":4295,"line_end":4295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237878,"byte_end":237892,"line_start":4296,"line_end":4296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237897,"byte_end":237900,"line_start":4297,"line_end":4297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237905,"byte_end":237912,"line_start":4298,"line_end":4298,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{EntryRef, HashMap};","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237917,"byte_end":237966,"line_start":4299,"line_end":4299,"column_start":5,"column_end":54}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237971,"byte_end":237991,"line_start":4300,"line_end":4300,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":237996,"byte_end":237999,"line_start":4301,"line_end":4301,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<str>, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238004,"byte_end":238060,"line_start":4302,"line_end":4302,"column_start":5,"column_end":61}},{"value":"/ map.insert(Rc::from(\"Stringthing\"), 15);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238065,"byte_end":238109,"line_start":4303,"line_end":4303,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238114,"byte_end":238117,"line_start":4304,"line_end":4304,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(entry) = map.entry_ref(\"Stringthing\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238122,"byte_end":238191,"line_start":4305,"line_end":4305,"column_start":5,"column_end":74}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238196,"byte_end":238259,"line_start":4306,"line_end":4306,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<str>, u32) = entry.replace_entry(16);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238264,"byte_end":238339,"line_start":4307,"line_end":4307,"column_start":5,"column_end":80}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238344,"byte_end":238349,"line_start":4308,"line_end":4308,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238354,"byte_end":238357,"line_start":4309,"line_end":4309,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238362,"byte_end":238369,"line_start":4310,"line_end":4310,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238410,"byte_end":238416,"line_start":4311,"line_end":4311,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239767,"byte_end":239778,"line_start":4353,"line_end":4353,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntryRef>::replace_key","value":"pub fn replace_key(Self) -> K where K: From<&'b Q>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238744,"byte_end":238820,"line_start":4324,"line_end":4324,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238825,"byte_end":238828,"line_start":4325,"line_end":4325,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238833,"byte_end":238845,"line_start":4326,"line_end":4326,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238850,"byte_end":238853,"line_start":4327,"line_end":4327,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238858,"byte_end":238933,"line_start":4328,"line_end":4328,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238938,"byte_end":238941,"line_start":4329,"line_end":4329,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238946,"byte_end":238960,"line_start":4330,"line_end":4330,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238965,"byte_end":238968,"line_start":4331,"line_end":4331,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238973,"byte_end":238980,"line_start":4332,"line_end":4332,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{EntryRef, HashMap};","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":238985,"byte_end":239034,"line_start":4333,"line_end":4333,"column_start":5,"column_end":54}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239039,"byte_end":239059,"line_start":4334,"line_end":4334,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239064,"byte_end":239067,"line_start":4335,"line_end":4335,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<str>, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239072,"byte_end":239128,"line_start":4336,"line_end":4336,"column_start":5,"column_end":61}},{"value":"/ let mut known_strings: Vec<Rc<str>> = Vec::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239133,"byte_end":239186,"line_start":4337,"line_end":4337,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239191,"byte_end":239194,"line_start":4338,"line_end":4338,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239199,"byte_end":239249,"line_start":4339,"line_end":4339,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239254,"byte_end":239257,"line_start":4340,"line_end":4340,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239262,"byte_end":239307,"line_start":4341,"line_end":4341,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239312,"byte_end":239315,"line_start":4342,"line_end":4342,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<str>, u32>, known_strings: &[Rc<str>] ) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239320,"byte_end":239404,"line_start":4343,"line_end":4343,"column_start":5,"column_end":89}},{"value":"/     for s in known_strings {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239409,"byte_end":239441,"line_start":4344,"line_end":4344,"column_start":5,"column_end":37}},{"value":"/         if let EntryRef::Occupied(entry) = map.entry_ref(s.as_ref()) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239446,"byte_end":239520,"line_start":4345,"line_end":4345,"column_start":5,"column_end":79}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239525,"byte_end":239611,"line_start":4346,"line_end":4346,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239616,"byte_end":239652,"line_start":4347,"line_end":4347,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239657,"byte_end":239670,"line_start":4348,"line_end":4348,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239675,"byte_end":239684,"line_start":4349,"line_end":4349,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239689,"byte_end":239694,"line_start":4350,"line_end":4350,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239699,"byte_end":239706,"line_start":4351,"line_end":4351,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239747,"byte_end":239753,"line_start":4352,"line_end":4352,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241519,"byte_end":241537,"line_start":4410,"line_end":4410,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<OccupiedEntryRef>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> EntryRef where F: FnOnce(&Q, V) ->\nOption<V>, K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":239959,"byte_end":240029,"line_start":4361,"line_end":4361,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240034,"byte_end":240095,"line_start":4362,"line_end":4362,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240100,"byte_end":240133,"line_start":4363,"line_end":4363,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240138,"byte_end":240141,"line_start":4364,"line_end":4364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240146,"byte_end":240160,"line_start":4365,"line_end":4365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240165,"byte_end":240168,"line_start":4366,"line_end":4366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240173,"byte_end":240180,"line_start":4367,"line_end":4367,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240185,"byte_end":240212,"line_start":4368,"line_end":4368,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240217,"byte_end":240255,"line_start":4369,"line_end":4369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240260,"byte_end":240263,"line_start":4370,"line_end":4370,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240268,"byte_end":240323,"line_start":4371,"line_end":4371,"column_start":5,"column_end":60}},{"value":"/ map.insert(\"poneyland\".to_string(), 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240328,"byte_end":240372,"line_start":4372,"line_end":4372,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240377,"byte_end":240380,"line_start":4373,"line_end":4373,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry_ref(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240385,"byte_end":240435,"line_start":4374,"line_end":4374,"column_start":5,"column_end":55}},{"value":"/     EntryRef::Occupied(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240440,"byte_end":240474,"line_start":4375,"line_end":4375,"column_start":5,"column_end":39}},{"value":"/         e.replace_entry_with(|k, v| {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240479,"byte_end":240520,"line_start":4376,"line_end":4376,"column_start":5,"column_end":46}},{"value":"/             assert_eq!(k, \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240525,"byte_end":240568,"line_start":4377,"line_end":4377,"column_start":5,"column_end":48}},{"value":"/             assert_eq!(v, 42);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240573,"byte_end":240607,"line_start":4378,"line_end":4378,"column_start":5,"column_end":39}},{"value":"/             Some(v + 1)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240612,"byte_end":240639,"line_start":4379,"line_end":4379,"column_start":5,"column_end":32}},{"value":"/         })","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240644,"byte_end":240658,"line_start":4380,"line_end":4380,"column_start":5,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240663,"byte_end":240672,"line_start":4381,"line_end":4381,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240677,"byte_end":240717,"line_start":4382,"line_end":4382,"column_start":5,"column_end":45}},{"value":"/ };","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240722,"byte_end":240728,"line_start":4383,"line_end":4383,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240733,"byte_end":240736,"line_start":4384,"line_end":4384,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240741,"byte_end":240758,"line_start":4385,"line_end":4385,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Occupied(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240763,"byte_end":240797,"line_start":4386,"line_end":4386,"column_start":5,"column_end":39}},{"value":"/         assert_eq!(e.key(), \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240802,"byte_end":240847,"line_start":4387,"line_end":4387,"column_start":5,"column_end":50}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240852,"byte_end":240889,"line_start":4388,"line_end":4388,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240894,"byte_end":240903,"line_start":4389,"line_end":4389,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240908,"byte_end":240948,"line_start":4390,"line_end":4390,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240953,"byte_end":240958,"line_start":4391,"line_end":4391,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240963,"byte_end":240966,"line_start":4392,"line_end":4392,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":240971,"byte_end":241008,"line_start":4393,"line_end":4393,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241013,"byte_end":241016,"line_start":4394,"line_end":4394,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry_ref(\"poneyland\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241021,"byte_end":241071,"line_start":4395,"line_end":4395,"column_start":5,"column_end":55}},{"value":"/     EntryRef::Occupied(e) => e.replace_entry_with(|_k, _v| None),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241076,"byte_end":241145,"line_start":4396,"line_end":4396,"column_start":5,"column_end":74}},{"value":"/     EntryRef::Vacant(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241150,"byte_end":241190,"line_start":4397,"line_end":4397,"column_start":5,"column_end":45}},{"value":"/ };","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241195,"byte_end":241201,"line_start":4398,"line_end":4398,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241206,"byte_end":241209,"line_start":4399,"line_end":4399,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241214,"byte_end":241231,"line_start":4400,"line_end":4400,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Vacant(e) => {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241236,"byte_end":241268,"line_start":4401,"line_end":4401,"column_start":5,"column_end":37}},{"value":"/         assert_eq!(e.key(), \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241273,"byte_end":241318,"line_start":4402,"line_end":4402,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241323,"byte_end":241332,"line_start":4403,"line_end":4403,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Occupied(_) => panic!(),","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241337,"byte_end":241379,"line_start":4404,"line_end":4404,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241384,"byte_end":241389,"line_start":4405,"line_end":4405,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241394,"byte_end":241397,"line_start":4406,"line_end":4406,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241402,"byte_end":241446,"line_start":4407,"line_end":4407,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241451,"byte_end":241458,"line_start":4408,"line_end":4408,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":241499,"byte_end":241505,"line_start":4409,"line_end":4409,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242956,"byte_end":242959,"line_start":4456,"line_end":4456,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntryRef>::key","value":"pub fn key(&Self) -> &Q where K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntryRef`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242529,"byte_end":242602,"line_start":4443,"line_end":4443,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntryRef`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242607,"byte_end":242640,"line_start":4444,"line_end":4444,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242645,"byte_end":242648,"line_start":4445,"line_end":4445,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242653,"byte_end":242667,"line_start":4446,"line_end":4446,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242672,"byte_end":242675,"line_start":4447,"line_end":4447,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242680,"byte_end":242687,"line_start":4448,"line_end":4448,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242692,"byte_end":242719,"line_start":4449,"line_end":4449,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242724,"byte_end":242727,"line_start":4450,"line_end":4450,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242732,"byte_end":242787,"line_start":4451,"line_end":4451,"column_start":5,"column_end":60}},{"value":"/ let key: &str = \"poneyland\";","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242792,"byte_end":242824,"line_start":4452,"line_end":4452,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.entry_ref(key).key(), \"poneyland\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242829,"byte_end":242883,"line_start":4453,"line_end":4453,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242888,"byte_end":242895,"line_start":4454,"line_end":4454,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242936,"byte_end":242942,"line_start":4455,"line_end":4455,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243480,"byte_end":243488,"line_start":4479,"line_end":4479,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntryRef>::into_key","value":"pub fn into_key(Self) -> K where K: From<&'b Q>","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243048,"byte_end":243078,"line_start":4463,"line_end":4463,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243083,"byte_end":243086,"line_start":4464,"line_end":4464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243091,"byte_end":243105,"line_start":4465,"line_end":4465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243110,"byte_end":243113,"line_start":4466,"line_end":4466,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243118,"byte_end":243125,"line_start":4467,"line_end":4467,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243130,"byte_end":243157,"line_start":4468,"line_end":4468,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243162,"byte_end":243200,"line_start":4469,"line_end":4469,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243205,"byte_end":243208,"line_start":4470,"line_end":4470,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243213,"byte_end":243268,"line_start":4471,"line_end":4471,"column_start":5,"column_end":60}},{"value":"/ let key: &str = \"poneyland\";","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243273,"byte_end":243305,"line_start":4472,"line_end":4472,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243310,"byte_end":243313,"line_start":4473,"line_end":4473,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Vacant(v) = map.entry_ref(key) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243318,"byte_end":243371,"line_start":4474,"line_end":4474,"column_start":5,"column_end":58}},{"value":"/     v.into_key();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243376,"byte_end":243397,"line_start":4475,"line_end":4475,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243402,"byte_end":243407,"line_start":4476,"line_end":4476,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243412,"byte_end":243419,"line_start":4477,"line_end":4477,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243460,"byte_end":243466,"line_start":4478,"line_end":4478,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":244134,"byte_end":244140,"line_start":4504,"line_end":4504,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntryRef>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash + From<&'b Q>,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntryRef's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntryRef's key,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243581,"byte_end":243643,"line_start":4486,"line_end":4486,"column_start":5,"column_end":67}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243648,"byte_end":243690,"line_start":4487,"line_end":4487,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243695,"byte_end":243698,"line_start":4488,"line_end":4488,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243703,"byte_end":243717,"line_start":4489,"line_end":4489,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243722,"byte_end":243725,"line_start":4490,"line_end":4490,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243730,"byte_end":243737,"line_start":4491,"line_end":4491,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243742,"byte_end":243769,"line_start":4492,"line_end":4492,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243774,"byte_end":243812,"line_start":4493,"line_end":4493,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243817,"byte_end":243820,"line_start":4494,"line_end":4494,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243825,"byte_end":243880,"line_start":4495,"line_end":4495,"column_start":5,"column_end":60}},{"value":"/ let key: &str = \"poneyland\";","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243885,"byte_end":243917,"line_start":4496,"line_end":4496,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243922,"byte_end":243925,"line_start":4497,"line_end":4497,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Vacant(o) = map.entry_ref(key) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243930,"byte_end":243983,"line_start":4498,"line_end":4498,"column_start":5,"column_end":58}},{"value":"/     o.insert(37);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":243988,"byte_end":244009,"line_start":4499,"line_end":4499,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":244014,"byte_end":244019,"line_start":4500,"line_end":4500,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":244024,"byte_end":244061,"line_start":4501,"line_end":4501,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":244066,"byte_end":244073,"line_start":4502,"line_end":4502,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":244114,"byte_end":244120,"line_start":4503,"line_end":4503,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1860},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303195,"byte_end":303202,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1864}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":299823,"byte_end":299889,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":299890,"byte_end":299893,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":299894,"byte_end":299966,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":299967,"byte_end":300047,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300048,"byte_end":300124,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300125,"byte_end":300179,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300180,"byte_end":300183,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300184,"byte_end":300195,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300196,"byte_end":300232,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300233,"byte_end":300240,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300241,"byte_end":300244,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300245,"byte_end":300315,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300316,"byte_end":300319,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300320,"byte_end":300323,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300324,"byte_end":300397,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300398,"byte_end":300471,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300472,"byte_end":300547,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300548,"byte_end":300627,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300628,"byte_end":300644,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300645,"byte_end":300648,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300649,"byte_end":300728,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300729,"byte_end":300807,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300808,"byte_end":300888,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300889,"byte_end":300934,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300935,"byte_end":300938,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300939,"byte_end":300953,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300954,"byte_end":300957,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300958,"byte_end":300965,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300966,"byte_end":300993,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":300994,"byte_end":301062,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301063,"byte_end":301114,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301115,"byte_end":301150,"line_start":51,"line_end":51,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301151,"byte_end":301154,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301155,"byte_end":301177,"line_start":53,"line_end":53,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301178,"byte_end":301231,"line_start":54,"line_end":54,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301232,"byte_end":301286,"line_start":55,"line_end":55,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301287,"byte_end":301331,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301332,"byte_end":301381,"line_start":57,"line_end":57,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301382,"byte_end":301385,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301386,"byte_end":301418,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301419,"byte_end":301466,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301467,"byte_end":301539,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301540,"byte_end":301570,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301571,"byte_end":301576,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301577,"byte_end":301580,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301581,"byte_end":301602,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301603,"byte_end":301635,"line_start":66,"line_end":66,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301636,"byte_end":301639,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301640,"byte_end":301671,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301672,"byte_end":301696,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301697,"byte_end":301726,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301727,"byte_end":301732,"line_start":71,"line_end":71,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301733,"byte_end":301740,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301741,"byte_end":301744,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301745,"byte_end":301813,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`]. This will in the","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301814,"byte_end":301890,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301891,"byte_end":301923,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301924,"byte_end":301927,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301928,"byte_end":301935,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301936,"byte_end":301963,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":301964,"byte_end":302005,"line_start":80,"line_end":80,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302006,"byte_end":302025,"line_start":81,"line_end":81,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302026,"byte_end":302047,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302048,"byte_end":302069,"line_start":83,"line_end":83,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302070,"byte_end":302075,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302076,"byte_end":302079,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302080,"byte_end":302117,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302118,"byte_end":302121,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302122,"byte_end":302189,"line_start":88,"line_end":88,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302190,"byte_end":302257,"line_start":89,"line_end":89,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302258,"byte_end":302324,"line_start":90,"line_end":90,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302325,"byte_end":302393,"line_start":91,"line_end":91,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302394,"byte_end":302397,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302398,"byte_end":302453,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302454,"byte_end":302477,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302478,"byte_end":302506,"line_start":95,"line_end":95,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302507,"byte_end":302512,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302513,"byte_end":302520,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302521,"byte_end":302524,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302525,"byte_end":302602,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302603,"byte_end":302606,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302607,"byte_end":302614,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302615,"byte_end":302642,"line_start":102,"line_end":102,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302643,"byte_end":302646,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ let viking_names: HashSet<&'static str> =","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302647,"byte_end":302692,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/     [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302693,"byte_end":302757,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/ // use the values stored in the set","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302758,"byte_end":302797,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302798,"byte_end":302805,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302806,"byte_end":302809,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302810,"byte_end":302875,"line_start":109,"line_end":109,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302876,"byte_end":302935,"line_start":110,"line_end":110,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":302936,"byte_end":303000,"line_start":111,"line_end":111,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303001,"byte_end":303037,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303038,"byte_end":303111,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303112,"byte_end":303183,"line_start":114,"line_end":114,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1873},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304020,"byte_end":304023,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<HashSet<T, DefaultHashBuilder>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303652,"byte_end":303683,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303688,"byte_end":303691,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ The hash set is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303696,"byte_end":303788,"line_start":135,"line_end":135,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303793,"byte_end":303820,"line_start":136,"line_end":136,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303825,"byte_end":303828,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303833,"byte_end":303847,"line_start":138,"line_end":138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303852,"byte_end":303855,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303860,"byte_end":303867,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303872,"byte_end":303899,"line_start":141,"line_end":141,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303904,"byte_end":303947,"line_start":142,"line_end":142,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303952,"byte_end":303959,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304000,"byte_end":304006,"line_start":144,"line_end":144,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304576,"byte_end":304589,"line_start":164,"line_end":164,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashSet<T, DefaultHashBuilder>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304105,"byte_end":304164,"line_start":151,"line_end":151,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304169,"byte_end":304172,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304177,"byte_end":304251,"line_start":153,"line_end":153,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304256,"byte_end":304325,"line_start":154,"line_end":154,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304330,"byte_end":304333,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304338,"byte_end":304352,"line_start":156,"line_end":156,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304357,"byte_end":304360,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304365,"byte_end":304372,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304377,"byte_end":304404,"line_start":159,"line_end":159,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304409,"byte_end":304464,"line_start":160,"line_end":160,"column_start":5,"column_end":60}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304469,"byte_end":304503,"line_start":161,"line_end":161,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304508,"byte_end":304515,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304556,"byte_end":304562,"line_start":163,"line_end":163,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305177,"byte_end":305183,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"new_in","qualname":"<HashSet<T, DefaultHashBuilder, A>>::new_in","value":"pub fn new_in(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304809,"byte_end":304840,"line_start":173,"line_end":173,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304845,"byte_end":304848,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The hash set is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304853,"byte_end":304945,"line_start":175,"line_end":175,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304950,"byte_end":304977,"line_start":176,"line_end":176,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304982,"byte_end":304985,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304990,"byte_end":305004,"line_start":178,"line_end":178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305009,"byte_end":305012,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305017,"byte_end":305024,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305029,"byte_end":305056,"line_start":181,"line_end":181,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305061,"byte_end":305104,"line_start":182,"line_end":182,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305109,"byte_end":305116,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305157,"byte_end":305163,"line_start":184,"line_end":184,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305752,"byte_end":305768,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<HashSet<T, DefaultHashBuilder, A>>::with_capacity_in","value":"pub fn with_capacity_in(usize, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305281,"byte_end":305340,"line_start":191,"line_end":191,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305345,"byte_end":305348,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305353,"byte_end":305427,"line_start":193,"line_end":193,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305432,"byte_end":305501,"line_start":194,"line_end":194,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305506,"byte_end":305509,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305514,"byte_end":305528,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305533,"byte_end":305536,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305541,"byte_end":305548,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305553,"byte_end":305580,"line_start":199,"line_end":199,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305585,"byte_end":305640,"line_start":200,"line_end":200,"column_start":5,"column_end":60}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305645,"byte_end":305679,"line_start":201,"line_end":201,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305684,"byte_end":305691,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305732,"byte_end":305738,"line_start":203,"line_end":203,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306283,"byte_end":306291,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305957,"byte_end":306030,"line_start":212,"line_end":212,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306035,"byte_end":306038,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306043,"byte_end":306057,"line_start":214,"line_end":214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306062,"byte_end":306065,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306070,"byte_end":306077,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306082,"byte_end":306109,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306114,"byte_end":306170,"line_start":218,"line_end":218,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306175,"byte_end":306210,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306215,"byte_end":306222,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306263,"byte_end":306269,"line_start":221,"line_end":221,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306816,"byte_end":306820,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S, A>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306349,"byte_end":306406,"line_start":226,"line_end":226,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306411,"byte_end":306452,"line_start":227,"line_end":227,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306457,"byte_end":306460,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306465,"byte_end":306479,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306484,"byte_end":306487,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306492,"byte_end":306499,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306504,"byte_end":306531,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306536,"byte_end":306569,"line_start":233,"line_end":233,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306574,"byte_end":306594,"line_start":234,"line_end":234,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306599,"byte_end":306619,"line_start":235,"line_end":235,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306624,"byte_end":306627,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306632,"byte_end":306672,"line_start":237,"line_end":237,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306677,"byte_end":306702,"line_start":238,"line_end":238,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306707,"byte_end":306733,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306738,"byte_end":306743,"line_start":240,"line_end":240,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306748,"byte_end":306755,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306796,"byte_end":306802,"line_start":242,"line_end":242,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307243,"byte_end":307246,"line_start":262,"line_end":262,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306916,"byte_end":306962,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306967,"byte_end":306970,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306975,"byte_end":306989,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":306994,"byte_end":306997,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307002,"byte_end":307009,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307014,"byte_end":307041,"line_start":254,"line_end":254,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307046,"byte_end":307049,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307054,"byte_end":307085,"line_start":256,"line_end":256,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307090,"byte_end":307117,"line_start":257,"line_end":257,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307122,"byte_end":307138,"line_start":258,"line_end":258,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307143,"byte_end":307170,"line_start":259,"line_end":259,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307175,"byte_end":307182,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307223,"byte_end":307229,"line_start":261,"line_end":261,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307630,"byte_end":307638,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307299,"byte_end":307350,"line_start":266,"line_end":266,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307355,"byte_end":307358,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307363,"byte_end":307377,"line_start":268,"line_end":268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307382,"byte_end":307385,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307390,"byte_end":307397,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307402,"byte_end":307429,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307434,"byte_end":307437,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307442,"byte_end":307473,"line_start":273,"line_end":273,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307478,"byte_end":307504,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307509,"byte_end":307525,"line_start":275,"line_end":275,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307530,"byte_end":307557,"line_start":276,"line_end":276,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307562,"byte_end":307569,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307610,"byte_end":307616,"line_start":278,"line_end":278,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308186,"byte_end":308191,"line_start":301,"line_end":301,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S, A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307695,"byte_end":307753,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307758,"byte_end":307761,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307766,"byte_end":307780,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307785,"byte_end":307788,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307793,"byte_end":307800,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307805,"byte_end":307832,"line_start":288,"line_end":288,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307837,"byte_end":307840,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307845,"byte_end":307911,"line_start":290,"line_end":290,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307916,"byte_end":307945,"line_start":291,"line_end":291,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307950,"byte_end":307953,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":307958,"byte_end":308000,"line_start":293,"line_end":293,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308005,"byte_end":308031,"line_start":294,"line_end":294,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308036,"byte_end":308062,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308067,"byte_end":308072,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308077,"byte_end":308080,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308085,"byte_end":308113,"line_start":298,"line_end":298,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308118,"byte_end":308125,"line_start":299,"line_end":299,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308166,"byte_end":308172,"line_start":300,"line_end":300,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308725,"byte_end":308731,"line_start":321,"line_end":321,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S, A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308297,"byte_end":308354,"line_start":307,"line_end":307,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308359,"byte_end":308362,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308367,"byte_end":308445,"line_start":309,"line_end":309,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308450,"byte_end":308453,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308458,"byte_end":308472,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308477,"byte_end":308480,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308485,"byte_end":308492,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308497,"byte_end":308524,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308529,"byte_end":308532,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308537,"byte_end":308564,"line_start":316,"line_end":316,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308569,"byte_end":308630,"line_start":317,"line_end":317,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308635,"byte_end":308667,"line_start":318,"line_end":318,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308672,"byte_end":308701,"line_start":319,"line_end":319,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308706,"byte_end":308713,"line_start":320,"line_end":320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309801,"byte_end":309813,"line_start":354,"line_end":354,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashSet<T, S, A>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, T, F, A> where\nF: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are true under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are true under the given predicate,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308851,"byte_end":308912,"line_start":328,"line_end":328,"column_start":5,"column_end":66}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308917,"byte_end":308968,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308973,"byte_end":308976,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ In other words, move all elements `e` such that `f(&e)` returns `true` out","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":308981,"byte_end":309059,"line_start":331,"line_end":331,"column_start":5,"column_end":83}},{"value":"/ into another iterator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309064,"byte_end":309090,"line_start":332,"line_end":332,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309095,"byte_end":309098,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, any remaining elements that satisfy","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309103,"byte_end":309186,"line_start":334,"line_end":334,"column_start":5,"column_end":88}},{"value":"/ the predicate are dropped from the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309191,"byte_end":309234,"line_start":335,"line_end":335,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309239,"byte_end":309242,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309247,"byte_end":309261,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309266,"byte_end":309269,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309274,"byte_end":309281,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309286,"byte_end":309313,"line_start":340,"line_end":340,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309318,"byte_end":309321,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<i32> = (0..8).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309326,"byte_end":309375,"line_start":342,"line_end":342,"column_start":5,"column_end":54}},{"value":"/ let drained: HashSet<i32> = set.drain_filter(|v| v % 2 == 0).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309380,"byte_end":309455,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309460,"byte_end":309463,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ let mut evens = drained.into_iter().collect::<Vec<_>>();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309468,"byte_end":309528,"line_start":345,"line_end":345,"column_start":5,"column_end":65}},{"value":"/ let mut odds = set.into_iter().collect::<Vec<_>>();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309533,"byte_end":309588,"line_start":346,"line_end":346,"column_start":5,"column_end":60}},{"value":"/ evens.sort();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309593,"byte_end":309610,"line_start":347,"line_end":347,"column_start":5,"column_end":22}},{"value":"/ odds.sort();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309615,"byte_end":309631,"line_start":348,"line_end":348,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309636,"byte_end":309639,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![0, 2, 4, 6]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309644,"byte_end":309684,"line_start":350,"line_end":350,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 7]);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309689,"byte_end":309728,"line_start":351,"line_end":351,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309733,"byte_end":309740,"line_start":352,"line_end":352,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":309781,"byte_end":309787,"line_start":353,"line_end":353,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310426,"byte_end":310431,"line_start":380,"line_end":380,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310119,"byte_end":310159,"line_start":367,"line_end":367,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310164,"byte_end":310167,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310172,"byte_end":310186,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310191,"byte_end":310194,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310199,"byte_end":310206,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310211,"byte_end":310238,"line_start":372,"line_end":372,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310243,"byte_end":310246,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310251,"byte_end":310282,"line_start":374,"line_end":374,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310287,"byte_end":310303,"line_start":375,"line_end":375,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310308,"byte_end":310322,"line_start":376,"line_end":376,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310327,"byte_end":310353,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310358,"byte_end":310365,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310406,"byte_end":310412,"line_start":379,"line_end":379,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311537,"byte_end":311548,"line_start":413,"line_end":413,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<HashSet<T, S, Global>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310519,"byte_end":310591,"line_start":386,"line_end":386,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310596,"byte_end":310605,"line_start":387,"line_end":387,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310610,"byte_end":310613,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310618,"byte_end":310685,"line_start":389,"line_end":389,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310690,"byte_end":310693,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310698,"byte_end":310755,"line_start":391,"line_end":391,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310760,"byte_end":310827,"line_start":392,"line_end":392,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310832,"byte_end":310895,"line_start":393,"line_end":393,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310900,"byte_end":310964,"line_start":394,"line_end":394,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310969,"byte_end":310972,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310977,"byte_end":311053,"line_start":396,"line_end":396,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311058,"byte_end":311122,"line_start":397,"line_end":397,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311127,"byte_end":311130,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311135,"byte_end":311138,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311143,"byte_end":311157,"line_start":400,"line_end":400,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311162,"byte_end":311165,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311170,"byte_end":311177,"line_start":402,"line_end":402,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311182,"byte_end":311209,"line_start":403,"line_end":403,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311214,"byte_end":311262,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311267,"byte_end":311270,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311275,"byte_end":311317,"line_start":406,"line_end":406,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311322,"byte_end":311364,"line_start":407,"line_end":407,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311369,"byte_end":311387,"line_start":408,"line_end":408,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311392,"byte_end":311399,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311404,"byte_end":311407,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311412,"byte_end":311470,"line_start":411,"line_end":411,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311511,"byte_end":311517,"line_start":412,"line_end":412,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312769,"byte_end":312793,"line_start":446,"line_end":446,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S, Global>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311653,"byte_end":311718,"line_start":419,"line_end":419,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311723,"byte_end":311753,"line_start":420,"line_end":420,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311758,"byte_end":311761,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311766,"byte_end":311840,"line_start":422,"line_end":422,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311845,"byte_end":311914,"line_start":423,"line_end":423,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311919,"byte_end":311922,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311927,"byte_end":311984,"line_start":425,"line_end":425,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":311989,"byte_end":312056,"line_start":426,"line_end":426,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312061,"byte_end":312124,"line_start":427,"line_end":427,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312129,"byte_end":312193,"line_start":428,"line_end":428,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312198,"byte_end":312201,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312206,"byte_end":312282,"line_start":430,"line_end":430,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312287,"byte_end":312351,"line_start":431,"line_end":431,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312356,"byte_end":312359,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312364,"byte_end":312378,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312383,"byte_end":312386,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312391,"byte_end":312398,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312403,"byte_end":312430,"line_start":436,"line_end":436,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312435,"byte_end":312483,"line_start":437,"line_end":437,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312488,"byte_end":312491,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312496,"byte_end":312538,"line_start":439,"line_end":439,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312543,"byte_end":312602,"line_start":440,"line_end":440,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312607,"byte_end":312625,"line_start":441,"line_end":441,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312630,"byte_end":312637,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312642,"byte_end":312645,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312650,"byte_end":312708,"line_start":444,"line_end":444,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312749,"byte_end":312755,"line_start":445,"line_end":445,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313083,"byte_end":313092,"line_start":459,"line_end":459,"column_start":12,"column_end":21},"name":"allocator","qualname":"<HashSet<T, S, A>>::allocator","value":"pub fn allocator(&Self) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying allocator.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying allocator.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313005,"byte_end":313057,"line_start":457,"line_end":457,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313062,"byte_end":313071,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1905},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313923,"byte_end":313937,"line_start":484,"line_end":484,"column_start":12,"column_end":26},"name":"with_hasher_in","qualname":"<HashSet<T, S, A>>::with_hasher_in","value":"pub fn with_hasher_in(S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313148,"byte_end":313220,"line_start":463,"line_end":463,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313225,"byte_end":313234,"line_start":464,"line_end":464,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313239,"byte_end":313242,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313247,"byte_end":313314,"line_start":466,"line_end":466,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313319,"byte_end":313322,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313327,"byte_end":313384,"line_start":468,"line_end":468,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313389,"byte_end":313456,"line_start":469,"line_end":469,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313461,"byte_end":313524,"line_start":470,"line_end":470,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313529,"byte_end":313593,"line_start":471,"line_end":471,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313598,"byte_end":313601,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313606,"byte_end":313620,"line_start":473,"line_end":473,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313625,"byte_end":313628,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313633,"byte_end":313640,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313645,"byte_end":313672,"line_start":476,"line_end":476,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313677,"byte_end":313725,"line_start":477,"line_end":477,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313730,"byte_end":313733,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313738,"byte_end":313780,"line_start":479,"line_end":479,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313785,"byte_end":313827,"line_start":480,"line_end":480,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313832,"byte_end":313850,"line_start":481,"line_end":481,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313855,"byte_end":313862,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":313903,"byte_end":313909,"line_start":483,"line_end":483,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314949,"byte_end":314976,"line_start":512,"line_end":512,"column_start":12,"column_end":39},"name":"with_capacity_and_hasher_in","qualname":"<HashSet<T, S, A>>::with_capacity_and_hasher_in","value":"pub fn with_capacity_and_hasher_in(usize, S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314062,"byte_end":314127,"line_start":490,"line_end":490,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314132,"byte_end":314162,"line_start":491,"line_end":491,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314167,"byte_end":314170,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314175,"byte_end":314249,"line_start":493,"line_end":493,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314254,"byte_end":314323,"line_start":494,"line_end":494,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314328,"byte_end":314331,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314336,"byte_end":314393,"line_start":496,"line_end":496,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314398,"byte_end":314465,"line_start":497,"line_end":497,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314470,"byte_end":314533,"line_start":498,"line_end":498,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314538,"byte_end":314602,"line_start":499,"line_end":499,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314607,"byte_end":314610,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314615,"byte_end":314629,"line_start":501,"line_end":501,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314634,"byte_end":314637,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314642,"byte_end":314649,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314654,"byte_end":314681,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314686,"byte_end":314734,"line_start":505,"line_end":505,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314739,"byte_end":314742,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314747,"byte_end":314789,"line_start":507,"line_end":507,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314794,"byte_end":314853,"line_start":508,"line_end":508,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314858,"byte_end":314876,"line_start":509,"line_end":509,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314881,"byte_end":314888,"line_start":510,"line_end":510,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":314929,"byte_end":314935,"line_start":511,"line_end":511,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315668,"byte_end":315674,"line_start":533,"line_end":533,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S, A>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315141,"byte_end":315194,"line_start":518,"line_end":518,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315199,"byte_end":315202,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315207,"byte_end":315285,"line_start":520,"line_end":520,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315290,"byte_end":315293,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315298,"byte_end":315312,"line_start":522,"line_end":522,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315317,"byte_end":315320,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315325,"byte_end":315332,"line_start":524,"line_end":524,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315337,"byte_end":315364,"line_start":525,"line_end":525,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315369,"byte_end":315417,"line_start":526,"line_end":526,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315422,"byte_end":315425,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315430,"byte_end":315477,"line_start":528,"line_end":528,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315482,"byte_end":315539,"line_start":529,"line_end":529,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315544,"byte_end":315595,"line_start":530,"line_end":530,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315600,"byte_end":315607,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315648,"byte_end":315654,"line_start":532,"line_end":532,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1912},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316375,"byte_end":316382,"line_start":561,"line_end":561,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S, A>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315832,"byte_end":315908,"line_start":544,"line_end":544,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315913,"byte_end":315981,"line_start":545,"line_end":545,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315986,"byte_end":316013,"line_start":546,"line_end":546,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316018,"byte_end":316021,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316026,"byte_end":316038,"line_start":548,"line_end":548,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316043,"byte_end":316046,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316051,"byte_end":316107,"line_start":550,"line_end":550,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316112,"byte_end":316115,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316120,"byte_end":316134,"line_start":552,"line_end":552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316139,"byte_end":316142,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316147,"byte_end":316154,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316159,"byte_end":316186,"line_start":555,"line_end":555,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316191,"byte_end":316238,"line_start":556,"line_end":556,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316243,"byte_end":316263,"line_start":557,"line_end":557,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316268,"byte_end":316302,"line_start":558,"line_end":558,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316307,"byte_end":316314,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316355,"byte_end":316361,"line_start":560,"line_end":560,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317090,"byte_end":317101,"line_start":582,"line_end":582,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S, A>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316464,"byte_end":316548,"line_start":565,"line_end":565,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316553,"byte_end":316632,"line_start":566,"line_end":566,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316637,"byte_end":316664,"line_start":567,"line_end":567,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316669,"byte_end":316672,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316677,"byte_end":316689,"line_start":569,"line_end":569,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316694,"byte_end":316697,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316702,"byte_end":316782,"line_start":571,"line_end":571,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316787,"byte_end":316803,"line_start":572,"line_end":572,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316808,"byte_end":316811,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316816,"byte_end":316830,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316835,"byte_end":316838,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316843,"byte_end":316850,"line_start":576,"line_end":576,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316855,"byte_end":316882,"line_start":577,"line_end":577,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316887,"byte_end":316934,"line_start":578,"line_end":578,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":316939,"byte_end":317017,"line_start":579,"line_end":579,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317022,"byte_end":317029,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317070,"byte_end":317076,"line_start":581,"line_end":581,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1914},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317798,"byte_end":317811,"line_start":603,"line_end":603,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S, A>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317217,"byte_end":317286,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317291,"byte_end":317356,"line_start":587,"line_end":587,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317361,"byte_end":317434,"line_start":588,"line_end":588,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317439,"byte_end":317442,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317447,"byte_end":317461,"line_start":590,"line_end":590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317466,"byte_end":317469,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317474,"byte_end":317481,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317486,"byte_end":317513,"line_start":593,"line_end":593,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317518,"byte_end":317521,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317526,"byte_end":317572,"line_start":595,"line_end":595,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317577,"byte_end":317595,"line_start":596,"line_end":596,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317600,"byte_end":317618,"line_start":597,"line_end":597,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317623,"byte_end":317658,"line_start":598,"line_end":598,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317663,"byte_end":317687,"line_start":599,"line_end":599,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317692,"byte_end":317725,"line_start":600,"line_end":600,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317730,"byte_end":317737,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317778,"byte_end":317784,"line_start":602,"line_end":602,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1915},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318628,"byte_end":318637,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S, A>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317870,"byte_end":317938,"line_start":607,"line_end":607,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":317943,"byte_end":318021,"line_start":608,"line_end":608,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318026,"byte_end":318099,"line_start":609,"line_end":609,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318104,"byte_end":318107,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318112,"byte_end":318175,"line_start":611,"line_end":611,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318180,"byte_end":318201,"line_start":612,"line_end":612,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318206,"byte_end":318209,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318214,"byte_end":318228,"line_start":614,"line_end":614,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318233,"byte_end":318236,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318241,"byte_end":318248,"line_start":616,"line_end":616,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318253,"byte_end":318280,"line_start":617,"line_end":617,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318285,"byte_end":318288,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318293,"byte_end":318339,"line_start":619,"line_end":619,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318344,"byte_end":318362,"line_start":620,"line_end":620,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318367,"byte_end":318385,"line_start":621,"line_end":621,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318390,"byte_end":318425,"line_start":622,"line_end":622,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318430,"byte_end":318452,"line_start":623,"line_end":623,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318457,"byte_end":318491,"line_start":624,"line_end":624,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318496,"byte_end":318517,"line_start":625,"line_end":625,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318522,"byte_end":318555,"line_start":626,"line_end":626,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318560,"byte_end":318567,"line_start":627,"line_end":627,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318608,"byte_end":318614,"line_start":628,"line_end":628,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319580,"byte_end":319590,"line_start":657,"line_end":657,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S, A>>::difference","value":"pub fn difference<'a>(&'a Self, &'a Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318725,"byte_end":318775,"line_start":633,"line_end":633,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318780,"byte_end":318839,"line_start":634,"line_end":634,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318844,"byte_end":318847,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318852,"byte_end":318866,"line_start":636,"line_end":636,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318871,"byte_end":318874,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318879,"byte_end":318886,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318891,"byte_end":318918,"line_start":639,"line_end":639,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318923,"byte_end":318983,"line_start":640,"line_end":640,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":318988,"byte_end":319051,"line_start":641,"line_end":641,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319056,"byte_end":319059,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319064,"byte_end":319094,"line_start":643,"line_end":643,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319099,"byte_end":319130,"line_start":644,"line_end":644,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319135,"byte_end":319172,"line_start":645,"line_end":645,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319177,"byte_end":319182,"line_start":646,"line_end":646,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319187,"byte_end":319190,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319195,"byte_end":319249,"line_start":648,"line_end":648,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319254,"byte_end":319297,"line_start":649,"line_end":649,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319302,"byte_end":319305,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319310,"byte_end":319355,"line_start":651,"line_end":651,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319360,"byte_end":319400,"line_start":652,"line_end":652,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319405,"byte_end":319459,"line_start":653,"line_end":653,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319464,"byte_end":319507,"line_start":654,"line_end":654,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319512,"byte_end":319519,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319560,"byte_end":319566,"line_start":656,"line_end":656,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320542,"byte_end":320562,"line_start":686,"line_end":686,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S, A>>::symmetric_difference","value":"pub fn symmetric_difference<'a>(&'a Self, &'a Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319743,"byte_end":319803,"line_start":664,"line_end":664,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319808,"byte_end":319878,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319883,"byte_end":319886,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319891,"byte_end":319905,"line_start":667,"line_end":667,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319910,"byte_end":319913,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319918,"byte_end":319925,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319930,"byte_end":319957,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":319962,"byte_end":320022,"line_start":671,"line_end":671,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320027,"byte_end":320090,"line_start":672,"line_end":672,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320095,"byte_end":320098,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320103,"byte_end":320140,"line_start":674,"line_end":674,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320145,"byte_end":320186,"line_start":675,"line_end":675,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320191,"byte_end":320217,"line_start":676,"line_end":676,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320222,"byte_end":320227,"line_start":677,"line_end":677,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320232,"byte_end":320235,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320240,"byte_end":320305,"line_start":679,"line_end":679,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320310,"byte_end":320375,"line_start":680,"line_end":680,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320380,"byte_end":320383,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320388,"byte_end":320417,"line_start":682,"line_end":682,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320422,"byte_end":320469,"line_start":683,"line_end":683,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320474,"byte_end":320481,"line_start":684,"line_end":684,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320522,"byte_end":320528,"line_start":685,"line_end":685,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1920},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321419,"byte_end":321431,"line_start":711,"line_end":711,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S, A>>::intersection","value":"pub fn intersection<'a>(&'a Self, &'a Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320755,"byte_end":320807,"line_start":692,"line_end":692,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320812,"byte_end":320869,"line_start":693,"line_end":693,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320874,"byte_end":320877,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320882,"byte_end":320896,"line_start":695,"line_end":695,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320901,"byte_end":320904,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320909,"byte_end":320916,"line_start":697,"line_end":697,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320921,"byte_end":320948,"line_start":698,"line_end":698,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":320953,"byte_end":321013,"line_start":699,"line_end":699,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321018,"byte_end":321081,"line_start":700,"line_end":700,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321086,"byte_end":321089,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321094,"byte_end":321131,"line_start":702,"line_end":702,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321136,"byte_end":321169,"line_start":703,"line_end":703,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321174,"byte_end":321200,"line_start":704,"line_end":704,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321205,"byte_end":321210,"line_start":705,"line_end":705,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321215,"byte_end":321218,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321223,"byte_end":321287,"line_start":707,"line_end":707,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321292,"byte_end":321346,"line_start":708,"line_end":708,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321351,"byte_end":321358,"line_start":709,"line_end":709,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321399,"byte_end":321405,"line_start":710,"line_end":710,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322392,"byte_end":322397,"line_start":742,"line_end":742,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S, A>>::union","value":"pub fn union<'a>(&'a Self, &'a Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321742,"byte_end":321787,"line_start":723,"line_end":723,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321792,"byte_end":321858,"line_start":724,"line_end":724,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321863,"byte_end":321866,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321871,"byte_end":321885,"line_start":726,"line_end":726,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321890,"byte_end":321893,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321898,"byte_end":321905,"line_start":728,"line_end":728,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321910,"byte_end":321937,"line_start":729,"line_end":729,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":321942,"byte_end":322002,"line_start":730,"line_end":730,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322007,"byte_end":322070,"line_start":731,"line_end":731,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322075,"byte_end":322078,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322083,"byte_end":322126,"line_start":733,"line_end":733,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322131,"byte_end":322157,"line_start":734,"line_end":734,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322162,"byte_end":322188,"line_start":735,"line_end":735,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322193,"byte_end":322198,"line_start":736,"line_end":736,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322203,"byte_end":322206,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322211,"byte_end":322261,"line_start":738,"line_end":738,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322266,"byte_end":322319,"line_start":739,"line_end":739,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322324,"byte_end":322331,"line_start":740,"line_end":740,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322372,"byte_end":322378,"line_start":741,"line_end":741,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323555,"byte_end":323563,"line_start":774,"line_end":774,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S, A>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322875,"byte_end":322922,"line_start":755,"line_end":755,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322927,"byte_end":322930,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":322935,"byte_end":323002,"line_start":757,"line_end":757,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323007,"byte_end":323074,"line_start":758,"line_end":758,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323079,"byte_end":323098,"line_start":759,"line_end":759,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323103,"byte_end":323106,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323111,"byte_end":323125,"line_start":761,"line_end":761,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323130,"byte_end":323133,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323138,"byte_end":323145,"line_start":763,"line_end":763,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323150,"byte_end":323177,"line_start":764,"line_end":764,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323182,"byte_end":323185,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323190,"byte_end":323252,"line_start":766,"line_end":766,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323257,"byte_end":323296,"line_start":767,"line_end":767,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323301,"byte_end":323341,"line_start":768,"line_end":768,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323346,"byte_end":323353,"line_start":769,"line_end":769,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323358,"byte_end":323361,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323366,"byte_end":323425,"line_start":771,"line_end":771,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323430,"byte_end":323494,"line_start":772,"line_end":772,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323535,"byte_end":323541,"line_start":773,"line_end":773,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324425,"byte_end":324428,"line_start":801,"line_end":801,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S, A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323709,"byte_end":323799,"line_start":782,"line_end":782,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323804,"byte_end":323807,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323812,"byte_end":323879,"line_start":784,"line_end":784,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323884,"byte_end":323951,"line_start":785,"line_end":785,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323956,"byte_end":323975,"line_start":786,"line_end":786,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323980,"byte_end":323983,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":323988,"byte_end":324002,"line_start":788,"line_end":788,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324007,"byte_end":324010,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324015,"byte_end":324022,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324027,"byte_end":324054,"line_start":791,"line_end":791,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324059,"byte_end":324062,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324067,"byte_end":324129,"line_start":793,"line_end":793,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324134,"byte_end":324172,"line_start":794,"line_end":794,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324177,"byte_end":324211,"line_start":795,"line_end":795,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324216,"byte_end":324223,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324228,"byte_end":324231,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324236,"byte_end":324295,"line_start":798,"line_end":798,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324300,"byte_end":324364,"line_start":799,"line_end":799,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324405,"byte_end":324411,"line_start":800,"line_end":800,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325257,"byte_end":325270,"line_start":828,"line_end":828,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<HashSet<T, S, A>>::get_or_insert","value":"pub fn get_or_insert(&mut Self, T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given `value` into the set if it is not present, then\n returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts the given `value` into the set if it is not present, then","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324720,"byte_end":324789,"line_start":813,"line_end":813,"column_start":5,"column_end":74}},{"value":"/ returns a reference to the value in the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324794,"byte_end":324842,"line_start":814,"line_end":814,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324847,"byte_end":324850,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324855,"byte_end":324869,"line_start":816,"line_end":816,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324874,"byte_end":324877,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324882,"byte_end":324889,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324894,"byte_end":324921,"line_start":819,"line_end":819,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324926,"byte_end":324929,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":324934,"byte_end":325000,"line_start":821,"line_end":821,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325005,"byte_end":325034,"line_start":822,"line_end":822,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(set.get_or_insert(2), &2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325039,"byte_end":325080,"line_start":823,"line_end":823,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(set.get_or_insert(100), &100);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325085,"byte_end":325130,"line_start":824,"line_end":824,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.len(), 4); // 100 was inserted","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325135,"byte_end":325184,"line_start":825,"line_end":825,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325189,"byte_end":325196,"line_start":826,"line_end":826,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325237,"byte_end":325243,"line_start":827,"line_end":827,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1929},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326261,"byte_end":326280,"line_start":857,"line_end":857,"column_start":12,"column_end":31},"name":"get_or_insert_owned","qualname":"<HashSet<T, S, A>>::get_or_insert_owned","value":"pub fn get_or_insert_owned<Q: ?Sized>(&mut Self, &Q) -> &T where T: Borrow<Q>,\nQ: Hash + Eq + ToOwned<Owned = T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts an owned copy of the given `value` into the set if it is not\n present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts an owned copy of the given `value` into the set if it is not","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325625,"byte_end":325697,"line_start":838,"line_end":838,"column_start":5,"column_end":77}},{"value":"/ present, then returns a reference to the value in the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325702,"byte_end":325764,"line_start":839,"line_end":839,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325769,"byte_end":325772,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325777,"byte_end":325791,"line_start":841,"line_end":841,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325796,"byte_end":325799,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325804,"byte_end":325811,"line_start":843,"line_end":843,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325816,"byte_end":325843,"line_start":844,"line_end":844,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325848,"byte_end":325851,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325856,"byte_end":325914,"line_start":846,"line_end":846,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325919,"byte_end":325972,"line_start":847,"line_end":847,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325977,"byte_end":325980,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":325985,"byte_end":326014,"line_start":849,"line_end":849,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326019,"byte_end":326060,"line_start":850,"line_end":850,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_owned(pet);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326065,"byte_end":326114,"line_start":851,"line_end":851,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326119,"byte_end":326150,"line_start":852,"line_end":852,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326155,"byte_end":326160,"line_start":853,"line_end":853,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326165,"byte_end":326223,"line_start":854,"line_end":854,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326228,"byte_end":326235,"line_start":855,"line_end":855,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326240,"byte_end":326249,"line_start":856,"line_end":856,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327437,"byte_end":327455,"line_start":890,"line_end":890,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<HashSet<T, S, A>>::get_or_insert_with","value":"pub fn get_or_insert_with<Q: ?Sized, F>(&mut Self, &Q, F) -> &T where\nT: Borrow<Q>, Q: Hash + Eq, F: FnOnce(&Q) -> T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a value computed from `f` into the set if the given `value` is\n not present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts a value computed from `f` into the set if the given `value` is","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326746,"byte_end":326820,"line_start":871,"line_end":871,"column_start":5,"column_end":79}},{"value":"/ not present, then returns a reference to the value in the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326825,"byte_end":326891,"line_start":872,"line_end":872,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326896,"byte_end":326899,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326904,"byte_end":326918,"line_start":874,"line_end":874,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326923,"byte_end":326926,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326931,"byte_end":326938,"line_start":876,"line_end":876,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326943,"byte_end":326970,"line_start":877,"line_end":877,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326975,"byte_end":326978,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":326983,"byte_end":327041,"line_start":879,"line_end":879,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327046,"byte_end":327099,"line_start":880,"line_end":880,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327104,"byte_end":327107,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327112,"byte_end":327141,"line_start":882,"line_end":882,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327146,"byte_end":327187,"line_start":883,"line_end":883,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_with(pet, str::to_owned);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327192,"byte_end":327255,"line_start":884,"line_end":884,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327260,"byte_end":327291,"line_start":885,"line_end":885,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327296,"byte_end":327301,"line_start":886,"line_end":886,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327306,"byte_end":327364,"line_start":887,"line_end":887,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327369,"byte_end":327376,"line_start":888,"line_end":888,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327417,"byte_end":327423,"line_start":889,"line_end":889,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328461,"byte_end":328472,"line_start":922,"line_end":922,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S, A>>::is_disjoint","value":"pub fn is_disjoint(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":327929,"byte_end":327997,"line_start":905,"line_end":905,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328002,"byte_end":328063,"line_start":906,"line_end":906,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328068,"byte_end":328071,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328076,"byte_end":328090,"line_start":908,"line_end":908,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328095,"byte_end":328098,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328103,"byte_end":328110,"line_start":910,"line_end":910,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328115,"byte_end":328142,"line_start":911,"line_end":911,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328147,"byte_end":328150,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328155,"byte_end":328215,"line_start":913,"line_end":913,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328220,"byte_end":328251,"line_start":914,"line_end":914,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328256,"byte_end":328259,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328264,"byte_end":328304,"line_start":916,"line_end":916,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328309,"byte_end":328325,"line_start":917,"line_end":917,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328330,"byte_end":328370,"line_start":918,"line_end":918,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328375,"byte_end":328391,"line_start":919,"line_end":919,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328396,"byte_end":328437,"line_start":920,"line_end":920,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328442,"byte_end":328449,"line_start":921,"line_end":921,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329094,"byte_end":329103,"line_start":943,"line_end":943,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S, A>>::is_subset","value":"pub fn is_subset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328563,"byte_end":328616,"line_start":926,"line_end":926,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328621,"byte_end":328682,"line_start":927,"line_end":927,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328687,"byte_end":328690,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328695,"byte_end":328709,"line_start":929,"line_end":929,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328714,"byte_end":328717,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328722,"byte_end":328729,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328734,"byte_end":328761,"line_start":932,"line_end":932,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328766,"byte_end":328769,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328774,"byte_end":328836,"line_start":934,"line_end":934,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328841,"byte_end":328874,"line_start":935,"line_end":935,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328879,"byte_end":328882,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328887,"byte_end":328929,"line_start":937,"line_end":937,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328934,"byte_end":328952,"line_start":938,"line_end":938,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":328957,"byte_end":328999,"line_start":939,"line_end":939,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329004,"byte_end":329022,"line_start":940,"line_end":940,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329027,"byte_end":329070,"line_start":941,"line_end":941,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329075,"byte_end":329082,"line_start":942,"line_end":942,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329847,"byte_end":329858,"line_start":968,"line_end":968,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S, A>>::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329222,"byte_end":329277,"line_start":947,"line_end":947,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329282,"byte_end":329343,"line_start":948,"line_end":948,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329348,"byte_end":329351,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329356,"byte_end":329370,"line_start":950,"line_end":950,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329375,"byte_end":329378,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329383,"byte_end":329390,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329395,"byte_end":329422,"line_start":953,"line_end":953,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329427,"byte_end":329430,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329435,"byte_end":329494,"line_start":955,"line_end":955,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329499,"byte_end":329532,"line_start":956,"line_end":956,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329537,"byte_end":329540,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329545,"byte_end":329590,"line_start":958,"line_end":958,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329595,"byte_end":329598,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329603,"byte_end":329621,"line_start":960,"line_end":960,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329626,"byte_end":329644,"line_start":961,"line_end":961,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329649,"byte_end":329694,"line_start":962,"line_end":962,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329699,"byte_end":329702,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329707,"byte_end":329725,"line_start":964,"line_end":964,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329730,"byte_end":329774,"line_start":965,"line_end":965,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329779,"byte_end":329786,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329827,"byte_end":329833,"line_start":967,"line_end":967,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1941},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330439,"byte_end":330445,"line_start":990,"line_end":990,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S, A>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329931,"byte_end":329959,"line_start":972,"line_end":972,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329964,"byte_end":329967,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":329972,"byte_end":330039,"line_start":974,"line_end":974,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330044,"byte_end":330047,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330052,"byte_end":330116,"line_start":976,"line_end":976,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330121,"byte_end":330124,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330129,"byte_end":330143,"line_start":978,"line_end":978,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330148,"byte_end":330151,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330156,"byte_end":330163,"line_start":980,"line_end":980,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330168,"byte_end":330195,"line_start":981,"line_end":981,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330200,"byte_end":330203,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330208,"byte_end":330241,"line_start":983,"line_end":983,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330246,"byte_end":330249,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330254,"byte_end":330290,"line_start":985,"line_end":985,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330295,"byte_end":330332,"line_start":986,"line_end":986,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330337,"byte_end":330366,"line_start":987,"line_end":987,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330371,"byte_end":330378,"line_start":988,"line_end":988,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330419,"byte_end":330425,"line_start":989,"line_end":989,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331485,"byte_end":331508,"line_start":1014,"line_end":1014,"column_start":12,"column_end":35},"name":"insert_unique_unchecked","qualname":"<HashSet<T, S, A>>::insert_unique_unchecked","value":"pub fn insert_unique_unchecked(&mut Self, T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Insert a value the set without checking if the value already exists in the set.","sig":null,"attributes":[{"value":"/ Insert a value the set without checking if the value already exists in the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330533,"byte_end":330616,"line_start":994,"line_end":994,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330621,"byte_end":330624,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ Returns a reference to the value just inserted.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330629,"byte_end":330680,"line_start":996,"line_end":996,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330685,"byte_end":330688,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ This operation is safe if a value does not exist in the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330693,"byte_end":330757,"line_start":998,"line_end":998,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330762,"byte_end":330765,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ However, if a value exists in the set already, the behavior is unspecified:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330770,"byte_end":330849,"line_start":1000,"line_end":1000,"column_start":5,"column_end":84}},{"value":"/ this operation may panic, loop forever, or any following operation with the set","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330854,"byte_end":330937,"line_start":1001,"line_end":1001,"column_start":5,"column_end":88}},{"value":"/ may panic, loop forever or return arbitrary result.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":330942,"byte_end":330997,"line_start":1002,"line_end":1002,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331002,"byte_end":331005,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ That said, this operation (and following operations) are guaranteed to","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331010,"byte_end":331084,"line_start":1004,"line_end":1004,"column_start":5,"column_end":79}},{"value":"/ not violate memory safety.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331089,"byte_end":331119,"line_start":1005,"line_end":1005,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331124,"byte_end":331127,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ This operation is faster than regular insert, because it does not perform","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331132,"byte_end":331209,"line_start":1007,"line_end":1007,"column_start":5,"column_end":82}},{"value":"/ lookup before insertion.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331214,"byte_end":331242,"line_start":1008,"line_end":1008,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331247,"byte_end":331250,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This operation is useful during initial population of the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331255,"byte_end":331321,"line_start":1010,"line_end":1010,"column_start":5,"column_end":71}},{"value":"/ For example, when constructing a set from another set, we know","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331326,"byte_end":331392,"line_start":1011,"line_end":1011,"column_start":5,"column_end":71}},{"value":"/ that values are unique.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331397,"byte_end":331424,"line_start":1012,"line_end":1012,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331465,"byte_end":331471,"line_start":1013,"line_end":1013,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332150,"byte_end":332157,"line_start":1034,"line_end":1034,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S, A>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331603,"byte_end":331696,"line_start":1018,"line_end":1018,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331701,"byte_end":331737,"line_start":1019,"line_end":1019,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331742,"byte_end":331745,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331750,"byte_end":331764,"line_start":1021,"line_end":1021,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331769,"byte_end":331772,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331777,"byte_end":331784,"line_start":1023,"line_end":1023,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331789,"byte_end":331816,"line_start":1024,"line_end":1024,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331821,"byte_end":331824,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331829,"byte_end":331862,"line_start":1026,"line_end":1026,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331867,"byte_end":331901,"line_start":1027,"line_end":1027,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331906,"byte_end":331909,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331914,"byte_end":331970,"line_start":1029,"line_end":1029,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":331975,"byte_end":332015,"line_start":1030,"line_end":1030,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332020,"byte_end":332077,"line_start":1031,"line_end":1031,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332082,"byte_end":332089,"line_start":1032,"line_end":1032,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332130,"byte_end":332136,"line_start":1033,"line_end":1033,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333165,"byte_end":333171,"line_start":1066,"line_end":1066,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S, A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332443,"byte_end":332506,"line_start":1044,"line_end":1044,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332511,"byte_end":332534,"line_start":1045,"line_end":1045,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332539,"byte_end":332542,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332547,"byte_end":332614,"line_start":1047,"line_end":1047,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332619,"byte_end":332686,"line_start":1048,"line_end":1048,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332691,"byte_end":332710,"line_start":1049,"line_end":1049,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332715,"byte_end":332718,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332723,"byte_end":332737,"line_start":1051,"line_end":1051,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332742,"byte_end":332745,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332750,"byte_end":332757,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332762,"byte_end":332789,"line_start":1054,"line_end":1054,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332794,"byte_end":332797,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332802,"byte_end":332835,"line_start":1056,"line_end":1056,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332840,"byte_end":332843,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332848,"byte_end":332866,"line_start":1058,"line_end":1058,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332871,"byte_end":332908,"line_start":1059,"line_end":1059,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332913,"byte_end":332951,"line_start":1060,"line_end":1060,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332956,"byte_end":332963,"line_start":1061,"line_end":1061,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332968,"byte_end":332971,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":332976,"byte_end":333035,"line_start":1063,"line_end":1063,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333040,"byte_end":333104,"line_start":1064,"line_end":1064,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333145,"byte_end":333151,"line_start":1065,"line_end":1065,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":334041,"byte_end":334045,"line_start":1093,"line_end":1093,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S, A>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where T: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333325,"byte_end":333410,"line_start":1074,"line_end":1074,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333415,"byte_end":333418,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333423,"byte_end":333490,"line_start":1076,"line_end":1076,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333495,"byte_end":333562,"line_start":1077,"line_end":1077,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333567,"byte_end":333586,"line_start":1078,"line_end":1078,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333591,"byte_end":333594,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333599,"byte_end":333613,"line_start":1080,"line_end":1080,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333618,"byte_end":333621,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333626,"byte_end":333633,"line_start":1082,"line_end":1082,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333638,"byte_end":333665,"line_start":1083,"line_end":1083,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333670,"byte_end":333673,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333678,"byte_end":333744,"line_start":1085,"line_end":1085,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333749,"byte_end":333787,"line_start":1086,"line_end":1086,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333792,"byte_end":333827,"line_start":1087,"line_end":1087,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333832,"byte_end":333839,"line_start":1088,"line_end":1088,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333844,"byte_end":333847,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333852,"byte_end":333911,"line_start":1090,"line_end":1090,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":333916,"byte_end":333980,"line_start":1091,"line_end":1091,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":334021,"byte_end":334027,"line_start":1092,"line_end":1092,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2022},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341188,"byte_end":341192,"line_start":1382,"line_end":1382,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2025}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":340935,"byte_end":340981,"line_start":1375,"line_end":1375,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":340982,"byte_end":340985,"line_start":1376,"line_end":1376,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":340986,"byte_end":341053,"line_start":1377,"line_end":1377,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341054,"byte_end":341089,"line_start":1378,"line_end":1378,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341090,"byte_end":341093,"line_start":1379,"line_end":1379,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341094,"byte_end":341130,"line_start":1380,"line_end":1380,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341131,"byte_end":341176,"line_start":1381,"line_end":1381,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2026},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341546,"byte_end":341554,"line_start":1393,"line_end":1393,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":2029}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341232,"byte_end":341285,"line_start":1386,"line_end":1386,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341286,"byte_end":341289,"line_start":1387,"line_end":1387,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`]","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341290,"byte_end":341361,"line_start":1388,"line_end":1388,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341362,"byte_end":341437,"line_start":1389,"line_end":1389,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341438,"byte_end":341441,"line_start":1390,"line_end":1390,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341442,"byte_end":341478,"line_start":1391,"line_end":1391,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341479,"byte_end":341534,"line_start":1392,"line_end":1392,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":2030},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341893,"byte_end":341898,"line_start":1404,"line_end":1404,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":2034}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341629,"byte_end":341683,"line_start":1397,"line_end":1397,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341684,"byte_end":341687,"line_start":1398,"line_end":1398,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341688,"byte_end":341756,"line_start":1399,"line_end":1399,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341757,"byte_end":341792,"line_start":1400,"line_end":1400,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341793,"byte_end":341796,"line_start":1401,"line_end":1401,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341797,"byte_end":341833,"line_start":1402,"line_end":1402,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341834,"byte_end":341881,"line_start":1403,"line_end":1403,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":2035},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342299,"byte_end":342310,"line_start":1415,"line_end":1415,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::set::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":2040},{"krate":0,"index":2041}],"decl_id":null,"docs":" A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":341978,"byte_end":342068,"line_start":1408,"line_end":1408,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342069,"byte_end":342072,"line_start":1409,"line_end":1409,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashSet`]. See its","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342073,"byte_end":342156,"line_start":1410,"line_end":1410,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342157,"byte_end":342184,"line_start":1411,"line_end":1411,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342185,"byte_end":342188,"line_start":1412,"line_end":1412,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashSet.html#method.drain_filter","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342189,"byte_end":342250,"line_start":1413,"line_end":1413,"column_start":1,"column_end":62}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342251,"byte_end":342287,"line_start":1414,"line_end":1414,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":2042},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342746,"byte_end":342758,"line_start":1430,"line_end":1430,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":2047},{"krate":0,"index":2048}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342442,"byte_end":342515,"line_start":1423,"line_end":1423,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342516,"byte_end":342519,"line_start":1424,"line_end":1424,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342520,"byte_end":342595,"line_start":1425,"line_end":1425,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342596,"byte_end":342631,"line_start":1426,"line_end":1426,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342632,"byte_end":342635,"line_start":1427,"line_end":1427,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342636,"byte_end":342672,"line_start":1428,"line_end":1428,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342673,"byte_end":342734,"line_start":1429,"line_end":1429,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2049},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343212,"byte_end":343222,"line_start":1444,"line_end":1444,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":2054},{"krate":0,"index":2055}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342916,"byte_end":342987,"line_start":1437,"line_end":1437,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342988,"byte_end":342991,"line_start":1438,"line_end":1438,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":342992,"byte_end":343065,"line_start":1439,"line_end":1439,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343066,"byte_end":343101,"line_start":1440,"line_end":1440,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343102,"byte_end":343105,"line_start":1441,"line_end":1441,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343106,"byte_end":343142,"line_start":1442,"line_end":1442,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343143,"byte_end":343200,"line_start":1443,"line_end":1443,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":2056},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343716,"byte_end":343735,"line_start":1458,"line_end":1458,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":2061}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343380,"byte_end":343461,"line_start":1451,"line_end":1451,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343462,"byte_end":343465,"line_start":1452,"line_end":1452,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343466,"byte_end":343536,"line_start":1453,"line_end":1453,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343537,"byte_end":343585,"line_start":1454,"line_end":1454,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343586,"byte_end":343589,"line_start":1455,"line_end":1455,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343590,"byte_end":343626,"line_start":1456,"line_end":1456,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343627,"byte_end":343704,"line_start":1457,"line_end":1457,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":2062},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":344125,"byte_end":344130,"line_start":1469,"line_end":1469,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":2067}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343849,"byte_end":343915,"line_start":1462,"line_end":1462,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343916,"byte_end":343919,"line_start":1463,"line_end":1463,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343920,"byte_end":343988,"line_start":1464,"line_end":1464,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":343989,"byte_end":344024,"line_start":1465,"line_end":1465,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":344025,"byte_end":344028,"line_start":1466,"line_end":1466,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":344029,"byte_end":344065,"line_start":1467,"line_end":1467,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":344066,"byte_end":344113,"line_start":1468,"line_end":1468,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":2271},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":2187,"byte_end":2195,"line_start":83,"line_end":83,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2272}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":2202,"byte_end":2268,"line_start":84,"line_end":84,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":2273},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":2742,"byte_end":2750,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2274}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":2757,"byte_end":2823,"line_start":101,"line_end":101,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2353},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3502,"byte_end":3518,"line_start":123,"line_end":123,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":2352},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3386,"byte_end":3459,"line_start":121,"line_end":121,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3464,"byte_end":3497,"line_start":122,"line_end":122,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":2355},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3572,"byte_end":3582,"line_start":126,"line_end":126,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout }","parent":{"krate":0,"index":2352},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3525,"byte_end":3567,"line_start":125,"line_end":125,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":2352},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3364,"byte_end":3379,"line_start":120,"line_end":120,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::TryReserveError","value":"pub enum TryReserveError {\n    CapacityOverflow,\n    AllocError {\n            layout: alloc::alloc::Layout,\n        },\n}","parent":null,"children":[{"krate":0,"index":2353},{"krate":0,"index":2355}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/lib.rs","byte_start":3270,"byte_end":3315,"line_start":118,"line_end":118,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/sse2.rs","byte_start":14012413,"byte_end":14012418,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2315}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94582,"byte_end":94588,"line_start":44,"line_end":44,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94922,"byte_end":94928,"line_start":54,"line_end":54,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs","byte_start":96304,"byte_end":96311,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs","byte_start":98925,"byte_end":98932,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs","byte_start":99219,"byte_end":99230,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":8756,"byte_end":8767,"line_start":90,"line_end":90,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":11461,"byte_end":11469,"line_start":169,"line_end":169,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":13962,"byte_end":13973,"line_start":237,"line_end":237,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":15878,"byte_end":15884,"line_start":289,"line_end":289,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":15910,"byte_end":15916,"line_start":291,"line_end":291,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":16014,"byte_end":16020,"line_start":298,"line_end":298,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":18812,"byte_end":18820,"line_start":393,"line_end":393,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":19906,"byte_end":19914,"line_start":421,"line_end":421,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":248},{"krate":0,"index":253},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":42425,"byte_end":42433,"line_start":1034,"line_end":1034,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":42522,"byte_end":42530,"line_start":1040,"line_end":1040,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":42582,"byte_end":42595,"line_start":1047,"line_end":1047,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":42981,"byte_end":42994,"line_start":1061,"line_end":1061,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":63633,"byte_end":63641,"line_start":1605,"line_end":1605,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":66279,"byte_end":66287,"line_start":1674,"line_end":1674,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":67185,"byte_end":67193,"line_start":1699,"line_end":1699,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":70741,"byte_end":70749,"line_start":1788,"line_end":1788,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":71274,"byte_end":71282,"line_start":1808,"line_end":1808,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":71587,"byte_end":71595,"line_start":1820,"line_end":1820,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":72446,"byte_end":72458,"line_start":1851,"line_end":1851,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":75281,"byte_end":75293,"line_start":1920,"line_end":1920,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":75324,"byte_end":75336,"line_start":1921,"line_end":1921,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":75362,"byte_end":75374,"line_start":1923,"line_end":1923,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":75664,"byte_end":75676,"line_start":1935,"line_end":1935,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":77108,"byte_end":77120,"line_start":1973,"line_end":1973,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":78015,"byte_end":78022,"line_start":1992,"line_end":1992,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":84149,"byte_end":84156,"line_start":2118,"line_end":2118,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":84364,"byte_end":84371,"line_start":2128,"line_end":2128,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85021,"byte_end":85028,"line_start":2151,"line_end":2151,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85061,"byte_end":85068,"line_start":2152,"line_end":2152,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85337,"byte_end":85348,"line_start":2162,"line_end":2162,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85526,"byte_end":85537,"line_start":2169,"line_end":2169,"column_start":47,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85626,"byte_end":85637,"line_start":2175,"line_end":2175,"column_start":47,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":86208,"byte_end":86219,"line_start":2198,"line_end":2198,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":86619,"byte_end":86630,"line_start":2213,"line_end":2213,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":86960,"byte_end":86971,"line_start":2227,"line_end":2227,"column_start":53,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":87029,"byte_end":87040,"line_start":2228,"line_end":2228,"column_start":49,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":87645,"byte_end":87653,"line_start":2245,"line_end":2245,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":87834,"byte_end":87842,"line_start":2252,"line_end":2252,"column_start":46,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":87934,"byte_end":87942,"line_start":2258,"line_end":2258,"column_start":46,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":88029,"byte_end":88037,"line_start":2265,"line_end":2265,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":88642,"byte_end":88650,"line_start":2284,"line_end":2284,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":89033,"byte_end":89041,"line_start":2301,"line_end":2301,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":89103,"byte_end":89111,"line_start":2302,"line_end":2302,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":89907,"byte_end":89918,"line_start":2329,"line_end":2329,"column_start":35,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":90234,"byte_end":90250,"line_start":2339,"line_end":2339,"column_start":32,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":90866,"byte_end":90877,"line_start":2360,"line_end":2360,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":91195,"byte_end":91211,"line_start":2373,"line_end":2373,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":100176,"byte_end":100183,"line_start":24,"line_end":24,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":100568,"byte_end":100575,"line_start":39,"line_end":39,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":100991,"byte_end":101001,"line_start":53,"line_end":53,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":102474,"byte_end":102481,"line_start":102,"line_end":102,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":102838,"byte_end":102845,"line_start":116,"line_end":116,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":103220,"byte_end":103230,"line_start":129,"line_end":129,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":104655,"byte_end":104672,"line_start":171,"line_end":171,"column_start":50,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112637,"byte_end":112644,"line_start":193,"line_end":193,"column_start":68,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115331,"byte_end":115338,"line_start":292,"line_end":292,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116431,"byte_end":116438,"line_start":327,"line_end":327,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117308,"byte_end":117315,"line_start":347,"line_end":347,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119823,"byte_end":119830,"line_start":416,"line_end":416,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132119,"byte_end":132126,"line_start":849,"line_end":849,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":823},{"krate":0,"index":830},{"krate":0,"index":837},{"krate":0,"index":844},{"krate":0,"index":850},{"krate":0,"index":856},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157841,"byte_end":157848,"line_start":1643,"line_end":1643,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160793,"byte_end":160800,"line_start":1701,"line_end":1701,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":161153,"byte_end":161160,"line_start":1718,"line_end":1718,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":161286,"byte_end":161293,"line_start":1727,"line_end":1727,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":161521,"byte_end":161528,"line_start":1738,"line_end":1738,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":161900,"byte_end":161907,"line_start":1750,"line_end":1750,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":162512,"byte_end":162519,"line_start":1772,"line_end":1772,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163348,"byte_end":163352,"line_start":1804,"line_end":1804,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163590,"byte_end":163594,"line_start":1814,"line_end":1814,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164372,"byte_end":164379,"line_start":1836,"line_end":1836,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164405,"byte_end":164412,"line_start":1838,"line_end":1838,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165132,"byte_end":165140,"line_start":1860,"line_end":1860,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165824,"byte_end":165832,"line_start":1882,"line_end":1882,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166125,"byte_end":166133,"line_start":1895,"line_end":1895,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166273,"byte_end":166281,"line_start":1902,"line_end":1902,"column_start":52,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166357,"byte_end":166365,"line_start":1904,"line_end":1904,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166961,"byte_end":166971,"line_start":1923,"line_end":1923,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167264,"byte_end":167274,"line_start":1936,"line_end":1936,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167414,"byte_end":167424,"line_start":1943,"line_end":1943,"column_start":52,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167500,"byte_end":167510,"line_start":1945,"line_end":1945,"column_start":63,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168070,"byte_end":168074,"line_start":1965,"line_end":1965,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168272,"byte_end":168276,"line_start":1974,"line_end":1974,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168800,"byte_end":168806,"line_start":1992,"line_end":1992,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169006,"byte_end":169012,"line_start":2001,"line_end":2001,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169538,"byte_end":169543,"line_start":2018,"line_end":2018,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170334,"byte_end":170345,"line_start":2044,"line_end":2044,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1061}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170768,"byte_end":170784,"line_start":2061,"line_end":2061,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170938,"byte_end":170949,"line_start":2068,"line_end":2068,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":171349,"byte_end":171360,"line_start":2086,"line_end":2086,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":171654,"byte_end":171670,"line_start":2094,"line_end":2094,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173866,"byte_end":173885,"line_start":2160,"line_end":2160,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174017,"byte_end":174036,"line_start":2168,"line_end":2168,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174785,"byte_end":174803,"line_start":2195,"line_end":2195,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1159},{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175617,"byte_end":175635,"line_start":2221,"line_end":2221,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":176676,"byte_end":176691,"line_start":2251,"line_end":2251,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178128,"byte_end":178139,"line_start":2298,"line_end":2298,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1201},{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184012,"byte_end":184031,"line_start":2492,"line_end":2492,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188081,"byte_end":188098,"line_start":2610,"line_end":2610,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":190144,"byte_end":190162,"line_start":2678,"line_end":2678,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":190364,"byte_end":190375,"line_start":2684,"line_end":2684,"column_start":61,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":190734,"byte_end":190753,"line_start":2693,"line_end":2693,"column_start":61,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191036,"byte_end":191053,"line_start":2702,"line_end":2702,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191243,"byte_end":191258,"line_start":2708,"line_end":2708,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191922,"byte_end":191927,"line_start":2731,"line_end":2731,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192539,"byte_end":192552,"line_start":2751,"line_end":2751,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192684,"byte_end":192697,"line_start":2759,"line_end":2759,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192857,"byte_end":192870,"line_start":2768,"line_end":2768,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193413,"byte_end":193424,"line_start":2787,"line_end":2787,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":194178,"byte_end":194186,"line_start":2811,"line_end":2811,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":194581,"byte_end":194589,"line_start":2826,"line_end":2826,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":194856,"byte_end":194864,"line_start":2838,"line_end":2838,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195432,"byte_end":195448,"line_start":2858,"line_end":2858,"column_start":45,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195620,"byte_end":195636,"line_start":2867,"line_end":2867,"column_start":45,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195852,"byte_end":195868,"line_start":2878,"line_end":2878,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196494,"byte_end":196508,"line_start":2899,"line_end":2899,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":197175,"byte_end":197188,"line_start":2916,"line_end":2916,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":197555,"byte_end":197568,"line_start":2927,"line_end":2927,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":198479,"byte_end":198486,"line_start":2960,"line_end":2960,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":199274,"byte_end":199278,"line_start":2989,"line_end":2989,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":199849,"byte_end":199853,"line_start":3008,"line_end":3008,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200007,"byte_end":200011,"line_start":3015,"line_end":3015,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200054,"byte_end":200061,"line_start":3017,"line_end":3017,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200644,"byte_end":200651,"line_start":3036,"line_end":3036,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200804,"byte_end":200811,"line_start":3042,"line_end":3042,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200852,"byte_end":200859,"line_start":3044,"line_end":3044,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201087,"byte_end":201095,"line_start":3054,"line_end":3054,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201451,"byte_end":201459,"line_start":3066,"line_end":3066,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1513}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201633,"byte_end":201641,"line_start":3072,"line_end":3072,"column_start":52,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201717,"byte_end":201725,"line_start":3074,"line_end":3074,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1522}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201890,"byte_end":201894,"line_start":3080,"line_end":3080,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1529}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":202366,"byte_end":202370,"line_start":3096,"line_end":3096,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1533}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":202523,"byte_end":202527,"line_start":3102,"line_end":3102,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":202570,"byte_end":202576,"line_start":3104,"line_end":3104,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203048,"byte_end":203054,"line_start":3120,"line_end":3120,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1547}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203207,"byte_end":203213,"line_start":3126,"line_end":3126,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203256,"byte_end":203265,"line_start":3128,"line_end":3128,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203745,"byte_end":203754,"line_start":3144,"line_end":3144,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203907,"byte_end":203916,"line_start":3150,"line_end":3150,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203957,"byte_end":203966,"line_start":3152,"line_end":3152,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":204204,"byte_end":204209,"line_start":3162,"line_end":3162,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":204569,"byte_end":204574,"line_start":3174,"line_end":3174,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":204752,"byte_end":204757,"line_start":3180,"line_end":3180,"column_start":52,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":204804,"byte_end":204809,"line_start":3182,"line_end":3182,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205060,"byte_end":205065,"line_start":3193,"line_end":3193,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211951,"byte_end":211956,"line_start":3427,"line_end":3427,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212738,"byte_end":212751,"line_start":3454,"line_end":3454,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222275,"byte_end":222286,"line_start":3768,"line_end":3768,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224579,"byte_end":224587,"line_start":3855,"line_end":3855,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231778,"byte_end":231786,"line_start":4093,"line_end":4093,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232610,"byte_end":232626,"line_start":4120,"line_end":4120,"column_start":56,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242485,"byte_end":242499,"line_start":4442,"line_end":4442,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":245070,"byte_end":245077,"line_start":4538,"line_end":4538,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1708}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":245721,"byte_end":245728,"line_start":4558,"line_end":4558,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1716}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":247207,"byte_end":247214,"line_start":4604,"line_end":4604,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1725}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/scopeguard.rs","byte_start":298754,"byte_end":298764,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/scopeguard.rs","byte_start":298917,"byte_end":298927,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/scopeguard.rs","byte_start":299071,"byte_end":299081,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1787}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303365,"byte_end":303372,"line_start":119,"line_end":119,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1869},{"krate":0,"index":1870}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303615,"byte_end":303622,"line_start":132,"line_end":132,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1874}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304769,"byte_end":304776,"line_start":172,"line_end":172,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1879}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305934,"byte_end":305941,"line_start":211,"line_end":211,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1892},{"krate":0,"index":1894}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310491,"byte_end":310498,"line_start":385,"line_end":385,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1898},{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312950,"byte_end":312957,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315739,"byte_end":315746,"line_start":538,"line_end":538,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":1922},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1932},{"krate":0,"index":1936},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":334365,"byte_end":334372,"line_start":1106,"line_end":1106,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1952}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":334652,"byte_end":334659,"line_start":1121,"line_end":1121,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":334773,"byte_end":334780,"line_start":1129,"line_end":1129,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":335012,"byte_end":335019,"line_start":1139,"line_end":1139,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":335176,"byte_end":335183,"line_start":1148,"line_end":1148,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1972}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":335670,"byte_end":335677,"line_start":1164,"line_end":1164,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1979}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":336095,"byte_end":336102,"line_start":1183,"line_end":1183,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1985}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":336700,"byte_end":336707,"line_start":1207,"line_end":1207,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1993}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":337304,"byte_end":337311,"line_start":1231,"line_end":1231,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1999}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":344534,"byte_end":344541,"line_start":1483,"line_end":1483,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":2082}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":345425,"byte_end":345429,"line_start":1515,"line_end":1515,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2085}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":345613,"byte_end":345617,"line_start":1523,"line_end":1523,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":345946,"byte_end":345950,"line_start":1535,"line_end":1535,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2095}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346096,"byte_end":346100,"line_start":1541,"line_end":1541,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346147,"byte_end":346151,"line_start":1543,"line_end":1543,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346330,"byte_end":346338,"line_start":1549,"line_end":1549,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2104},{"krate":0,"index":2105},{"krate":0,"index":2106}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346815,"byte_end":346823,"line_start":1565,"line_end":1565,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2110}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346990,"byte_end":346998,"line_start":1571,"line_end":1571,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":347066,"byte_end":347074,"line_start":1573,"line_end":1573,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2117}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":347313,"byte_end":347318,"line_start":1580,"line_end":1580,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":347799,"byte_end":347804,"line_start":1596,"line_end":1596,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2128}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":347975,"byte_end":347980,"line_start":1602,"line_end":1602,"column_start":49,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":348052,"byte_end":348057,"line_start":1604,"line_end":1604,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2135}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":348303,"byte_end":348314,"line_start":1611,"line_end":1611,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2142}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":348650,"byte_end":348661,"line_start":1625,"line_end":1625,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2150}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":349103,"byte_end":349114,"line_start":1644,"line_end":1644,"column_start":52,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":349207,"byte_end":349219,"line_start":1649,"line_end":1649,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":349444,"byte_end":349456,"line_start":1659,"line_end":1659,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":350026,"byte_end":350038,"line_start":1684,"line_end":1684,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2172}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":350295,"byte_end":350307,"line_start":1695,"line_end":1695,"column_start":33,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":350439,"byte_end":350449,"line_start":1703,"line_end":1703,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2181}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":350672,"byte_end":350682,"line_start":1713,"line_end":1713,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":351256,"byte_end":351266,"line_start":1738,"line_end":1738,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":351384,"byte_end":351394,"line_start":1746,"line_end":1746,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2198}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":351662,"byte_end":351681,"line_start":1757,"line_end":1757,"column_start":44,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2203}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":351893,"byte_end":351912,"line_start":1766,"line_end":1766,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2211}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":352316,"byte_end":352335,"line_start":1784,"line_end":1784,"column_start":33,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":352453,"byte_end":352472,"line_start":1792,"line_end":1792,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2220}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":352740,"byte_end":352745,"line_start":1803,"line_end":1803,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2225}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":352944,"byte_end":352949,"line_start":1812,"line_end":1812,"column_start":33,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":353067,"byte_end":353072,"line_start":1820,"line_end":1820,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":353328,"byte_end":353333,"line_start":1831,"line_end":1831,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2242}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/sse2.rs","byte_start":14012413,"byte_end":14012418,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2319},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94582,"byte_end":94588,"line_start":44,"line_end":44,"column_start":31,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2325},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/alloc.rs","byte_start":94922,"byte_end":94928,"line_start":54,"line_end":54,"column_start":22,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2325},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs","byte_start":96304,"byte_end":96311,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs","byte_start":98925,"byte_end":98932,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2330},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs","byte_start":99219,"byte_end":99230,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":115},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":8756,"byte_end":8767,"line_start":90,"line_end":90,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":11461,"byte_end":11469,"line_start":169,"line_end":169,"column_start":6,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":13962,"byte_end":13973,"line_start":237,"line_end":237,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":15878,"byte_end":15884,"line_start":289,"line_end":289,"column_start":25,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":159},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":15910,"byte_end":15916,"line_start":291,"line_end":291,"column_start":19,"column_end":25},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":159},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":16014,"byte_end":16020,"line_start":298,"line_end":298,"column_start":9,"column_end":15},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":18812,"byte_end":18820,"line_start":393,"line_end":393,"column_start":9,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":19906,"byte_end":19914,"line_start":421,"line_end":421,"column_start":31,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":42425,"byte_end":42433,"line_start":1034,"line_end":1034,"column_start":47,"column_end":55},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":42522,"byte_end":42530,"line_start":1040,"line_end":1040,"column_start":47,"column_end":55},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":42582,"byte_end":42595,"line_start":1047,"line_end":1047,"column_start":9,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":42981,"byte_end":42994,"line_start":1061,"line_end":1061,"column_start":28,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":63633,"byte_end":63641,"line_start":1605,"line_end":1605,"column_start":48,"column_end":56},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":66279,"byte_end":66287,"line_start":1674,"line_end":1674,"column_start":56,"column_end":64},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":180},"to":{"krate":0,"index":320}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":67185,"byte_end":67193,"line_start":1699,"line_end":1699,"column_start":38,"column_end":46},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":70741,"byte_end":70749,"line_start":1788,"line_end":1788,"column_start":53,"column_end":61},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":71274,"byte_end":71282,"line_start":1808,"line_end":1808,"column_start":40,"column_end":48},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":71587,"byte_end":71595,"line_start":1820,"line_end":1820,"column_start":48,"column_end":56},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":72446,"byte_end":72458,"line_start":1851,"line_end":1851,"column_start":9,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":75281,"byte_end":75293,"line_start":1920,"line_end":1920,"column_start":25,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":346},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":75324,"byte_end":75336,"line_start":1921,"line_end":1921,"column_start":25,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":346},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":75362,"byte_end":75374,"line_start":1923,"line_end":1923,"column_start":19,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":346},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":75664,"byte_end":75676,"line_start":1935,"line_end":1935,"column_start":22,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":346},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":77108,"byte_end":77120,"line_start":1973,"line_end":1973,"column_start":27,"column_end":39},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":346},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":78015,"byte_end":78022,"line_start":1992,"line_end":1992,"column_start":9,"column_end":16},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":84149,"byte_end":84156,"line_start":2118,"line_end":2118,"column_start":19,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":84364,"byte_end":84371,"line_start":2128,"line_end":2128,"column_start":22,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85021,"byte_end":85028,"line_start":2151,"line_end":2151,"column_start":31,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85061,"byte_end":85068,"line_start":2152,"line_end":2152,"column_start":27,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85337,"byte_end":85348,"line_start":2162,"line_end":2162,"column_start":31,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85526,"byte_end":85537,"line_start":2169,"line_end":2169,"column_start":47,"column_end":58},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":85626,"byte_end":85637,"line_start":2175,"line_end":2175,"column_start":47,"column_end":58},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":86208,"byte_end":86219,"line_start":2198,"line_end":2198,"column_start":40,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":86619,"byte_end":86630,"line_start":2213,"line_end":2213,"column_start":44,"column_end":55},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":86960,"byte_end":86971,"line_start":2227,"line_end":2227,"column_start":53,"column_end":64},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":87029,"byte_end":87040,"line_start":2228,"line_end":2228,"column_start":49,"column_end":60},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":87645,"byte_end":87653,"line_start":2245,"line_end":2245,"column_start":31,"column_end":39},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":87834,"byte_end":87842,"line_start":2252,"line_end":2252,"column_start":46,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":87934,"byte_end":87942,"line_start":2258,"line_end":2258,"column_start":46,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":88029,"byte_end":88037,"line_start":2265,"line_end":2265,"column_start":40,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":88642,"byte_end":88650,"line_start":2284,"line_end":2284,"column_start":44,"column_end":52},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":89033,"byte_end":89041,"line_start":2301,"line_end":2301,"column_start":53,"column_end":61},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":89103,"byte_end":89111,"line_start":2302,"line_end":2302,"column_start":49,"column_end":57},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":89907,"byte_end":89918,"line_start":2329,"line_end":2329,"column_start":35,"column_end":46},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":90234,"byte_end":90250,"line_start":2339,"line_end":2339,"column_start":32,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":90866,"byte_end":90877,"line_start":2360,"line_end":2360,"column_start":48,"column_end":59},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":455},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs","byte_start":91195,"byte_end":91211,"line_start":2373,"line_end":2373,"column_start":45,"column_end":61},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":461},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":100176,"byte_end":100183,"line_start":24,"line_end":24,"column_start":33,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":701},"to":{"krate":5,"index":2101}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":100568,"byte_end":100575,"line_start":39,"line_end":39,"column_start":45,"column_end":52},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":701},"to":{"krate":5,"index":1560}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":100991,"byte_end":101001,"line_start":53,"line_end":53,"column_start":49,"column_end":59},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":547},"to":{"krate":5,"index":1646}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":102474,"byte_end":102481,"line_start":102,"line_end":102,"column_start":30,"column_end":37},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1860},"to":{"krate":5,"index":2101}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":102838,"byte_end":102845,"line_start":116,"line_end":116,"column_start":42,"column_end":49},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1860},"to":{"krate":5,"index":1560}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":103220,"byte_end":103230,"line_start":129,"line_end":129,"column_start":46,"column_end":56},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":612},"to":{"krate":5,"index":1646}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/external_trait_impls/serde.rs","byte_start":104655,"byte_end":104672,"line_start":171,"line_end":171,"column_start":50,"column_end":67},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":626},"to":{"krate":5,"index":1646}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":112637,"byte_end":112644,"line_start":193,"line_end":193,"column_start":68,"column_end":75},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":115331,"byte_end":115338,"line_start":292,"line_end":292,"column_start":12,"column_end":19},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":116431,"byte_end":116438,"line_start":327,"line_end":327,"column_start":34,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":117308,"byte_end":117315,"line_start":347,"line_end":347,"column_start":15,"column_end":22},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":119823,"byte_end":119830,"line_start":416,"line_end":416,"column_start":37,"column_end":44},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":132119,"byte_end":132126,"line_start":849,"line_end":849,"column_start":18,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":157841,"byte_end":157848,"line_start":1643,"line_end":1643,"column_start":37,"column_end":44},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":160793,"byte_end":160800,"line_start":1701,"line_end":1701,"column_start":32,"column_end":39},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":161153,"byte_end":161160,"line_start":1718,"line_end":1718,"column_start":25,"column_end":32},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":161286,"byte_end":161293,"line_start":1727,"line_end":1727,"column_start":28,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":161521,"byte_end":161528,"line_start":1738,"line_end":1738,"column_start":30,"column_end":37},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":161900,"byte_end":161907,"line_start":1750,"line_end":1750,"column_start":43,"column_end":50},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":162512,"byte_end":162519,"line_start":1772,"line_end":1772,"column_start":53,"column_end":60},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163348,"byte_end":163352,"line_start":1804,"line_end":1804,"column_start":22,"column_end":26},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":917},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":163590,"byte_end":163594,"line_start":1814,"line_end":1814,"column_start":41,"column_end":45},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":917},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164372,"byte_end":164379,"line_start":1836,"line_end":1836,"column_start":40,"column_end":47},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":164405,"byte_end":164412,"line_start":1838,"line_end":1838,"column_start":12,"column_end":19},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165132,"byte_end":165140,"line_start":1860,"line_end":1860,"column_start":34,"column_end":42},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":165824,"byte_end":165832,"line_start":1882,"line_end":1882,"column_start":47,"column_end":55},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":954},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166125,"byte_end":166133,"line_start":1895,"line_end":1895,"column_start":56,"column_end":64},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":954},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166273,"byte_end":166281,"line_start":1902,"line_end":1902,"column_start":52,"column_end":60},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":954},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166357,"byte_end":166365,"line_start":1904,"line_end":1904,"column_start":63,"column_end":71},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":954},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":166961,"byte_end":166971,"line_start":1923,"line_end":1923,"column_start":47,"column_end":57},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":982},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167264,"byte_end":167274,"line_start":1936,"line_end":1936,"column_start":56,"column_end":66},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":982},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167414,"byte_end":167424,"line_start":1943,"line_end":1943,"column_start":52,"column_end":62},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":982},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":167500,"byte_end":167510,"line_start":1945,"line_end":1945,"column_start":63,"column_end":73},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":982},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168070,"byte_end":168074,"line_start":1965,"line_end":1965,"column_start":22,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1010},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168272,"byte_end":168276,"line_start":1974,"line_end":1974,"column_start":34,"column_end":38},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1010},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":168800,"byte_end":168806,"line_start":1992,"line_end":1992,"column_start":22,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1023},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169006,"byte_end":169012,"line_start":2001,"line_end":2001,"column_start":34,"column_end":40},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1023},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":169538,"byte_end":169543,"line_start":2018,"line_end":2018,"column_start":34,"column_end":39},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170334,"byte_end":170345,"line_start":2044,"line_end":2044,"column_start":31,"column_end":42},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1047},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170768,"byte_end":170784,"line_start":2061,"line_end":2061,"column_start":28,"column_end":44},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1062},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":170938,"byte_end":170949,"line_start":2068,"line_end":2068,"column_start":31,"column_end":42},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1047},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":171349,"byte_end":171360,"line_start":2086,"line_end":2086,"column_start":33,"column_end":44},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1047},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":171654,"byte_end":171670,"line_start":2094,"line_end":2094,"column_start":34,"column_end":50},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":173866,"byte_end":173885,"line_start":2160,"line_end":2160,"column_start":34,"column_end":53},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1119},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174017,"byte_end":174036,"line_start":2168,"line_end":2168,"column_start":34,"column_end":53},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1119},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":174785,"byte_end":174803,"line_start":2195,"line_end":2195,"column_start":41,"column_end":59},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":175617,"byte_end":175635,"line_start":2221,"line_end":2221,"column_start":41,"column_end":59},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":176676,"byte_end":176691,"line_start":2251,"line_end":2251,"column_start":41,"column_end":56},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":178128,"byte_end":178139,"line_start":2298,"line_end":2298,"column_start":41,"column_end":52},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":184012,"byte_end":184031,"line_start":2492,"line_end":2492,"column_start":41,"column_end":60},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":188081,"byte_end":188098,"line_start":2610,"line_end":2610,"column_start":41,"column_end":58},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":190144,"byte_end":190162,"line_start":2678,"line_end":2678,"column_start":47,"column_end":65},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1100},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":190364,"byte_end":190375,"line_start":2684,"line_end":2684,"column_start":61,"column_end":72},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1107},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":190734,"byte_end":190753,"line_start":2693,"line_end":2693,"column_start":61,"column_end":80},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1119},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191036,"byte_end":191053,"line_start":2702,"line_end":2702,"column_start":47,"column_end":64},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1138},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191243,"byte_end":191258,"line_start":2708,"line_end":2708,"column_start":47,"column_end":62},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1146},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":191922,"byte_end":191927,"line_start":2731,"line_end":2731,"column_start":61,"column_end":66},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192539,"byte_end":192552,"line_start":2751,"line_end":2751,"column_start":34,"column_end":47},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192684,"byte_end":192697,"line_start":2759,"line_end":2759,"column_start":34,"column_end":47},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":192857,"byte_end":192870,"line_start":2768,"line_end":2768,"column_start":61,"column_end":74},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":193413,"byte_end":193424,"line_start":2787,"line_end":2787,"column_start":54,"column_end":65},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1314},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":194178,"byte_end":194186,"line_start":2811,"line_end":2811,"column_start":9,"column_end":17},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1329},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":194581,"byte_end":194589,"line_start":2826,"line_end":2826,"column_start":24,"column_end":32},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":194856,"byte_end":194864,"line_start":2838,"line_end":2838,"column_start":48,"column_end":56},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1350},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195432,"byte_end":195448,"line_start":2858,"line_end":2858,"column_start":45,"column_end":61},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1370},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195620,"byte_end":195636,"line_start":2867,"line_end":2867,"column_start":45,"column_end":61},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1370},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":195852,"byte_end":195868,"line_start":2878,"line_end":2878,"column_start":9,"column_end":25},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1370},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":196494,"byte_end":196508,"line_start":2899,"line_end":2899,"column_start":9,"column_end":23},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1405},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":197175,"byte_end":197188,"line_start":2916,"line_end":2916,"column_start":61,"column_end":74},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":197555,"byte_end":197568,"line_start":2927,"line_end":2927,"column_start":9,"column_end":22},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":198479,"byte_end":198486,"line_start":2960,"line_end":2960,"column_start":54,"column_end":61},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":199274,"byte_end":199278,"line_start":2989,"line_end":2989,"column_start":29,"column_end":33},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":917},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":199849,"byte_end":199853,"line_start":3008,"line_end":3008,"column_start":34,"column_end":38},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":917},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200007,"byte_end":200011,"line_start":3015,"line_end":3015,"column_start":30,"column_end":34},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":917},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200054,"byte_end":200061,"line_start":3017,"line_end":3017,"column_start":29,"column_end":36},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200644,"byte_end":200651,"line_start":3036,"line_end":3036,"column_start":34,"column_end":41},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200804,"byte_end":200811,"line_start":3042,"line_end":3042,"column_start":30,"column_end":37},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":200852,"byte_end":200859,"line_start":3044,"line_end":3044,"column_start":27,"column_end":34},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201087,"byte_end":201095,"line_start":3054,"line_end":3054,"column_start":47,"column_end":55},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":944},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201451,"byte_end":201459,"line_start":3066,"line_end":3066,"column_start":56,"column_end":64},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":944},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201633,"byte_end":201641,"line_start":3072,"line_end":3072,"column_start":52,"column_end":60},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":944},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201717,"byte_end":201725,"line_start":3074,"line_end":3074,"column_start":63,"column_end":71},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":944},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":201890,"byte_end":201894,"line_start":3080,"line_end":3080,"column_start":29,"column_end":33},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1010},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":202366,"byte_end":202370,"line_start":3096,"line_end":3096,"column_start":34,"column_end":38},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1010},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":202523,"byte_end":202527,"line_start":3102,"line_end":3102,"column_start":30,"column_end":34},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1010},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":202570,"byte_end":202576,"line_start":3104,"line_end":3104,"column_start":29,"column_end":35},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1023},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203048,"byte_end":203054,"line_start":3120,"line_end":3120,"column_start":34,"column_end":40},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1023},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203207,"byte_end":203213,"line_start":3126,"line_end":3126,"column_start":30,"column_end":36},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1023},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203256,"byte_end":203265,"line_start":3128,"line_end":3128,"column_start":29,"column_end":38},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1095},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203745,"byte_end":203754,"line_start":3144,"line_end":3144,"column_start":34,"column_end":43},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1095},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203907,"byte_end":203916,"line_start":3150,"line_end":3150,"column_start":30,"column_end":39},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1095},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":203957,"byte_end":203966,"line_start":3152,"line_end":3152,"column_start":27,"column_end":36},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1095},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":204204,"byte_end":204209,"line_start":3162,"line_end":3162,"column_start":51,"column_end":56},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1036},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":204569,"byte_end":204574,"line_start":3174,"line_end":3174,"column_start":56,"column_end":61},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1036},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":204752,"byte_end":204757,"line_start":3180,"line_end":3180,"column_start":52,"column_end":57},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1036},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":204804,"byte_end":204809,"line_start":3182,"line_end":3182,"column_start":30,"column_end":35},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1036},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":205060,"byte_end":205065,"line_start":3193,"line_end":3193,"column_start":41,"column_end":46},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":211951,"byte_end":211956,"line_start":3427,"line_end":3427,"column_start":50,"column_end":55},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":212738,"byte_end":212751,"line_start":3454,"line_end":3454,"column_start":41,"column_end":54},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":222275,"byte_end":222286,"line_start":3768,"line_end":3768,"column_start":41,"column_end":52},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":224579,"byte_end":224587,"line_start":3855,"line_end":3855,"column_start":56,"column_end":64},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":231778,"byte_end":231786,"line_start":4093,"line_end":4093,"column_start":65,"column_end":73},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":232610,"byte_end":232626,"line_start":4120,"line_end":4120,"column_start":56,"column_end":72},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":242485,"byte_end":242499,"line_start":4442,"line_end":4442,"column_start":56,"column_end":70},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":245070,"byte_end":245077,"line_start":4538,"line_end":4538,"column_start":43,"column_end":50},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":7711}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":245721,"byte_end":245728,"line_start":4558,"line_end":4558,"column_start":37,"column_end":44},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs","byte_start":247207,"byte_end":247214,"line_start":4604,"line_end":4604,"column_start":49,"column_end":56},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/scopeguard.rs","byte_start":298754,"byte_end":298764,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1767},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/scopeguard.rs","byte_start":298917,"byte_end":298927,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1767},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/scopeguard.rs","byte_start":299071,"byte_end":299081,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1767},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303365,"byte_end":303372,"line_start":119,"line_end":119,"column_start":58,"column_end":65},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":303615,"byte_end":303622,"line_start":132,"line_end":132,"column_start":9,"column_end":16},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":304769,"byte_end":304776,"line_start":172,"line_end":172,"column_start":42,"column_end":49},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":305934,"byte_end":305941,"line_start":211,"line_end":211,"column_start":34,"column_end":41},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":310491,"byte_end":310498,"line_start":385,"line_end":385,"column_start":12,"column_end":19},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":312950,"byte_end":312957,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":315739,"byte_end":315746,"line_start":538,"line_end":538,"column_start":15,"column_end":22},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":334365,"byte_end":334372,"line_start":1106,"line_end":1106,"column_start":29,"column_end":36},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":334652,"byte_end":334659,"line_start":1121,"line_end":1121,"column_start":22,"column_end":29},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":334773,"byte_end":334780,"line_start":1129,"line_end":1129,"column_start":30,"column_end":37},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":335012,"byte_end":335019,"line_start":1139,"line_end":1139,"column_start":46,"column_end":53},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":335176,"byte_end":335183,"line_start":1148,"line_end":1148,"column_start":35,"column_end":42},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":7711}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":335670,"byte_end":335677,"line_start":1164,"line_end":1164,"column_start":45,"column_end":52},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":336095,"byte_end":336102,"line_start":1183,"line_end":1183,"column_start":29,"column_end":36},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":336700,"byte_end":336707,"line_start":1207,"line_end":1207,"column_start":37,"column_end":44},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":337304,"byte_end":337311,"line_start":1231,"line_end":1231,"column_start":27,"column_end":34},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":344534,"byte_end":344541,"line_start":1483,"line_end":1483,"column_start":51,"column_end":58},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1860},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":345425,"byte_end":345429,"line_start":1515,"line_end":1515,"column_start":19,"column_end":23},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2022},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":345613,"byte_end":345617,"line_start":1523,"line_end":1523,"column_start":26,"column_end":30},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":2022},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":345946,"byte_end":345950,"line_start":1535,"line_end":1535,"column_start":35,"column_end":39},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2022},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346096,"byte_end":346100,"line_start":1541,"line_end":1541,"column_start":27,"column_end":31},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2022},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346147,"byte_end":346151,"line_start":1543,"line_end":1543,"column_start":36,"column_end":40},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2022},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346330,"byte_end":346338,"line_start":1549,"line_end":1549,"column_start":44,"column_end":52},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2026},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346815,"byte_end":346823,"line_start":1565,"line_end":1565,"column_start":53,"column_end":61},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2026},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":346990,"byte_end":346998,"line_start":1571,"line_end":1571,"column_start":49,"column_end":57},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2026},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":347066,"byte_end":347074,"line_start":1573,"line_end":1573,"column_start":58,"column_end":66},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2026},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":347313,"byte_end":347318,"line_start":1580,"line_end":1580,"column_start":44,"column_end":49},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2030},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":347799,"byte_end":347804,"line_start":1596,"line_end":1596,"column_start":53,"column_end":58},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2030},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":347975,"byte_end":347980,"line_start":1602,"line_end":1602,"column_start":49,"column_end":54},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2030},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":348052,"byte_end":348057,"line_start":1604,"line_end":1604,"column_start":58,"column_end":63},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2030},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":348303,"byte_end":348314,"line_start":1611,"line_end":1611,"column_start":47,"column_end":58},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2035},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":348650,"byte_end":348661,"line_start":1625,"line_end":1625,"column_start":47,"column_end":58},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2035},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":349103,"byte_end":349114,"line_start":1644,"line_end":1644,"column_start":52,"column_end":63},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2035},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":349207,"byte_end":349219,"line_start":1649,"line_end":1649,"column_start":44,"column_end":56},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2042},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":349444,"byte_end":349456,"line_start":1659,"line_end":1659,"column_start":32,"column_end":44},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2042},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":350026,"byte_end":350038,"line_start":1684,"line_end":1684,"column_start":30,"column_end":42},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2042},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":350295,"byte_end":350307,"line_start":1695,"line_end":1695,"column_start":33,"column_end":45},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2042},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":350439,"byte_end":350449,"line_start":1703,"line_end":1703,"column_start":44,"column_end":54},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2049},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":350672,"byte_end":350682,"line_start":1713,"line_end":1713,"column_start":32,"column_end":42},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":2049},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":351256,"byte_end":351266,"line_start":1738,"line_end":1738,"column_start":33,"column_end":43},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2049},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":351384,"byte_end":351394,"line_start":1746,"line_end":1746,"column_start":30,"column_end":40},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2049},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":351662,"byte_end":351681,"line_start":1757,"line_end":1757,"column_start":44,"column_end":63},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2056},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":351893,"byte_end":351912,"line_start":1766,"line_end":1766,"column_start":32,"column_end":51},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2056},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":352316,"byte_end":352335,"line_start":1784,"line_end":1784,"column_start":33,"column_end":52},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2056},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":352453,"byte_end":352472,"line_start":1792,"line_end":1792,"column_start":30,"column_end":49},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2056},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":352740,"byte_end":352745,"line_start":1803,"line_end":1803,"column_start":44,"column_end":49},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2062},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":352944,"byte_end":352949,"line_start":1812,"line_end":1812,"column_start":33,"column_end":38},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2062},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":353067,"byte_end":353072,"line_start":1820,"line_end":1820,"column_start":30,"column_end":35},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2062},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs","byte_start":353328,"byte_end":353333,"line_start":1831,"line_end":1831,"column_start":32,"column_end":37},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2062},"to":{"krate":1,"index":7907}}]}