{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2","program":"/home/flo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","inout","--edition=2021","/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=940880893e92916a","-C","extra-filename=-940880893e92916a","--out-dir","/home/flo/Desktop/RUST/helloworld_web_ASSEMBLY/target/rls/debug/deps","-L","dependency=/home/flo/Desktop/RUST/helloworld_web_ASSEMBLY/target/rls/debug/deps","--extern","generic_array=/home/flo/Desktop/RUST/helloworld_web_ASSEMBLY/target/rls/debug/deps/libgeneric_array-c8e67455635bae3c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/flo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/flo/Desktop/RUST/helloworld_web_ASSEMBLY/target/rls/debug/deps/libinout-940880893e92916a.rmeta"},"prelude":{"crate_id":{"name":"inout","disambiguator":[8823476942419154965,0]},"crate_root":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src","external_crates":[{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","num":4,"id":{"name":"generic_array","disambiguator":[10221876021332198593,0]}},{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","num":5,"id":{"name":"typenum","disambiguator":[9280503260711882713,0]}}],"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":0,"byte_end":771,"line_start":1,"line_end":26,"column_start":1,"column_end":65}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":731,"byte_end":732,"line_start":26,"line_end":26,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":741,"byte_end":742,"line_start":26,"line_end":26,"column_start":35,"column_end":36},"alias_span":null,"name":"*","value":"InOut","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":755,"byte_end":756,"line_start":26,"line_end":26,"column_start":49,"column_end":50},"alias_span":null,"name":"*","value":"InOutBuf","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":768,"byte_end":769,"line_start":26,"line_end":26,"column_start":62,"column_end":63},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":0,"byte_end":771,"line_start":1,"line_end":26,"column_start":1,"column_end":65},"name":"","qualname":"::","value":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":14},{"krate":0,"index":84},{"krate":0,"index":178},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222}],"decl_id":null,"docs":" Collection of custom reference types for code generic over in-place and\n buffer-to-buffer modes of operation.\n","sig":null,"attributes":[{"value":"/ Collection of custom reference types for code generic over in-place and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":0,"byte_end":75,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"/ buffer-to-buffer modes of operation.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":76,"byte_end":116,"line_start":2,"line_end":2,"column_start":1,"column_end":41}},{"value":"no_std","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":118,"byte_end":128,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"allow(clippy :: needless_lifetimes)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":377,"byte_end":414,"line_start":10,"line_end":10,"column_start":1,"column_end":38}},{"value":"warn(missing_docs, rust_2018_idioms)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/lib.rs","byte_start":454,"byte_end":494,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":223},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":897,"byte_end":911,"line_start":5,"line_end":5,"column_start":12,"column_end":26},"name":"IntoArrayError","qualname":"::errors::IntoArrayError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error returned when slice can not be converted into array.\n","sig":null,"attributes":[{"value":"/ The error returned when slice can not be converted into array.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":789,"byte_end":855,"line_start":3,"line_end":3,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":230},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":1370,"byte_end":1383,"line_start":20,"line_end":20,"column_start":12,"column_end":25},"name":"NotEqualError","qualname":"::errors::NotEqualError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error returned when input and output slices have different length\n and thus can not be converted to `InOutBuf`.\n","sig":null,"attributes":[{"value":"/ The error returned when input and output slices have different length","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":1206,"byte_end":1279,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ and thus can not be converted to `InOutBuf`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":1280,"byte_end":1328,"line_start":18,"line_end":18,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":237},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":2339,"byte_end":2357,"line_start":52,"line_end":52,"column_start":12,"column_end":30},"name":"OutIsTooSmallError","qualname":"::errors::OutIsTooSmallError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Output buffer is smaller than input buffer.\n","sig":null,"attributes":[{"value":"/ Output buffer is smaller than input buffer.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":2250,"byte_end":2297,"line_start":50,"line_end":50,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":32},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":2927,"byte_end":2932,"line_start":7,"line_end":7,"column_start":12,"column_end":17},"name":"InOut","qualname":"::inout::InOut","value":"InOut {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" Custom pointer type which contains one immutable (input) and one mutable\n (output) pointer, which are either equal or non-overlapping.\n","sig":null,"attributes":[{"value":"/ Custom pointer type which contains one immutable (input) and one mutable","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":2774,"byte_end":2850,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ (output) pointer, which are either equal or non-overlapping.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":2851,"byte_end":2915,"line_start":6,"line_end":6,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3176,"byte_end":3184,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<InOut>::reborrow","value":"pub fn reborrow<'a>(&'a mut Self) -> InOut","parent":null,"children":[],"decl_id":null,"docs":" Reborrow `self`.\n","sig":null,"attributes":[{"value":"/ Reborrow `self`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3122,"byte_end":3142,"line_start":14,"line_end":14,"column_start":5,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3147,"byte_end":3164,"line_start":15,"line_end":15,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3440,"byte_end":3446,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"get_in","qualname":"<InOut>::get_in","value":"pub fn get_in<'a>(&'a Self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Get immutable reference to the input value.\n","sig":null,"attributes":[{"value":"/ Get immutable reference to the input value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3359,"byte_end":3406,"line_start":24,"line_end":24,"column_start":5,"column_end":52}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3411,"byte_end":3428,"line_start":25,"line_end":25,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3596,"byte_end":3603,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"get_out","qualname":"<InOut>::get_out","value":"pub fn get_out<'a>(&'a mut Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Get mutable reference to the output value.\n","sig":null,"attributes":[{"value":"/ Get mutable reference to the output value.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3516,"byte_end":3562,"line_start":30,"line_end":30,"column_start":5,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3567,"byte_end":3584,"line_start":31,"line_end":31,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3782,"byte_end":3790,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<InOut>::into_raw","value":"pub fn into_raw(Self) -> (*const T, *mut T)","parent":null,"children":[],"decl_id":null,"docs":" Convert `self` to a pair of raw input and output pointers.\n","sig":null,"attributes":[{"value":"/ Convert `self` to a pair of raw input and output pointers.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3686,"byte_end":3748,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3753,"byte_end":3770,"line_start":37,"line_end":37,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5051,"byte_end":5059,"line_start":61,"line_end":61,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<InOut>::from_raw","value":"pub unsafe fn from_raw(*const T, *mut T) -> InOut","parent":null,"children":[],"decl_id":null,"docs":" Create `InOut` from raw input and output pointers.","sig":null,"attributes":[{"value":"/ Create `InOut` from raw input and output pointers.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3868,"byte_end":3922,"line_start":42,"line_end":42,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3927,"byte_end":3930,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3935,"byte_end":3947,"line_start":44,"line_end":44,"column_start":5,"column_end":17}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3952,"byte_end":4026,"line_start":45,"line_end":45,"column_start":5,"column_end":79}},{"value":"/ - `in_ptr` must point to a properly initialized value of type `T` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4031,"byte_end":4104,"line_start":46,"line_end":46,"column_start":5,"column_end":78}},{"value":"/ must be valid for reads.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4109,"byte_end":4137,"line_start":47,"line_end":47,"column_start":5,"column_end":33}},{"value":"/ - `out_ptr` must point to a properly initialized value of type `T` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4142,"byte_end":4216,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ must be valid for both reads and writes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4221,"byte_end":4265,"line_start":49,"line_end":49,"column_start":5,"column_end":49}},{"value":"/ - `in_ptr` and `out_ptr` must be either equal or non-overlapping.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4270,"byte_end":4339,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"/ - If `in_ptr` and `out_ptr` are equal, then the memory referenced by","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4344,"byte_end":4416,"line_start":51,"line_end":51,"column_start":5,"column_end":77}},{"value":"/ them must not be accessed through any other pointer (not derived from","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4421,"byte_end":4494,"line_start":52,"line_end":52,"column_start":5,"column_end":78}},{"value":"/ the return value) for the duration of lifetime 'a. Both read and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4499,"byte_end":4573,"line_start":53,"line_end":53,"column_start":5,"column_end":79}},{"value":"/ accesses are forbidden.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4578,"byte_end":4605,"line_start":54,"line_end":54,"column_start":5,"column_end":32}},{"value":"/ - If `in_ptr` and `out_ptr` are not equal, then the memory referenced by","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4610,"byte_end":4686,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ `out_ptr` must not be accessed through any other pointer (not derived from","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4691,"byte_end":4769,"line_start":56,"line_end":56,"column_start":5,"column_end":83}},{"value":"/ the return value) for the duration of lifetime `'a`. Both read and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4774,"byte_end":4850,"line_start":57,"line_end":57,"column_start":5,"column_end":81}},{"value":"/ accesses are forbidden. The memory referenced by `in_ptr` must not be","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4855,"byte_end":4928,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/ mutated for the duration of lifetime `'a`, except inside an `UnsafeCell`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":4933,"byte_end":5010,"line_start":59,"line_end":59,"column_start":5,"column_end":82}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5015,"byte_end":5032,"line_start":60,"line_end":60,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5350,"byte_end":5358,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"clone_in","qualname":"<InOut>::clone_in","value":"pub fn clone_in(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Clone input value and return it.\n","sig":null,"attributes":[{"value":"/ Clone input value and return it.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5280,"byte_end":5316,"line_start":71,"line_end":71,"column_start":5,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5321,"byte_end":5338,"line_start":72,"line_end":72,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6249,"byte_end":6252,"line_start":107,"line_end":107,"column_start":12,"column_end":15},"name":"get","qualname":"<InOut>::get","value":"pub fn get<'a>(&'a mut Self, usize) -> InOut","parent":null,"children":[],"decl_id":null,"docs":" Returns `InOut` for the given position.","sig":null,"attributes":[{"value":"/ Returns `InOut` for the given position.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6096,"byte_end":6139,"line_start":102,"line_end":102,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6144,"byte_end":6147,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6152,"byte_end":6164,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/ If `pos` greater or equal to array length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6169,"byte_end":6215,"line_start":105,"line_end":105,"column_start":5,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6220,"byte_end":6237,"line_start":106,"line_end":106,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6638,"byte_end":6646,"line_start":120,"line_end":120,"column_start":12,"column_end":20},"name":"into_buf","qualname":"<InOut>::into_buf","value":"pub fn into_buf(Self) -> InOutBuf","parent":null,"children":[],"decl_id":null,"docs":" Convert `InOut` array to `InOutBuf`.\n","sig":null,"attributes":[{"value":"/ Convert `InOut` array to `InOutBuf`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6564,"byte_end":6604,"line_start":118,"line_end":118,"column_start":5,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6609,"byte_end":6626,"line_start":119,"line_end":119,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7205,"byte_end":7215,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"xor_in2out","qualname":"<InOut>::xor_in2out","value":"pub fn xor_in2out(&mut Self, &GenericArray<u8, N>)","parent":null,"children":[],"decl_id":null,"docs":" XOR `data` with values behind the input slice and write\n result to the output slice.","sig":null,"attributes":[{"value":"/ XOR `data` with values behind the input slice and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6949,"byte_end":7008,"line_start":131,"line_end":131,"column_start":5,"column_end":64}},{"value":"/ result to the output slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7013,"byte_end":7044,"line_start":132,"line_end":132,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7049,"byte_end":7052,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7057,"byte_end":7069,"line_start":134,"line_end":134,"column_start":5,"column_end":17}},{"value":"/ If `data` length is not equal to the buffer length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7074,"byte_end":7129,"line_start":135,"line_end":135,"column_start":5,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7134,"byte_end":7151,"line_start":136,"line_end":136,"column_start":5,"column_end":22}},{"value":"allow(clippy :: needless_range_loop)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7156,"byte_end":7193,"line_start":137,"line_end":137,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7953,"byte_end":7963,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"xor_in2out","qualname":"<InOut>::xor_in2out","value":"pub fn xor_in2out(&mut Self, &GenericArray<GenericArray<u8, N>, M>)","parent":null,"children":[],"decl_id":null,"docs":" XOR `data` with values behind the input slice and write\n result to the output slice.","sig":null,"attributes":[{"value":"/ XOR `data` with values behind the input slice and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7697,"byte_end":7756,"line_start":155,"line_end":155,"column_start":5,"column_end":64}},{"value":"/ result to the output slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7761,"byte_end":7792,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7797,"byte_end":7800,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7805,"byte_end":7817,"line_start":158,"line_end":158,"column_start":5,"column_end":17}},{"value":"/ If `data` length is not equal to the buffer length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7822,"byte_end":7877,"line_start":159,"line_end":159,"column_start":5,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7882,"byte_end":7899,"line_start":160,"line_end":160,"column_start":5,"column_end":22}},{"value":"allow(clippy :: needless_range_loop)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7904,"byte_end":7941,"line_start":161,"line_end":161,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":8751,"byte_end":8759,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"InOutBuf","qualname":"::inout_buf::InOutBuf","value":"InOutBuf {  }","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117}],"decl_id":null,"docs":" Custom slice type which references one immutable (input) slice and one\n mutable (output) slice of equal length. Input and output slices are\n either the same or do not overlap.\n","sig":null,"attributes":[{"value":"/ Custom slice type which references one immutable (input) slice and one","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":8554,"byte_end":8628,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"/ mutable (output) slice of equal length. Input and output slices are","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":8629,"byte_end":8700,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ either the same or do not overlap.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":8701,"byte_end":8739,"line_start":10,"line_end":10,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9338,"byte_end":9346,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"from_mut","qualname":"<InOutBuf>::from_mut","value":"pub fn from_mut(&'a mut T) -> InOutBuf","parent":null,"children":[],"decl_id":null,"docs":" Create `InOutBuf` from a single mutable reference.\n","sig":null,"attributes":[{"value":"/ Create `InOutBuf` from a single mutable reference.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9250,"byte_end":9304,"line_start":31,"line_end":31,"column_start":5,"column_end":59}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9309,"byte_end":9326,"line_start":32,"line_end":32,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9993,"byte_end":10005,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"from_ref_mut","qualname":"<InOutBuf>::from_ref_mut","value":"pub fn from_ref_mut(&'inp T, &'out mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create `InOutBuf` from a pair of immutable and mutable references.\n","sig":null,"attributes":[{"value":"/ Create `InOutBuf` from a pair of immutable and mutable references.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9889,"byte_end":9959,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9964,"byte_end":9981,"line_start":56,"line_end":56,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10392,"byte_end":10395,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"new","qualname":"<InOutBuf>::new","value":"pub fn new(&'inp [T], &'out mut [T]) -> Result<Self, NotEqualError>","parent":null,"children":[],"decl_id":null,"docs":" Create `InOutBuf` from immutable and mutable slices.","sig":null,"attributes":[{"value":"/ Create `InOutBuf` from immutable and mutable slices.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10221,"byte_end":10277,"line_start":66,"line_end":66,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10282,"byte_end":10285,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Returns an error if length of slices is not equal to each other.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10290,"byte_end":10358,"line_start":68,"line_end":68,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10363,"byte_end":10380,"line_start":69,"line_end":69,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10855,"byte_end":10858,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"len","qualname":"<InOutBuf>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get length of the inner buffers.\n","sig":null,"attributes":[{"value":"/ Get length of the inner buffers.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10785,"byte_end":10821,"line_start":83,"line_end":83,"column_start":5,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10826,"byte_end":10843,"line_start":84,"line_end":84,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10990,"byte_end":10998,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InOutBuf>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the buffer has a length of 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the buffer has a length of 0.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10905,"byte_end":10956,"line_start":89,"line_end":89,"column_start":5,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":10961,"byte_end":10978,"line_start":90,"line_end":90,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11199,"byte_end":11202,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"get","qualname":"<InOutBuf>::get","value":"pub fn get<'a>(&'a mut Self, usize) -> InOut","parent":null,"children":[],"decl_id":null,"docs":" Returns `InOut` for given position.","sig":null,"attributes":[{"value":"/ Returns `InOut` for given position.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11049,"byte_end":11088,"line_start":95,"line_end":95,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11093,"byte_end":11096,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11101,"byte_end":11113,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/ If `pos` greater or equal to buffer length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11118,"byte_end":11165,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11170,"byte_end":11187,"line_start":99,"line_end":99,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11542,"byte_end":11548,"line_start":113,"line_end":113,"column_start":12,"column_end":18},"name":"get_in","qualname":"<InOutBuf>::get_in","value":"pub fn get_in<'a>(&'a Self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Get input slice.\n","sig":null,"attributes":[{"value":"/ Get input slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11488,"byte_end":11508,"line_start":111,"line_end":111,"column_start":5,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11513,"byte_end":11530,"line_start":112,"line_end":112,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11706,"byte_end":11713,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"get_out","qualname":"<InOutBuf>::get_out","value":"pub fn get_out<'a>(&'a mut Self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Get output slice.\n","sig":null,"attributes":[{"value":"/ Get output slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11651,"byte_end":11672,"line_start":117,"line_end":117,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11677,"byte_end":11694,"line_start":118,"line_end":118,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11923,"byte_end":11931,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"into_out","qualname":"<InOutBuf>::into_out","value":"pub fn into_out(Self) -> &'out mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Consume self and return output slice with lifetime `'a`.\n","sig":null,"attributes":[{"value":"/ Consume self and return output slice with lifetime `'a`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11829,"byte_end":11889,"line_start":123,"line_end":123,"column_start":5,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":11894,"byte_end":11911,"line_start":124,"line_end":124,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12109,"byte_end":12117,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<InOutBuf>::into_raw","value":"pub fn into_raw(Self) -> (*const T, *mut T)","parent":null,"children":[],"decl_id":null,"docs":" Get raw input and output pointers.\n","sig":null,"attributes":[{"value":"/ Get raw input and output pointers.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12037,"byte_end":12075,"line_start":129,"line_end":129,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12080,"byte_end":12097,"line_start":130,"line_end":130,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12249,"byte_end":12257,"line_start":137,"line_end":137,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<InOutBuf>::reborrow","value":"pub fn reborrow<'a>(&'a mut Self) -> InOutBuf","parent":null,"children":[],"decl_id":null,"docs":" Reborrow `self`.\n","sig":null,"attributes":[{"value":"/ Reborrow `self`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12195,"byte_end":12215,"line_start":135,"line_end":135,"column_start":5,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12220,"byte_end":12237,"line_start":136,"line_end":136,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13833,"byte_end":13841,"line_start":167,"line_end":167,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<InOutBuf>::from_raw","value":"pub unsafe fn from_raw(*const T, *mut T, usize) -> InOutBuf","parent":null,"children":[],"decl_id":null,"docs":" Create [`InOutBuf`] from raw input and output pointers.","sig":null,"attributes":[{"value":"/ Create [`InOutBuf`] from raw input and output pointers.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12462,"byte_end":12521,"line_start":146,"line_end":146,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12526,"byte_end":12529,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12534,"byte_end":12546,"line_start":148,"line_end":148,"column_start":5,"column_end":17}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12551,"byte_end":12625,"line_start":149,"line_end":149,"column_start":5,"column_end":79}},{"value":"/ - `in_ptr` must point to a properly initialized value of type `T` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12630,"byte_end":12703,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ must be valid for reads for `len * mem::size_of::<T>()` many bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12708,"byte_end":12779,"line_start":151,"line_end":151,"column_start":5,"column_end":76}},{"value":"/ - `out_ptr` must point to a properly initialized value of type `T` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12784,"byte_end":12858,"line_start":152,"line_end":152,"column_start":5,"column_end":79}},{"value":"/ must be valid for both reads and writes for `len * mem::size_of::<T>()`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12863,"byte_end":12938,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ many bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12943,"byte_end":12958,"line_start":154,"line_end":154,"column_start":5,"column_end":20}},{"value":"/ - `in_ptr` and `out_ptr` must be either equal or non-overlapping.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":12963,"byte_end":13032,"line_start":155,"line_end":155,"column_start":5,"column_end":74}},{"value":"/ - If `in_ptr` and `out_ptr` are equal, then the memory referenced by","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13037,"byte_end":13109,"line_start":156,"line_end":156,"column_start":5,"column_end":77}},{"value":"/ them must not be accessed through any other pointer (not derived from","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13114,"byte_end":13187,"line_start":157,"line_end":157,"column_start":5,"column_end":78}},{"value":"/ the return value) for the duration of lifetime 'a. Both read and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13192,"byte_end":13266,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ accesses are forbidden.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13271,"byte_end":13298,"line_start":159,"line_end":159,"column_start":5,"column_end":32}},{"value":"/ - If `in_ptr` and `out_ptr` are not equal, then the memory referenced by","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13303,"byte_end":13379,"line_start":160,"line_end":160,"column_start":5,"column_end":81}},{"value":"/ `out_ptr` must not be accessed through any other pointer (not derived from","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13384,"byte_end":13462,"line_start":161,"line_end":161,"column_start":5,"column_end":83}},{"value":"/ the return value) for the duration of lifetime 'a. Both read and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13467,"byte_end":13541,"line_start":162,"line_end":162,"column_start":5,"column_end":79}},{"value":"/ accesses are forbidden. The memory referenced by `in_ptr` must not be","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13546,"byte_end":13619,"line_start":163,"line_end":163,"column_start":5,"column_end":78}},{"value":"/ mutated for the duration of lifetime `'a`, except inside an `UnsafeCell`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13624,"byte_end":13701,"line_start":164,"line_end":164,"column_start":5,"column_end":82}},{"value":"/ - The total size `len * mem::size_of::<T>()`  must be no larger than `isize::MAX`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13706,"byte_end":13792,"line_start":165,"line_end":165,"column_start":5,"column_end":91}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":13797,"byte_end":13814,"line_start":166,"line_end":166,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14430,"byte_end":14438,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"split_at","qualname":"<InOutBuf>::split_at","value":"pub fn split_at(Self, usize) -> (InOutBuf, InOutBuf)","parent":null,"children":[],"decl_id":null,"docs":" Divides one buffer into two at `mid` index.","sig":null,"attributes":[{"value":"/ Divides one buffer into two at `mid` index.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14073,"byte_end":14120,"line_start":180,"line_end":180,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14125,"byte_end":14128,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14133,"byte_end":14198,"line_start":182,"line_end":182,"column_start":5,"column_end":70}},{"value":"/ the index `mid` itself) and the second will contain all","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14203,"byte_end":14262,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/ indices from `[mid, len)` (excluding the index `len` itself).","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14267,"byte_end":14332,"line_start":184,"line_end":184,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14337,"byte_end":14340,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14345,"byte_end":14357,"line_start":186,"line_end":186,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14362,"byte_end":14365,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14370,"byte_end":14396,"line_start":188,"line_end":188,"column_start":5,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":14401,"byte_end":14418,"line_start":189,"line_end":189,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":15134,"byte_end":15145,"line_start":211,"line_end":211,"column_start":12,"column_end":23},"name":"into_chunks","qualname":"<InOutBuf>::into_chunks","value":"pub fn into_chunks<N: ArrayLength<T>>(Self) -> (InOutBuf, InOutBuf)","parent":null,"children":[],"decl_id":null,"docs":" Partition buffer into 2 parts: buffer of arrays and tail.\n","sig":null,"attributes":[{"value":"/ Partition buffer into 2 parts: buffer of arrays and tail.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":15039,"byte_end":15100,"line_start":209,"line_end":209,"column_start":5,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":15105,"byte_end":15122,"line_start":210,"line_end":210,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16246,"byte_end":16256,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"xor_in2out","qualname":"<InOutBuf>::xor_in2out","value":"pub fn xor_in2out(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" XORs `data` with values behind the input slice and write\n result to the output slice.","sig":null,"attributes":[{"value":"/ XORs `data` with values behind the input slice and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":15989,"byte_end":16049,"line_start":239,"line_end":239,"column_start":5,"column_end":65}},{"value":"/ result to the output slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16054,"byte_end":16085,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16090,"byte_end":16093,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16098,"byte_end":16110,"line_start":242,"line_end":242,"column_start":5,"column_end":17}},{"value":"/ If `data` length is not equal to the buffer length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16115,"byte_end":16170,"line_start":243,"line_end":243,"column_start":5,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16175,"byte_end":16192,"line_start":244,"line_end":244,"column_start":5,"column_end":22}},{"value":"allow(clippy :: needless_range_loop)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16197,"byte_end":16234,"line_start":245,"line_end":245,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":166},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":17148,"byte_end":17160,"line_start":279,"line_end":279,"column_start":12,"column_end":24},"name":"InOutBufIter","qualname":"::inout_buf::InOutBufIter","value":"InOutBufIter {  }","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171}],"decl_id":null,"docs":" Iterator over [`InOutBuf`].\n","sig":null,"attributes":[{"value":"/ Iterator over [`InOutBuf`].","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":17105,"byte_end":17136,"line_start":278,"line_end":278,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":189},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18378,"byte_end":18394,"line_start":17,"line_end":17,"column_start":12,"column_end":28},"name":"InOutBufReserved","qualname":"::reserved::InOutBufReserved","value":"InOutBufReserved {  }","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" Custom slice type which references one immutable (input) slice and one\n mutable (output) slice. Input and output slices are either the same or\n do not overlap. Length of the output slice is always equal or bigger than\n length of the input slice.\n","sig":null,"attributes":[{"value":"/ Custom slice type which references one immutable (input) slice and one","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18108,"byte_end":18182,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ mutable (output) slice. Input and output slices are either the same or","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18183,"byte_end":18257,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ do not overlap. Length of the output slice is always equal or bigger than","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18258,"byte_end":18335,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ length of the input slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18336,"byte_end":18366,"line_start":16,"line_end":16,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18660,"byte_end":18674,"line_start":27,"line_end":27,"column_start":12,"column_end":26},"name":"from_mut_slice","qualname":"<InOutBufReserved>::from_mut_slice","value":"pub fn from_mut_slice(&'a mut [T], usize) -> Result<Self, OutIsTooSmallError>","parent":null,"children":[],"decl_id":null,"docs":" Crate [`InOutBufReserved`] from a single mutable slice.\n","sig":null,"attributes":[{"value":"/ Crate [`InOutBufReserved`] from a single mutable slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18589,"byte_end":18648,"line_start":26,"line_end":26,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20522,"byte_end":20530,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<InOutBufReserved>::from_raw","value":"pub unsafe fn from_raw(*const T, usize, *mut T, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create [`InOutBufReserved`] from raw input and output pointers.","sig":null,"attributes":[{"value":"/ Create [`InOutBufReserved`] from raw input and output pointers.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19089,"byte_end":19156,"line_start":42,"line_end":42,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19161,"byte_end":19164,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19169,"byte_end":19181,"line_start":44,"line_end":44,"column_start":5,"column_end":17}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19186,"byte_end":19260,"line_start":45,"line_end":45,"column_start":5,"column_end":79}},{"value":"/ - `in_ptr` must point to a properly initialized value of type `T` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19265,"byte_end":19338,"line_start":46,"line_end":46,"column_start":5,"column_end":78}},{"value":"/ must be valid for reads for `in_len * mem::size_of::<T>()` many bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19343,"byte_end":19417,"line_start":47,"line_end":47,"column_start":5,"column_end":79}},{"value":"/ - `out_ptr` must point to a properly initialized value of type `T` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19422,"byte_end":19496,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ must be valid for both reads and writes for `out_len * mem::size_of::<T>()`","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19501,"byte_end":19580,"line_start":49,"line_end":49,"column_start":5,"column_end":84}},{"value":"/ many bytes.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19585,"byte_end":19600,"line_start":50,"line_end":50,"column_start":5,"column_end":20}},{"value":"/ - `in_ptr` and `out_ptr` must be either equal or non-overlapping.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19605,"byte_end":19674,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"/ - If `in_ptr` and `out_ptr` are equal, then the memory referenced by","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19679,"byte_end":19751,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ them must not be accessed through any other pointer (not derived from","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19756,"byte_end":19829,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ the return value) for the duration of lifetime 'a. Both read and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19834,"byte_end":19908,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ accesses are forbidden.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19913,"byte_end":19940,"line_start":55,"line_end":55,"column_start":5,"column_end":32}},{"value":"/ - If `in_ptr` and `out_ptr` are not equal, then the memory referenced by","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":19945,"byte_end":20021,"line_start":56,"line_end":56,"column_start":5,"column_end":81}},{"value":"/ `out_ptr` must not be accessed through any other pointer (not derived from","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20026,"byte_end":20104,"line_start":57,"line_end":57,"column_start":5,"column_end":83}},{"value":"/ the return value) for the duration of lifetime 'a. Both read and write","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20109,"byte_end":20183,"line_start":58,"line_end":58,"column_start":5,"column_end":79}},{"value":"/ accesses are forbidden. The memory referenced by `in_ptr` must not be","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20188,"byte_end":20261,"line_start":59,"line_end":59,"column_start":5,"column_end":78}},{"value":"/ mutated for the duration of lifetime `'a`, except inside an `UnsafeCell`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20266,"byte_end":20343,"line_start":60,"line_end":60,"column_start":5,"column_end":82}},{"value":"/ - The total size `in_len * mem::size_of::<T>()` and","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20348,"byte_end":20403,"line_start":61,"line_end":61,"column_start":5,"column_end":60}},{"value":"/ `out_len * mem::size_of::<T>()`  must be no larger than `isize::MAX`.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20408,"byte_end":20481,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20486,"byte_end":20503,"line_start":63,"line_end":63,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20866,"byte_end":20874,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<InOutBufReserved>::into_raw","value":"pub fn into_raw(Self) -> (*const T, *mut T)","parent":null,"children":[],"decl_id":null,"docs":" Get raw input and output pointers.\n","sig":null,"attributes":[{"value":"/ Get raw input and output pointers.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20794,"byte_end":20832,"line_start":79,"line_end":79,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20837,"byte_end":20854,"line_start":80,"line_end":80,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21014,"byte_end":21024,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"get_in_len","qualname":"<InOutBufReserved>::get_in_len","value":"pub fn get_in_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get input buffer length.\n","sig":null,"attributes":[{"value":"/ Get input buffer length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20952,"byte_end":20980,"line_start":85,"line_end":85,"column_start":5,"column_end":33}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":20985,"byte_end":21002,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21137,"byte_end":21148,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"get_out_len","qualname":"<InOutBufReserved>::get_out_len","value":"pub fn get_out_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get output buffer length.\n","sig":null,"attributes":[{"value":"/ Get output buffer length.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21074,"byte_end":21103,"line_start":91,"line_end":91,"column_start":5,"column_end":34}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21108,"byte_end":21125,"line_start":92,"line_end":92,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21322,"byte_end":21333,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"from_slices","qualname":"<InOutBufReserved>::from_slices","value":"pub fn from_slices(&'inp [T], &'out mut [T])\n-> Result<Self, OutIsTooSmallError>","parent":null,"children":[],"decl_id":null,"docs":" Crate [`InOutBufReserved`] from two separate slices.\n","sig":null,"attributes":[{"value":"/ Crate [`InOutBufReserved`] from two separate slices.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21254,"byte_end":21310,"line_start":99,"line_end":99,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21808,"byte_end":21814,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"get_in","qualname":"<InOutBufReserved>::get_in","value":"pub fn get_in<'a>(&'a Self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Get input slice.\n","sig":null,"attributes":[{"value":"/ Get input slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21754,"byte_end":21774,"line_start":116,"line_end":116,"column_start":5,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21779,"byte_end":21796,"line_start":117,"line_end":117,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21975,"byte_end":21982,"line_start":124,"line_end":124,"column_start":12,"column_end":19},"name":"get_out","qualname":"<InOutBufReserved>::get_out","value":"pub fn get_out<'a>(&'a mut Self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Get output slice.\n","sig":null,"attributes":[{"value":"/ Get output slice.","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21920,"byte_end":21941,"line_start":122,"line_end":122,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21946,"byte_end":21963,"line_start":123,"line_end":123,"column_start":5,"column_end":22}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":936,"byte_end":950,"line_start":7,"line_end":7,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":9}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":1408,"byte_end":1421,"line_start":22,"line_end":22,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":2382,"byte_end":2400,"line_start":54,"line_end":54,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3095,"byte_end":3100,"line_start":13,"line_end":13,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5253,"byte_end":5258,"line_start":70,"line_end":70,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5457,"byte_end":5462,"line_start":78,"line_end":78,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5752,"byte_end":5757,"line_start":90,"line_end":90,"column_start":54,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6052,"byte_end":6057,"line_start":101,"line_end":101,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6904,"byte_end":6909,"line_start":130,"line_end":130,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7564,"byte_end":7569,"line_start":150,"line_end":150,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":8963,"byte_end":8971,"line_start":18,"line_end":18,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9224,"byte_end":9232,"line_start":30,"line_end":30,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9608,"byte_end":9616,"line_start":44,"line_end":44,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9859,"byte_end":9867,"line_start":54,"line_end":54,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":15958,"byte_end":15966,"line_start":238,"line_end":238,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16634,"byte_end":16642,"line_start":258,"line_end":258,"column_start":75,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":17264,"byte_end":17276,"line_start":284,"line_end":284,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18555,"byte_end":18571,"line_start":25,"line_end":25,"column_start":13,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21216,"byte_end":21232,"line_start":98,"line_end":98,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":22117,"byte_end":22133,"line_start":129,"line_end":129,"column_start":18,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":936,"byte_end":950,"line_start":7,"line_end":7,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":223},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":1408,"byte_end":1421,"line_start":22,"line_end":22,"column_start":23,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/errors.rs","byte_start":2382,"byte_end":2400,"line_start":54,"line_end":54,"column_start":23,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":237},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":3095,"byte_end":3100,"line_start":13,"line_end":13,"column_start":21,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5253,"byte_end":5258,"line_start":70,"line_end":70,"column_start":28,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5457,"byte_end":5462,"line_start":78,"line_end":78,"column_start":33,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":32},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":5752,"byte_end":5757,"line_start":90,"line_end":90,"column_start":54,"column_end":59},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":32},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6052,"byte_end":6057,"line_start":101,"line_end":101,"column_start":40,"column_end":45},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":6904,"byte_end":6909,"line_start":130,"line_end":130,"column_start":38,"column_end":43},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout.rs","byte_start":7564,"byte_end":7569,"line_start":150,"line_end":150,"column_start":24,"column_end":29},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":8963,"byte_end":8971,"line_start":18,"line_end":18,"column_start":35,"column_end":43},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":110},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9224,"byte_end":9232,"line_start":30,"line_end":30,"column_start":13,"column_end":21},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9608,"byte_end":9616,"line_start":44,"line_end":44,"column_start":38,"column_end":46},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":110},"to":{"krate":1,"index":7633}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":9859,"byte_end":9867,"line_start":54,"line_end":54,"column_start":21,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":15958,"byte_end":15966,"line_start":238,"line_end":238,"column_start":18,"column_end":26},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":16634,"byte_end":16642,"line_start":258,"line_end":258,"column_start":75,"column_end":83},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":110},"to":{"krate":1,"index":2928}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/inout_buf.rs","byte_start":17264,"byte_end":17276,"line_start":284,"line_end":284,"column_start":34,"column_end":46},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":166},"to":{"krate":1,"index":7822}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":18555,"byte_end":18571,"line_start":25,"line_end":25,"column_start":13,"column_end":29},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":21216,"byte_end":21232,"line_start":98,"line_end":98,"column_start":21,"column_end":37},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/flo/.cargo/registry/src/github.com-1ecc6299db9ec823/inout-0.1.2/src/reserved.rs","byte_start":22117,"byte_end":22133,"line_start":129,"line_end":129,"column_start":18,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":189},"to":{"krate":4294967295,"index":4294967295}}]}